#include <bang.h>
#include <cstdlib>
#include <math.h>

#define EPS 1e-7
#define LEN 4096

__mlu_entry__ void Kernel(float *dst, float *source1, float *source2)
{
    __nram__ float dest[LEN];
    __nram__ float src1[LEN];
    __nram__ float src2[LEN];
    __memcpy(src1, source1, LEN * sizeof(float), GDRAM2NRAM);
    __memcpy(src2, source2, LEN * sizeof(float), GDRAM2NRAM);
    __bang_add(dest, src1, src2, LEN);  // mlu built-in function
    __memcpy(dst, dest, LEN * sizeof(float), NRAM2GDRAM);
}

int main(void)
{
    cnrtQueue_t queue;
    // select device
    CNRT_CHECK(cnrtSetDevice(0));
    // create task queue
    CNRT_CHECK(cnrtQueueCreate(&queue));

    // set kernel's task size
    cnrtDim3_t dim = {1, 1, 1};
    // set kernel's task type
    cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_BLOCK;

    // create Notifier
    cnrtNotifier_t start, end;
    CNRT_CHECK(cnrtNotifierCreate(&start));
    CNRT_CHECK(cnrtNotifierCreate(&end));

    float *host_dst = (float *)malloc(LEN * sizeof(float));
    float *host_src1 = (float *)malloc(LEN * sizeof(float));
    float *host_src2 = (float *)malloc(LEN * sizeof(float));

    for (int i = 0; i < LEN; i++)
    {
        host_src1[i] = i;
        host_src2[i] = i;
    }

    float *mlu_dst;
    float *mlu_src1;
    float *mlu_src2;
    // allocate device memory
    CNRT_CHECK(cnrtMalloc((void **)&mlu_dst, LEN * sizeof(float)));
    CNRT_CHECK(cnrtMalloc((void **)&mlu_src1, LEN * sizeof(float)));
    CNRT_CHECK(cnrtMalloc((void **)&mlu_src2, LEN * sizeof(float)));
    // copy host data to device memory
    CNRT_CHECK(cnrtMemcpy(mlu_src1, host_src1, LEN * sizeof(float), cnrtMemcpyHostToDev));
    CNRT_CHECK(cnrtMemcpy(mlu_src2, host_src2, LEN * sizeof(float), cnrtMemcpyHostToDev));

    // place Notifier into the task queue
    CNRT_CHECK(cnrtPlaceNotifier(start, queue));
    // launch kernel and add it to task queue
    Kernel<<<dim, ktype, queue>>>(mlu_dst, mlu_src1, mlu_src2);
    CNRT_CHECK(cnrtPlaceNotifier(end, queue));

    // wait for the task queue to complete execution
    cnrtQueueSync(queue);
    // copy result to host side
    CNRT_CHECK(cnrtMemcpy(host_dst, mlu_dst, LEN * sizeof(float), cnrtMemcpyDevToHost));

    float timeTotal;
    // calculate time
    CNRT_CHECK(cnrtNotifierDuration(start, end, &timeTotal));
    printf("Total Time: %.3f us\n", timeTotal);

    // free task queue
    CNRT_CHECK(cnrtQueueDestroy(queue));

    // free device memory
    cnrtFree(mlu_dst);
    cnrtFree(mlu_src1);
    cnrtFree(mlu_src2);
    // free host memory
    free(host_dst);
    free(host_src1);
    free(host_src2);

    return 0;
}