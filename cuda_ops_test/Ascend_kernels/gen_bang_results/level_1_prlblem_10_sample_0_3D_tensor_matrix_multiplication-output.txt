warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z35__device_stub__tensor_matmul_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z20tensor_matmul_kernelPKfS0_Pfiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z20tensor_matmul_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c15_i32 = arith.constant 15 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_id  y
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_id  z
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.thread_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.thread_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %6, %c16_i32 : i32
    %17 = arith.addi %16, %15 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.muli %17, %arg6 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.muli %4, %c16_i32 : i32
    %22 = arith.addi %21, %13 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.index_cast %22 : i32 to index
    %25 = arith.addi %arg5, %c15_i32 : i32
    %26 = arith.divsi %25, %c16_i32 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.cmpi slt, %8, %arg3 : i32
    %29 = arith.muli %8, %arg4 : i32
    %30 = arith.muli %29, %arg5 : i32
    %31 = arith.muli %17, %arg5 : i32
    %32 = arith.addi %30, %31 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.cmpi slt, %22, %arg6 : i32
    %35 = affine.for %arg7 = 0 to %27 iter_args(%arg8 = %cst) -> (f32) {
      %41 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (-s0 + s1 - 1 >= 0, d0 * -16 - s2 + s3 - 1 >= 0)>(%arg7)[%18, %0, %12, %1] -> i1 {
        affine.yield %28 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %41 {
        %44 = affine.load %arg0[%arg7 * 16 + symbol(%33) + symbol(%12)] : memref<?xf32>
        affine.store %44, %alloca_0[symbol(%14), symbol(%12)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%14), symbol(%12)] : memref<16x16xf32, 5>
      }
      %42 = affine.if affine_set<(d0)[s0, s1] : (d0 * -16 - s0 + s1 - 1 >= 0)>(%arg7)[%14, %1] -> i1 {
        affine.yield %34 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %42 {
        %44 = affine.load %arg1[(%arg7 * 16 + symbol(%14)) * symbol(%2) + symbol(%23)] : memref<?xf32>
        affine.store %44, %alloca[symbol(%14), symbol(%12)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%14), symbol(%12)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %43 = affine.for %arg9 = 0 to 16 iter_args(%arg10 = %arg8) -> (f32) {
        %44 = affine.load %alloca_0[symbol(%14), %arg9] : memref<16x16xf32, 5>
        %45 = affine.load %alloca[%arg9, symbol(%12)] : memref<16x16xf32, 5>
        %46 = arith.mulf %44, %45 : f32
        %47 = arith.addf %arg10, %46 : f32
        affine.yield %47 : f32
      }
      nvvm.barrier0
      affine.yield %43 : f32
    }
    %36 = arith.cmpi slt, %17, %arg4 : i32
    %37 = arith.cmpi slt, %22, %arg6 : i32
    %38 = arith.cmpi slt, %8, %arg3 : i32
    %39 = arith.andi %37, %38 : i1
    %40 = arith.andi %36, %39 : i1
    scf.if %40 {
      affine.store %35, %arg2[symbol(%11) + symbol(%20) + symbol(%24)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z20tensor_matmul_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c15_i32 = arith.constant 15 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg5 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_id  z
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %9, %arg4 : i32
    %11 = arith.muli %10, %arg6 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = gpu.thread_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = gpu.thread_id  y
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.muli %7, %c16_i32 : i32
    %18 = arith.addi %17, %16 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.muli %18, %arg6 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %5, %c16_i32 : i32
    %23 = arith.addi %22, %14 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.addi %arg5, %c15_i32 : i32
    %26 = arith.divsi %25, %c16_i32 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.cmpi slt, %9, %arg3 : i32
    %29 = arith.muli %10, %arg5 : i32
    %30 = arith.muli %18, %arg5 : i32
    %31 = arith.addi %29, %30 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.cmpi slt, %23, %arg6 : i32
    %34 = affine.for %arg7 = 0 to %27 iter_args(%arg8 = %cst) -> (f32) {
      affine.if affine_set<(d0)[s0, s1, s2, s3, s4, s5] : (-s0 + s1 - 1 >= 0, s2 - s3 - 1 >= 0, d0 * -16 - s4 + s5 - 1 >= 0)>(%arg7)[%8, %0, %1, %19, %13, %2] {
        %39 = affine.load %arg0[%arg7 * 16 + symbol(%32) + symbol(%13)] : memref<?xf32>
        affine.store %39, %alloca_0[symbol(%15), symbol(%13)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%15), symbol(%13)] : memref<16x16xf32, 5>
      }
      affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * -16 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg7)[%15, %2, %24, %3] {
        %39 = affine.load %arg1[(%arg7 * 16 + symbol(%15)) * symbol(%3) + symbol(%24)] : memref<?xf32>
        affine.store %39, %alloca[symbol(%15), symbol(%13)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%15), symbol(%13)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %38 = affine.for %arg9 = 0 to 16 iter_args(%arg10 = %arg8) -> (f32) {
        %39 = affine.load %alloca_0[symbol(%15), %arg9] : memref<16x16xf32, 5>
        %40 = affine.load %alloca[%arg9, symbol(%13)] : memref<16x16xf32, 5>
        %41 = arith.mulf %39, %40 : f32
        %42 = arith.addf %arg10, %41 : f32
        affine.yield %42 : f32
      }
      nvvm.barrier0
      affine.yield %38 : f32
    }
    %35 = arith.cmpi slt, %18, %arg4 : i32
    %36 = arith.andi %33, %28 : i1
    %37 = arith.andi %35, %36 : i1
    scf.if %37 {
      affine.store %34, %arg2[symbol(%12) + symbol(%21) + symbol(%24)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z20tensor_matmul_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16 = arith.constant 16 : index
    %c-16 = arith.constant -16 : index
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c15_i32 = arith.constant 15 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg5 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_id  z
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %9, %arg4 : i32
    %11 = arith.muli %10, %arg6 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = gpu.thread_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = gpu.thread_id  y
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.muli %7, %c16_i32 : i32
    %18 = arith.addi %17, %16 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.muli %18, %arg6 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %5, %c16_i32 : i32
    %23 = arith.addi %22, %14 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.addi %arg5, %c15_i32 : i32
    %26 = arith.divsi %25, %c16_i32 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.cmpi slt, %9, %arg3 : i32
    %29 = arith.muli %10, %arg5 : i32
    %30 = arith.muli %18, %arg5 : i32
    %31 = arith.addi %29, %30 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.cmpi slt, %23, %arg6 : i32
    %34 = scf.for %arg7 = %c0 to %27 step %c1 iter_args(%arg8 = %cst) -> (f32) {
      %38 = arith.subi %0, %8 : index
      %39 = arith.addi %38, %c-1 : index
      %40 = arith.cmpi sge, %39, %c0 : index
      %41 = arith.subi %1, %19 : index
      %42 = arith.addi %41, %c-1 : index
      %43 = arith.cmpi sge, %42, %c0 : index
      %44 = arith.andi %40, %43 : i1
      %45 = arith.muli %arg7, %c-16 : index
      %46 = arith.subi %45, %13 : index
      %47 = arith.addi %46, %2 : index
      %48 = arith.addi %47, %c-1 : index
      %49 = arith.cmpi sge, %48, %c0 : index
      %50 = arith.andi %44, %49 : i1
      scf.if %50 {
        %60 = arith.muli %arg7, %c16 : index
        %61 = arith.addi %60, %32 : index
        %62 = arith.addi %61, %13 : index
        %63 = memref.load %arg0[%62] : memref<?xf32>
        memref.store %63, %alloca_0[%15, %13] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca_0[%15, %13] : memref<16x16xf32, 5>
      }
      %51 = arith.subi %45, %15 : index
      %52 = arith.addi %51, %2 : index
      %53 = arith.addi %52, %c-1 : index
      %54 = arith.cmpi sge, %53, %c0 : index
      %55 = arith.subi %3, %24 : index
      %56 = arith.addi %55, %c-1 : index
      %57 = arith.cmpi sge, %56, %c0 : index
      %58 = arith.andi %54, %57 : i1
      scf.if %58 {
        %60 = arith.muli %arg7, %c16 : index
        %61 = arith.addi %60, %15 : index
        %62 = arith.muli %61, %3 : index
        %63 = arith.addi %62, %24 : index
        %64 = memref.load %arg1[%63] : memref<?xf32>
        memref.store %64, %alloca[%15, %13] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca[%15, %13] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %59 = scf.for %arg9 = %c0 to %c16 step %c1 iter_args(%arg10 = %arg8) -> (f32) {
        %60 = memref.load %alloca_0[%15, %arg9] : memref<16x16xf32, 5>
        %61 = memref.load %alloca[%arg9, %13] : memref<16x16xf32, 5>
        %62 = arith.mulf %60, %61 : f32
        %63 = arith.addf %arg10, %62 : f32
        scf.yield %63 : f32
      }
      nvvm.barrier0
      scf.yield %59 : f32
    }
    %35 = arith.cmpi slt, %18, %arg4 : i32
    %36 = arith.andi %33, %28 : i1
    %37 = arith.andi %35, %36 : i1
    scf.if %37 {
      %38 = arith.addi %12, %21 : index
      %39 = arith.addi %38, %24 : index
      memref.store %34, %arg2[%39] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

