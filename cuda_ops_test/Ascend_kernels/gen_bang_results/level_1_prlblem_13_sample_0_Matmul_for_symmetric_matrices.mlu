#include <bang.h>
__mlu_global__ void symmetric_matmul_kernel(float* v1, float* v2, float* v3, int32_t v4) {
  float v5 = (float)0.0e+00;
  int32_t c32_6 = 32;
  size_t c18446744073709551615_7 = -1;
  size_t c31_8 = 31;
  size_t c0_9 = 0;
  size_t c1_10 = 1;
  size_t c32_11 = 32;
  __nram__ int8_t v12[1024];
  float* v13 = (float*)v12;
  __nram__ int8_t v14[1024];
  float* v15 = (float*)v14;
  __nram__ int8_t v16[32];
  float* v17 = (float*)v16;
  for (size_t v18 = c0_9; v18 < c32_11; v18 += c1_10) {
    v17[v18] = v5;
  }
  int32_t v19 = (v4) * (c32_6);
  int64_t v20 = taskIdY;
  size_t v21 = (size_t) v20;
  int32_t v22 = (int32_t) v21;
  int32_t v23 = (v19) * (v22);
  size_t v24 = (size_t) v23;
  int32_t v25 = (v23) + (v4);
  size_t v26 = (size_t) v25;
  int64_t v27 = taskIdX;
  size_t v28 = (size_t) v27;
  size_t v29 = (v28) * (c32_11);
  size_t v30 = (size_t) v4;
  size_t v31 = (v30) * (c32_11);
  int32_t v32 = (v4) * (v4);
  size_t v33 = (size_t) v32;
  for (size_t v34 = v24; v34 < v26; v34 += c32_11) {
    size_t v35 = (v34) * (c18446744073709551615_7);
    size_t v36 = (v34) - (v24);
    bool v37 = v36 < c0_9;
    size_t v38 = (c18446744073709551615_7) - (v36);
    size_t v39 = (v37) ? (v38) : (v36);
    size_t v40 = (v39) / (c32_11);
    size_t v41 = (c18446744073709551615_7) - (v40);
    size_t v42 = (v37) ? (v41) : (v40);
    size_t v43 = (v42) * (v31);
    for (size_t v44 = c0_9; v44 < c32_11; v44 += c1_10) {
      size_t v45 = (v29) + (v44);
      size_t v46 = (v35) - (v44);
      size_t v47 = (v46) + (v33);
      size_t v48 = (v47) + (c18446744073709551615_7);
      bool v49 = v48 >= c0_9;
      size_t v50 = (c31_8) - (v44);
      bool v51 = v50 >= c0_9;
      bool v52 = (v49) & (v51);
      if (v52) {
        size_t v53 = (v34) + (v44);
        float v54 = v1[v53];
        v15[32*c0_9 + 1*v44 +  0] = v54;
        size_t v55 = (v43) + (v45);
        float v56 = v2[v55];
        v13[32*c0_9 + 1*v44 +  0] = v56;
      } else {
        v15[32*c0_9 + 1*v44 +  0] = v5;
        v13[32*c0_9 + 1*v44 +  0] = v5;
      };
    };
    for (size_t v57 = c0_9; v57 < c32_11; v57 += c1_10) {
      float v58 = v17[v57];
      float v59;
      float v60 = v58;
      for (size_t v61 = c0_9; v61 < c32_11; v61 += c1_10) {
        float v62 = v15[32*c0_9 + 1*v61 +  0];
        float v63 = v13[32*v61 + 1*v57 +  0];
        float v64 = v62 * v63;
        float v65 = v60 + v64;
        v60 = v65;
      }
      v59 = v60;;
      v17[v57] = v59;
    };
  }
  int32_t v66 = (int32_t) v28;
  int32_t v67 = (v22) * (c32_6);
  int32_t v68 = (v67) * (v4);
  size_t v69 = (size_t) v68;
  bool v70 = v67 < v4;
  int32_t v71 = (v66) * (c32_6);
  size_t v72 = (v69) + (v29);
  for (size_t v73 = c0_9; v73 < c32_11; v73 += c1_10) {
    int32_t v74 = (int32_t) v73;
    float v75 = v17[v73];
    int32_t v76 = (v71) + (v74);
    bool v77 = v76 < v4;
    bool v78 = (v70) & (v77);
    if (v78) {
      size_t v79 = (v72) + (v73);
      v3[v79] = v75;
    };
  }
  return;
}




