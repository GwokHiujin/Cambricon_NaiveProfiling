warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z33__device_stub__triu_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z18triu_matmul_kernelPKfS0_Pfi(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32) -> ()
    return
  }
  func.func private @_Z18triu_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.index_cast %8 : i32 to index
    %13 = arith.index_cast %8 : i32 to index
    %14 = arith.index_cast %8 : i32 to index
    %15 = arith.muli %8, %arg3 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = gpu.block_id  x
    %18 = arith.index_cast %17 : index to i32
    %19 = gpu.block_dim  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.muli %18, %20 : i32
    %22 = gpu.thread_id  x
    %23 = arith.index_cast %22 : index to i32
    %24 = arith.addi %21, %23 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.index_cast %24 : i32 to index
    %27 = arith.index_cast %24 : i32 to index
    %28 = arith.cmpi slt, %8, %arg3 : i32
    %29 = arith.cmpi slt, %24, %arg3 : i32
    %30 = arith.cmpi sle, %8, %24 : i32
    %31 = arith.andi %29, %30 : i1
    %32 = arith.andi %28, %31 : i1
    scf.if %32 {
      %33 = affine.for %arg4 = %14 to affine_map<()[s0] -> (s0 + 1)>()[%26] iter_args(%arg5 = %cst) -> (f32) {
        %34 = affine.load %arg0[%arg4 + symbol(%11) + symbol(%13) - symbol(%9)] : memref<?xf32>
        %35 = affine.load %arg1[(%arg4 + symbol(%13) - symbol(%12)) * symbol(%0) + symbol(%25)] : memref<?xf32>
        %36 = arith.mulf %34, %35 : f32
        %37 = arith.addf %arg5, %36 : f32
        affine.yield %37 : f32
      }
      affine.store %33, %arg2[symbol(%16) + symbol(%27)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18triu_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  x
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %8, %arg3 : i32
    %22 = arith.cmpi slt, %19, %arg3 : i32
    %23 = arith.cmpi sle, %8, %19 : i32
    %24 = arith.andi %22, %23 : i1
    %25 = arith.andi %21, %24 : i1
    scf.if %25 {
      %26 = affine.for %arg4 = %9 to affine_map<()[s0] -> (s0 + 1)>()[%20] iter_args(%arg5 = %cst) -> (f32) {
        %27 = affine.load %arg0[%arg4 + symbol(%11)] : memref<?xf32>
        %28 = affine.load %arg1[%arg4 * symbol(%0) + symbol(%20)] : memref<?xf32>
        %29 = arith.mulf %27, %28 : f32
        %30 = arith.addf %arg5, %29 : f32
        affine.yield %30 : f32
      }
      affine.store %26, %arg2[symbol(%11) + symbol(%20)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18triu_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  x
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %8, %arg3 : i32
    %22 = arith.cmpi slt, %19, %arg3 : i32
    %23 = arith.cmpi sle, %8, %19 : i32
    %24 = arith.andi %22, %23 : i1
    %25 = arith.andi %21, %24 : i1
    scf.if %25 {
      %26 = arith.addi %20, %c1 : index
      %27 = scf.for %arg4 = %9 to %26 step %c1 iter_args(%arg5 = %cst) -> (f32) {
        %29 = arith.addi %arg4, %11 : index
        %30 = memref.load %arg0[%29] : memref<?xf32>
        %31 = arith.muli %arg4, %0 : index
        %32 = arith.addi %31, %20 : index
        %33 = memref.load %arg1[%32] : memref<?xf32>
        %34 = arith.mulf %30, %33 : f32
        %35 = arith.addf %arg5, %34 : f32
        scf.yield %35 : f32
      }
      %28 = arith.addi %11, %20 : index
      memref.store %27, %arg2[%28] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

