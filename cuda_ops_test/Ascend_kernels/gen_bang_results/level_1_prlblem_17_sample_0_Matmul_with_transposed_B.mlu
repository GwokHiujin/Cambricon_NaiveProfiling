#include <bang.h>
__mlu_global__ void matmul_kernel(float* v1, float* v2, float* v3, int32_t v4, int32_t v5, int32_t v6) {
  int32_t c15_7 = 15;
  bool c0_8 = false;
  float v9 = (float)0.0e+00;
  int32_t c16_10 = 16;
  size_t c18446744073709551615_11 = -1;
  size_t c16_12 = 16;
  size_t c0_13 = 0;
  size_t c1_14 = 1;
  size_t c32_15 = 32;
  __nram__ int8_t v16[256];
  float* v17 = (float*)v16;
  __nram__ int8_t v18[256];
  float* v19 = (float*)v18;
  __nram__ int8_t v20[32];
  float* v21 = (float*)v20;
  for (size_t v22 = c0_13; v22 < c32_15; v22 += c1_14) {
    v21[v22] = v9;
  }
  int32_t v23 = (v6) + (c15_7);
  int32_t v24 = (v23) / (c16_10);
  size_t v25 = (size_t) v24;
  int64_t v26 = taskIdY;
  size_t v27 = (size_t) v26;
  int32_t v28 = (int32_t) v27;
  int32_t v29 = (v28) * (c16_10);
  int32_t v30 = (v29) * (v6);
  size_t v31 = (size_t) v30;
  int64_t v32 = taskIdX;
  size_t v33 = (size_t) v32;
  int32_t v34 = (int32_t) v33;
  int32_t v35 = (v34) * (c16_10);
  size_t v36 = (size_t) v29;
  size_t v37 = (size_t) v5;
  size_t v38 = (size_t) v4;
  size_t v39 = (v38) - (v36);
  size_t v40 = (v39) + (c18446744073709551615_11);
  bool v41 = v40 >= c0_13;
  for (size_t v42 = c0_13; v42 < v25; v42 += c1_14) {
    int32_t v43 = (int32_t) v42;
    int32_t v44 = (v43) * (c16_10);
    size_t v45 = (v42) * (c16_12);
    size_t v46 = (v45) + (v31);
    bool v47 = v44 < v6;
    size_t v48 = (v45) * (v37);
    for (size_t v49 = c0_13; v49 < c32_15; v49 += c1_14) {
      int32_t v50 = (int32_t) v49;
      int32_t v51 = (v35) + (v50);
      size_t v52 = (size_t) v51;
      bool v53;
      if (v41) {
        int32_t v54 = (v44) + (v50);
        bool v55 = v54 < v6;
        v53 = v55;
      } else {
        v53 = c0_8;
      };
      if (v53) {
        size_t v56 = (v46) + (v49);
        float v57 = v1[v56];
        v19[16*c0_13 + 1*v49 +  0] = v57;
      } else {
        v19[16*c0_13 + 1*v49 +  0] = v9;
      };
      size_t v58 = (v37) - (v52);
      size_t v59 = (v58) + (c18446744073709551615_11);
      bool v60 = v59 >= c0_13;
      bool v61 = (v60) & (v47);
      if (v61) {
        size_t v62 = (v48) + (v52);
        float v63 = v2[v62];
        v17[16*c0_13 + 1*v49 +  0] = v63;
      } else {
        v17[16*c0_13 + 1*v49 +  0] = v9;
      };
    };
    for (size_t v64 = c0_13; v64 < c32_15; v64 += c1_14) {
      float v65 = v21[v64];
      float v66;
      float v67 = v65;
      for (size_t v68 = c0_13; v68 < c16_12; v68 += c1_14) {
        float v69 = v19[16*c0_13 + 1*v68 +  0];
        float v70 = v17[16*v68 + 1*v64 +  0];
        float v71 = v69 * v70;
        float v72 = v67 + v71;
        v67 = v72;
      }
      v66 = v67;;
      v21[v64] = v66;
    };
  }
  int32_t v73 = (v29) * (v5);
  size_t v74 = (size_t) v73;
  bool v75 = v29 < v4;
  for (size_t v76 = c0_13; v76 < c32_15; v76 += c1_14) {
    int32_t v77 = (int32_t) v76;
    int32_t v78 = (v35) + (v77);
    size_t v79 = (size_t) v78;
    float v80 = v21[v76];
    bool v81 = v78 < v5;
    bool v82 = (v75) & (v81);
    if (v82) {
      size_t v83 = (v74) + (v79);
      v3[v83] = v80;
    };
  }
  return;
}




