#include <bang.h>
__mlu_global__ void leaky_relu_kernel(float* v1, float* v2, float v3, int32_t v4) {
  int32_t c32_5 = 32;
  float v6 = (float)0.0e+00;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  int64_t v10 = taskIdX;
  size_t v11 = (size_t) v10;
  int32_t v12 = (int32_t) v11;
  int32_t v13 = (v12) * (c32_5);
  for (size_t v14 = c0_7; v14 < c32_9; v14 += c1_8) {
    int32_t v15 = (int32_t) v14;
    int32_t v16 = (v13) + (v15);
    size_t v17 = (size_t) v16;
    bool v18 = v16 < v4;
    if (v18) {
      float v19 = v1[v17];
      bool v20 = v19 > v6;
      float v21;
      if (v20) {
        v21 = v19;
      } else {
        float v22 = v19 * v3;
        v21 = v22;
      };
      v2[v17] = v21;
    };
  }
  return;
}




