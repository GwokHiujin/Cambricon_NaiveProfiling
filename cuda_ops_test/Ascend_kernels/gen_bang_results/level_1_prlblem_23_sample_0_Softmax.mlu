#include <bang.h>
__mlu_global__ void softmax_kernel_batch(float* v1, float* v2, int32_t v3, int32_t v4) {
  size_t c5_5 = 5;
  int32_t c16_6 = 16;
  float v7 = (float)-3.402823470e+38;
  float v8 = (float)0.0e+00;
  size_t c0_9 = 0;
  size_t c1_10 = 1;
  size_t c32_11 = 32;
  __nram__ int8_t v12[32];
  float* v13 = (float*)v12;
  int64_t v14 = taskIdX;
  size_t v15 = (size_t) v14;
  int32_t v16 = (int32_t) v15;
  bool v17 = v16 < v3;
  if (v17) {
    __nram__ int8_t v18[32];
    float* v19 = (float*)v18;
    int32_t v20 = (v16) * (v4);
    size_t v21 = (size_t) v4;
    for (size_t v22 = c0_9; v22 < c32_11; v22 += c1_10) {
      float v23;
      float v24 = v7;
      for (size_t v25 = v22; v25 < v21; v25 += c32_11) {
        size_t v26 = (v25) - (v22);
        size_t v27 = (v26) / (c32_11);
        size_t v28 = (v27) * (c32_11);
        size_t v29 = (v22) + (v28);
        int32_t v30 = (int32_t) v29;
        int32_t v31 = (v20) + (v30);
        size_t v32 = (size_t) v31;
        float v33 = v1[v32];
        bool v34 = v33 > v24;
        float v35 = (v34) ? (v33) : (v24);
        v24 = v35;
      }
      v23 = v24;;
      v13[v22] = v23;
    };
    for (size_t v36 = c0_9; v36 < c5_5; v36 += c1_10) {
      int32_t v37 = (int32_t) v36;
      int32_t v38 = (c16_6) >> (v37);
      for (size_t v39 = c0_9; v39 < c32_11; v39 += c1_10) {
        int32_t v40 = (int32_t) v39;
        bool v41 = v40 < v38;
        if (v41) {
          float v42 = v13[v39];
          int32_t v43 = (v40) + (v38);
          size_t v44 = (size_t) v43;
          float v45 = v13[v44];
          bool v46 = v42 < v45;
          if (v46) {
            v13[v39] = v45;
          };
        };
      };
    };
    float v47 = v13[c0_9];
    for (size_t v48 = c0_9; v48 < c32_11; v48 += c1_10) {
      v19[v48] = v47;
    };
    for (size_t v49 = c0_9; v49 < c32_11; v49 += c1_10) {
      float v50 = v19[v49];
      float v51;
      float v52 = v8;
      for (size_t v53 = v49; v53 < v21; v53 += c32_11) {
        size_t v54 = (v53) - (v49);
        size_t v55 = (v54) / (c32_11);
        size_t v56 = (v55) * (c32_11);
        size_t v57 = (v49) + (v56);
        int32_t v58 = (int32_t) v57;
        int32_t v59 = (v20) + (v58);
        size_t v60 = (size_t) v59;
        float v61 = v1[v60];
        float v62 = v61 - v50;
        float v63 = expf(v62);
        v2[v60] = v63;
        float v64 = v52 + v63;
        v52 = v64;
      }
      v51 = v52;;
      size_t v65 = (v49) + (c32_11);
      v13[v65] = v51;
    };
    for (size_t v66 = c0_9; v66 < c5_5; v66 += c1_10) {
      int32_t v67 = (int32_t) v66;
      int32_t v68 = (c16_6) >> (v67);
      for (size_t v69 = c0_9; v69 < c32_11; v69 += c1_10) {
        size_t v70 = (v69) + (c32_11);
        int32_t v71 = (int32_t) v69;
        bool v72 = v71 < v68;
        if (v72) {
          int32_t v73 = (v71) + (v68);
          size_t v74 = (size_t) v73;
          size_t v75 = (v74) + (c32_11);
          float v76 = v13[v75];
          float v77 = v13[v70];
          float v78 = v77 + v76;
          v13[v70] = v78;
        };
      };
    };
    float v79 = v13[c32_11];
    for (size_t v80 = c0_9; v80 < c32_11; v80 += c1_10) {
      for (size_t v81 = v80; v81 < v21; v81 += c32_11) {
        size_t v82 = (v81) - (v80);
        size_t v83 = (v82) / (c32_11);
        size_t v84 = (v83) * (c32_11);
        size_t v85 = (v80) + (v84);
        int32_t v86 = (int32_t) v85;
        int32_t v87 = (v20) + (v86);
        size_t v88 = (size_t) v87;
        float v89 = v2[v88];
        float v90 = v89 / v79;
        v2[v88] = v90;
      };
    };
  }
  return;
}




