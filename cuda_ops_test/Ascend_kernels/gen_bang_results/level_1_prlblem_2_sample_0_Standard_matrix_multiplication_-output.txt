warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z28__device_stub__matmul_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z13matmul_kernelPKfS0_Pfiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z13matmul_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %2 = gpu.block_id  y
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.index_cast %arg5 : i32 to index
    %11 = arith.muli %3, %c16_i32 : i32
    %12 = arith.addi %11, %7 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %12, %arg5 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.muli %5, %c16_i32 : i32
    %17 = arith.addi %16, %9 : i32
    %18 = arith.cmpi slt, %17, %arg4 : i32
    %19 = affine.for %arg6 = 0 to %10 step 16 iter_args(%arg7 = %cst) -> (f32) {
      %29 = arith.index_cast %arg6 : index to i32
      %30 = affine.if affine_set<()[s0, s1] : (-s0 + s1 - 1 >= 0)>()[%13, %0] -> i1 {
        %33 = arith.addi %29, %9 : i32
        %34 = arith.cmpi slt, %33, %arg5 : i32
        affine.yield %34 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %30 {
        %33 = affine.load %arg0[%arg6 + symbol(%15) + symbol(%8)] : memref<?xf32>
        affine.store %33, %alloca_0[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      }
      %31 = affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 + s1 - 1 >= 0)>(%arg6)[%6, %10] -> i1 {
        affine.yield %18 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %31 {
        %33 = affine.load %arg1[(%arg6 + symbol(%6)) * symbol(%1) + symbol(%4) * 16 + symbol(%8)] : memref<?xf32>
        affine.store %33, %alloca[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %32 = affine.for %arg8 = 0 to 16 iter_args(%arg9 = %arg7) -> (f32) {
        %33 = affine.load %alloca_0[symbol(%6), %arg8] : memref<16x16xf32, 5>
        %34 = affine.load %alloca[%arg8, symbol(%8)] : memref<16x16xf32, 5>
        %35 = arith.mulf %33, %34 : f32
        %36 = arith.addf %arg9, %35 : f32
        affine.yield %36 : f32
      }
      nvvm.barrier0
      affine.yield %32 : f32
    }
    %20 = arith.muli %3, %c16_i32 : i32
    %21 = arith.addi %20, %7 : i32
    %22 = arith.muli %21, %arg4 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.cmpi slt, %21, %arg3 : i32
    %25 = arith.muli %5, %c16_i32 : i32
    %26 = arith.addi %25, %9 : i32
    %27 = arith.cmpi slt, %26, %arg4 : i32
    %28 = arith.andi %24, %27 : i1
    scf.if %28 {
      affine.store %19, %arg2[symbol(%23) + symbol(%4) * 16 + symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13matmul_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %2 = gpu.block_id  y
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.index_cast %arg5 : i32 to index
    %11 = arith.muli %3, %c16_i32 : i32
    %12 = arith.addi %11, %7 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %12, %arg5 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.muli %5, %c16_i32 : i32
    %17 = arith.addi %16, %9 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.cmpi slt, %17, %arg4 : i32
    %20 = affine.for %arg6 = 0 to %10 step 16 iter_args(%arg7 = %cst) -> (f32) {
      %25 = arith.index_cast %arg6 : index to i32
      %26 = affine.if affine_set<()[s0, s1] : (s0 - s1 - 1 >= 0)>()[%0, %13] -> i1 {
        %28 = arith.addi %25, %9 : i32
        %29 = arith.cmpi slt, %28, %arg5 : i32
        affine.yield %29 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %26 {
        %28 = affine.load %arg0[%arg6 + symbol(%15) + symbol(%8)] : memref<?xf32>
        affine.store %28, %alloca_0[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      }
      affine.if affine_set<(d0)[s0, s1, s2, s3] : (-d0 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg6)[%6, %10, %18, %1] {
        %28 = affine.load %arg1[(%arg6 + symbol(%6)) * symbol(%1) + symbol(%4) * 16 + symbol(%8)] : memref<?xf32>
        affine.store %28, %alloca[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%6), symbol(%8)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %27 = affine.for %arg8 = 0 to 16 iter_args(%arg9 = %arg7) -> (f32) {
        %28 = affine.load %alloca_0[symbol(%6), %arg8] : memref<16x16xf32, 5>
        %29 = affine.load %alloca[%arg8, symbol(%8)] : memref<16x16xf32, 5>
        %30 = arith.mulf %28, %29 : f32
        %31 = arith.addf %arg9, %30 : f32
        affine.yield %31 : f32
      }
      nvvm.barrier0
      affine.yield %27 : f32
    }
    %21 = arith.muli %12, %arg4 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.cmpi slt, %12, %arg3 : i32
    %24 = arith.andi %23, %19 : i1
    scf.if %24 {
      affine.store %20, %arg2[symbol(%22) + symbol(%4) * 16 + symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13matmul_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c-1 = arith.constant -1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %2 = gpu.block_id  y
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.index_cast %arg5 : i32 to index
    %11 = arith.muli %3, %c16_i32 : i32
    %12 = arith.addi %11, %7 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %12, %arg5 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.muli %5, %c16_i32 : i32
    %17 = arith.addi %16, %9 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.cmpi slt, %17, %arg4 : i32
    %20 = scf.for %arg6 = %c0 to %10 step %c16 iter_args(%arg7 = %cst) -> (f32) {
      %25 = arith.index_cast %arg6 : index to i32
      %26 = arith.subi %0, %13 : index
      %27 = arith.addi %26, %c-1 : index
      %28 = arith.cmpi sge, %27, %c0 : index
      %29 = scf.if %28 -> (i1) {
        %40 = arith.addi %25, %9 : i32
        %41 = arith.cmpi slt, %40, %arg5 : i32
        scf.yield %41 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %29 {
        %40 = arith.addi %arg6, %15 : index
        %41 = arith.addi %40, %8 : index
        %42 = memref.load %arg0[%41] : memref<?xf32>
        memref.store %42, %alloca_0[%6, %8] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca_0[%6, %8] : memref<16x16xf32, 5>
      }
      %30 = arith.muli %arg6, %c-1 : index
      %31 = arith.subi %30, %6 : index
      %32 = arith.addi %31, %10 : index
      %33 = arith.addi %32, %c-1 : index
      %34 = arith.cmpi sge, %33, %c0 : index
      %35 = arith.subi %1, %18 : index
      %36 = arith.addi %35, %c-1 : index
      %37 = arith.cmpi sge, %36, %c0 : index
      %38 = arith.andi %34, %37 : i1
      scf.if %38 {
        %40 = arith.addi %arg6, %6 : index
        %41 = arith.muli %40, %1 : index
        %42 = arith.muli %4, %c16 : index
        %43 = arith.addi %42, %8 : index
        %44 = arith.addi %41, %43 : index
        %45 = memref.load %arg1[%44] : memref<?xf32>
        memref.store %45, %alloca[%6, %8] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca[%6, %8] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %39 = scf.for %arg8 = %c0 to %c16 step %c1 iter_args(%arg9 = %arg7) -> (f32) {
        %40 = memref.load %alloca_0[%6, %arg8] : memref<16x16xf32, 5>
        %41 = memref.load %alloca[%arg8, %8] : memref<16x16xf32, 5>
        %42 = arith.mulf %40, %41 : f32
        %43 = arith.addf %arg9, %42 : f32
        scf.yield %43 : f32
      }
      nvvm.barrier0
      scf.yield %39 : f32
    }
    %21 = arith.muli %12, %arg4 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.cmpi slt, %12, %arg3 : i32
    %24 = arith.andi %23, %19 : i1
    scf.if %24 {
      %25 = arith.muli %4, %c16 : index
      %26 = arith.addi %22, %25 : index
      %27 = arith.addi %26, %8 : index
      memref.store %20, %arg2[%27] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

