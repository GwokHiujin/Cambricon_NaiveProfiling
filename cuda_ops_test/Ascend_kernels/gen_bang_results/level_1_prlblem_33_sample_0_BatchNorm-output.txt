warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z32__device_stub__batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, f32) -> ()
    return
  }
  func.func private @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.index_cast %arg7 : i32 to index
    %2 = arith.index_cast %arg7 : i32 to index
    %3 = arith.index_cast %arg7 : i32 to index
    %4 = arith.muli %arg9, %arg8 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = arith.index_cast %4 : i32 to index
    %7 = arith.index_cast %4 : i32 to index
    %8 = arith.index_cast %4 : i32 to index
    %9 = gpu.block_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_dim  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.muli %10, %12 : i32
    %14 = gpu.thread_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.addi %13, %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.index_cast %16 : i32 to index
    %19 = arith.index_cast %16 : i32 to index
    %20 = arith.index_cast %16 : i32 to index
    %21 = arith.index_cast %16 : i32 to index
    %22 = arith.muli %arg6, %arg7 : i32
    %23 = arith.muli %22, %arg8 : i32
    %24 = arith.muli %23, %arg9 : i32
    %25 = arith.cmpi slt, %16, %24 : i32
    scf.if %25 {
      %26 = affine.load %arg0[symbol(%17)] : memref<?xf32>
      %27 = affine.load %arg3[(symbol(%17) floordiv symbol(%5)) mod symbol(%0)] : memref<?xf32>
      %28 = affine.load %arg4[(symbol(%18) floordiv symbol(%6)) mod symbol(%1)] : memref<?xf32>
      %29 = affine.load %arg1[(symbol(%19) floordiv symbol(%7)) mod symbol(%2)] : memref<?xf32>
      %30 = affine.load %arg2[(symbol(%20) floordiv symbol(%8)) mod symbol(%3)] : memref<?xf32>
      %31 = arith.subf %26, %27 : f32
      %32 = arith.mulf %29, %31 : f32
      %33 = arith.addf %28, %arg10 : f32
      %34 = math.sqrt %33 : f32
      %35 = arith.divf %32, %34 : f32
      %36 = arith.addf %35, %30 : f32
      affine.store %36, %arg5[symbol(%21)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.muli %arg9, %arg8 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.addi %7, %9 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.subi %c-1, %11 : index
    %13 = arith.cmpi slt, %11, %c0 : index
    %14 = arith.select %13, %12, %11 : index
    %15 = arith.divsi %14, %2 : index
    %16 = arith.subi %c-1, %15 : index
    %17 = arith.select %13, %16, %15 : index
    %18 = arith.remsi %17, %0 : index
    %19 = arith.addi %18, %0 : index
    %20 = arith.cmpi slt, %18, %c0 : index
    %21 = arith.select %20, %19, %18 : index
    %22 = arith.muli %arg6, %arg7 : i32
    %23 = arith.muli %22, %arg8 : i32
    %24 = arith.muli %23, %arg9 : i32
    %25 = arith.cmpi slt, %10, %24 : i32
    scf.if %25 {
      %26 = affine.load %arg0[symbol(%11)] : memref<?xf32>
      %27 = affine.load %arg3[symbol(%21)] : memref<?xf32>
      %28 = affine.load %arg4[symbol(%21)] : memref<?xf32>
      %29 = affine.load %arg1[symbol(%21)] : memref<?xf32>
      %30 = affine.load %arg2[symbol(%21)] : memref<?xf32>
      %31 = arith.subf %26, %27 : f32
      %32 = arith.mulf %29, %31 : f32
      %33 = arith.addf %28, %arg10 : f32
      %34 = math.sqrt %33 : f32
      %35 = arith.divf %32, %34 : f32
      %36 = arith.addf %35, %30 : f32
      affine.store %36, %arg5[symbol(%11)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.muli %arg9, %arg8 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.addi %7, %9 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.subi %c-1, %11 : index
    %13 = arith.cmpi slt, %11, %c0 : index
    %14 = arith.select %13, %12, %11 : index
    %15 = arith.divsi %14, %2 : index
    %16 = arith.subi %c-1, %15 : index
    %17 = arith.select %13, %16, %15 : index
    %18 = arith.remsi %17, %0 : index
    %19 = arith.addi %18, %0 : index
    %20 = arith.cmpi slt, %18, %c0 : index
    %21 = arith.select %20, %19, %18 : index
    %22 = arith.muli %arg6, %arg7 : i32
    %23 = arith.muli %22, %arg8 : i32
    %24 = arith.muli %23, %arg9 : i32
    %25 = arith.cmpi slt, %10, %24 : i32
    scf.if %25 {
      %26 = memref.load %arg0[%11] : memref<?xf32>
      %27 = memref.load %arg3[%21] : memref<?xf32>
      %28 = memref.load %arg4[%21] : memref<?xf32>
      %29 = memref.load %arg1[%21] : memref<?xf32>
      %30 = memref.load %arg2[%21] : memref<?xf32>
      %31 = arith.subf %26, %27 : f32
      %32 = arith.mulf %29, %31 : f32
      %33 = arith.addf %28, %arg10 : f32
      %34 = math.sqrt %33 : f32
      %35 = arith.divf %32, %34 : f32
      %36 = arith.addf %35, %30 : f32
      memref.store %36, %arg5[%11] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c0_0 = arith.constant 0 : index
      %0 = arith.index_cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = arith.index_cast %1 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %arg11 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c-1, %10 : index
      %12 = arith.cmpi slt, %10, %c0_0 : index
      %13 = arith.select %12, %11, %10 : index
      %14 = arith.divsi %13, %2 : index
      %15 = arith.subi %c-1, %14 : index
      %16 = arith.select %12, %15, %14 : index
      %17 = arith.remsi %16, %0 : index
      %18 = arith.addi %17, %0 : index
      %19 = arith.cmpi slt, %17, %c0_0 : index
      %20 = arith.select %19, %18, %17 : index
      %21 = arith.muli %arg6, %arg7 : i32
      %22 = arith.muli %21, %arg8 : i32
      %23 = arith.muli %22, %arg9 : i32
      %24 = arith.cmpi slt, %9, %23 : i32
      scf.if %24 {
        %25 = memref.load %arg0[%10] : memref<?xf32>
        %26 = memref.load %arg3[%20] : memref<?xf32>
        %27 = memref.load %arg4[%20] : memref<?xf32>
        %28 = memref.load %arg1[%20] : memref<?xf32>
        %29 = memref.load %arg2[%20] : memref<?xf32>
        %30 = arith.subf %25, %26 : f32
        %31 = arith.mulf %28, %30 : f32
        %32 = arith.addf %27, %arg10 : f32
        %33 = math.sqrt %32 : f32
        %34 = arith.divf %31, %33 : f32
        %35 = arith.addf %34, %29 : f32
        memref.store %35, %arg5[%10] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c0_0 = arith.constant 0 : index
      %0 = arith.index_cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = arith.index_cast %1 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %arg11 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c-1, %10 : index
      %12 = arith.cmpi slt, %10, %c0_0 : index
      %13 = arith.select %12, %11, %10 : index
      %14 = arith.divsi %13, %2 : index
      %15 = arith.subi %c-1, %14 : index
      %16 = arith.select %12, %15, %14 : index
      %17 = arith.remsi %16, %0 : index
      %18 = arith.addi %17, %0 : index
      %19 = arith.cmpi slt, %17, %c0_0 : index
      %20 = arith.select %19, %18, %17 : index
      %21 = arith.muli %arg6, %arg7 : i32
      %22 = arith.muli %21, %arg8 : i32
      %23 = arith.muli %22, %arg9 : i32
      %24 = arith.cmpi slt, %9, %23 : i32
      scf.if %24 {
        %25 = memref.load %arg0[%10] : memref<?xf32>
        %26 = memref.load %arg3[%20] : memref<?xf32>
        %27 = memref.load %arg4[%20] : memref<?xf32>
        %28 = memref.load %arg1[%20] : memref<?xf32>
        %29 = memref.load %arg2[%20] : memref<?xf32>
        %30 = arith.subf %25, %26 : f32
        %31 = arith.mulf %28, %30 : f32
        %32 = arith.addf %27, %arg10 : f32
        %33 = math.sqrt %32 : f32
        %34 = arith.divf %31, %33 : f32
        %35 = arith.addf %34, %29 : f32
        memref.store %35, %arg5[%10] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.muli %arg9, %arg8 : i32
    %2 = arith.index_cast %1 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = arith.muli %arg6, %arg7 : i32
    %9 = arith.muli %8, %arg8 : i32
    %10 = arith.muli %9, %arg9 : i32
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %11 = arith.index_cast %arg11 : index to i32
      %12 = arith.addi %7, %11 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = arith.subi %c-1, %13 : index
      %15 = arith.cmpi slt, %13, %c0 : index
      %16 = arith.select %15, %14, %13 : index
      %17 = arith.divsi %16, %2 : index
      %18 = arith.subi %c-1, %17 : index
      %19 = arith.select %15, %18, %17 : index
      %20 = arith.remsi %19, %0 : index
      %21 = arith.addi %20, %0 : index
      %22 = arith.cmpi slt, %20, %c0 : index
      %23 = arith.select %22, %21, %20 : index
      %24 = arith.cmpi slt, %12, %10 : i32
      scf.if %24 {
        %25 = memref.load %arg0[%13] : memref<?xf32>
        %26 = memref.load %arg3[%23] : memref<?xf32>
        %27 = memref.load %arg4[%23] : memref<?xf32>
        %28 = memref.load %arg1[%23] : memref<?xf32>
        %29 = memref.load %arg2[%23] : memref<?xf32>
        %30 = arith.subf %25, %26 : f32
        %31 = arith.mulf %28, %30 : f32
        %32 = arith.addf %27, %arg10 : f32
        %33 = math.sqrt %32 : f32
        %34 = arith.divf %31, %33 : f32
        %35 = arith.addf %34, %29 : f32
        memref.store %35, %arg5[%13] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif_0 {
    gpu.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = arith.index_cast %1 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.muli %arg6, %arg7 : i32
      %9 = arith.muli %8, %arg8 : i32
      %10 = arith.muli %9, %arg9 : i32
      scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
        %11 = arith.index_cast %arg11 : index to i32
        %12 = arith.addi %7, %11 : i32
        %13 = arith.index_cast %12 : i32 to index
        %14 = arith.subi %c-1, %13 : index
        %15 = arith.cmpi slt, %13, %c0 : index
        %16 = arith.select %15, %14, %13 : index
        %17 = arith.divsi %16, %2 : index
        %18 = arith.subi %c-1, %17 : index
        %19 = arith.select %15, %18, %17 : index
        %20 = arith.remsi %19, %0 : index
        %21 = arith.addi %20, %0 : index
        %22 = arith.cmpi slt, %20, %c0 : index
        %23 = arith.select %22, %21, %20 : index
        %24 = arith.cmpi slt, %12, %10 : i32
        scf.if %24 {
          %25 = memref.load %arg0[%13] : memref<?xf32>
          %26 = memref.load %arg3[%23] : memref<?xf32>
          %27 = memref.load %arg4[%23] : memref<?xf32>
          %28 = memref.load %arg1[%23] : memref<?xf32>
          %29 = memref.load %arg2[%23] : memref<?xf32>
          %30 = arith.subf %25, %26 : f32
          %31 = arith.mulf %28, %30 : f32
          %32 = arith.addf %27, %arg10 : f32
          %33 = math.sqrt %32 : f32
          %34 = arith.divf %31, %33 : f32
          %35 = arith.addf %34, %29 : f32
          memref.store %35, %arg5[%13] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif_0 {
    gpu.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = arith.index_cast %1 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %c32_0 = arith.constant 32 : index
      %5 = arith.index_cast %c32_0 : index to i32
      %6 = arith.muli %4, %5 : i32
      %7 = arith.muli %arg6, %arg7 : i32
      %8 = arith.muli %7, %arg8 : i32
      %9 = arith.muli %8, %arg9 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg11 = %c0 to %c32 step %c1_1 {
        %10 = arith.index_cast %arg11 : index to i32
        %11 = arith.addi %6, %10 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.subi %c-1, %12 : index
        %14 = arith.cmpi slt, %12, %c0 : index
        %15 = arith.select %14, %13, %12 : index
        %16 = arith.divsi %15, %2 : index
        %17 = arith.subi %c-1, %16 : index
        %18 = arith.select %14, %17, %16 : index
        %19 = arith.remsi %18, %0 : index
        %20 = arith.addi %19, %0 : index
        %21 = arith.cmpi slt, %19, %c0 : index
        %22 = arith.select %21, %20, %19 : index
        %23 = arith.cmpi slt, %11, %9 : i32
        scf.if %23 {
          %24 = memref.load %arg0[%12] : memref<?xf32>
          %25 = memref.load %arg3[%22] : memref<?xf32>
          %26 = memref.load %arg4[%22] : memref<?xf32>
          %27 = memref.load %arg1[%22] : memref<?xf32>
          %28 = memref.load %arg2[%22] : memref<?xf32>
          %29 = arith.subf %24, %25 : f32
          %30 = arith.mulf %27, %29 : f32
          %31 = arith.addf %26, %arg10 : f32
          %32 = math.sqrt %31 : f32
          %33 = arith.divf %30, %32 : f32
          %34 = arith.addf %33, %28 : f32
          memref.store %34, %arg5[%12] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg7 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%5 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%7 = arith.index_cast %6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%15 = arith.index_cast %arg11 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%18 = arith.index_cast %17 : i32 to index
[ict-debug] ArithUnaryOpToNPULowering: process op: 

%42 = math.sqrt %41 : f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif_0 {
    gpu.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = emitc.cast %1 : i32 to index
      %3 = "npu.block_id"() : () -> i64
      %4 = emitc.cast %3 : i64 to i32
      %c32_0 = arith.constant 32 : index
      %c32_i32 = arith.constant 32 : i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.muli %arg6, %arg7 : i32
      %7 = arith.muli %6, %arg8 : i32
      %8 = arith.muli %7, %arg9 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg11 = %c0 to %c32 step %c1_1 {
        %9 = builtin.unrealized_conversion_cast %arg11 : index to i64
        %10 = emitc.cast %9 : i64 to i32
        %11 = arith.addi %5, %10 : i32
        %12 = emitc.cast %11 : i32 to index
        %13 = arith.subi %c-1, %12 : index
        %14 = arith.cmpi slt, %12, %c0 : index
        %15 = arith.select %14, %13, %12 : index
        %16 = arith.divsi %15, %2 : index
        %17 = arith.subi %c-1, %16 : index
        %18 = arith.select %14, %17, %16 : index
        %19 = arith.remsi %18, %0 : index
        %20 = arith.addi %19, %0 : index
        %21 = arith.cmpi slt, %19, %c0 : index
        %22 = arith.select %21, %20, %19 : index
        %23 = arith.cmpi slt, %11, %8 : i32
        scf.if %23 {
          %24 = memref.load %arg0[%12] : memref<?xf32>
          %25 = memref.load %arg3[%22] : memref<?xf32>
          %26 = memref.load %arg4[%22] : memref<?xf32>
          %27 = memref.load %arg1[%22] : memref<?xf32>
          %28 = memref.load %arg2[%22] : memref<?xf32>
          %29 = emitc.sub %24, %25 : (f32, f32) -> f32
          %30 = emitc.mul %27, %29 : (f32, f32) -> f32
          %31 = emitc.add %26, %arg10 : (f32, f32) -> f32
          %32 = emitc.call "sqrtf"(%31) : (f32) -> f32
          %33 = emitc.div %30, %32 : (f32, f32) -> f32
          %34 = emitc.add %33, %28 : (f32, f32) -> f32
          memref.store %34, %arg5[%12] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif_0 {
    gpu.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) {
      %c32_i32 = arith.constant 32 : i32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = emitc.cast %1 : i32 to index
      %3 = "npu.block_id"() : () -> i64
      %4 = emitc.cast %3 : i64 to i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.muli %arg6, %arg7 : i32
      %7 = arith.muli %6, %arg8 : i32
      %8 = arith.muli %7, %arg9 : i32
      scf.for %arg11 = %c0 to %c32 step %c1 {
        %9 = builtin.unrealized_conversion_cast %arg11 : index to i64
        %10 = emitc.cast %9 : i64 to i32
        %11 = arith.addi %5, %10 : i32
        %12 = emitc.cast %11 : i32 to index
        %13 = arith.subi %c-1, %12 : index
        %14 = arith.cmpi slt, %12, %c0 : index
        %15 = arith.select %14, %13, %12 : index
        %16 = arith.divsi %15, %2 : index
        %17 = arith.subi %c-1, %16 : index
        %18 = arith.select %14, %17, %16 : index
        %19 = arith.remsi %18, %0 : index
        %20 = arith.addi %19, %0 : index
        %21 = arith.cmpi slt, %19, %c0 : index
        %22 = arith.select %21, %20, %19 : index
        %23 = arith.cmpi slt, %11, %8 : i32
        scf.if %23 {
          %24 = memref.load %arg0[%12] : memref<?xf32>
          %25 = memref.load %arg3[%22] : memref<?xf32>
          %26 = memref.load %arg4[%22] : memref<?xf32>
          %27 = memref.load %arg1[%22] : memref<?xf32>
          %28 = memref.load %arg2[%22] : memref<?xf32>
          %29 = emitc.sub %24, %25 : (f32, f32) -> f32
          %30 = emitc.mul %27, %29 : (f32, f32) -> f32
          %31 = emitc.add %26, %arg10 : (f32, f32) -> f32
          %32 = emitc.call "sqrtf"(%31) : (f32) -> f32
          %33 = emitc.div %30, %32 : (f32, f32) -> f32
          %34 = emitc.add %33, %28 : (f32, f32) -> f32
          memref.store %34, %arg5[%12] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif_0 {
    gpu.func @_Z17batch_norm_kernelPKfS0_S0_S0_S0_Pfiiiif(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: f32) {
      %c32_i32 = arith.constant 32 : i32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg7 : i32 to index
      %1 = arith.muli %arg9, %arg8 : i32
      %2 = emitc.cast %1 : i32 to index
      %3 = "npu.block_id"() : () -> i64
      %4 = emitc.cast %3 : i64 to i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.muli %arg6, %arg7 : i32
      %7 = arith.muli %6, %arg8 : i32
      %8 = arith.muli %7, %arg9 : i32
      scf.for %arg11 = %c0 to %c32 step %c1 {
        %9 = builtin.unrealized_conversion_cast %arg11 : index to i64
        %10 = emitc.cast %9 : i64 to i32
        %11 = arith.addi %5, %10 : i32
        %12 = emitc.cast %11 : i32 to index
        %13 = arith.subi %c-1, %12 : index
        %14 = arith.cmpi slt, %12, %c0 : index
        %15 = arith.select %14, %13, %12 : index
        %16 = arith.divsi %15, %2 : index
        %17 = arith.subi %c-1, %16 : index
        %18 = arith.select %14, %17, %16 : index
        %19 = arith.remsi %18, %0 : index
        %20 = arith.addi %19, %0 : index
        %21 = arith.cmpi slt, %19, %c0 : index
        %22 = arith.select %21, %20, %19 : index
        %23 = arith.cmpi slt, %11, %8 : i32
        emitc.if %23 {
          %24 = memref.load %arg0[%12] : memref<?xf32>
          %25 = memref.load %arg3[%22] : memref<?xf32>
          %26 = memref.load %arg4[%22] : memref<?xf32>
          %27 = memref.load %arg1[%22] : memref<?xf32>
          %28 = memref.load %arg2[%22] : memref<?xf32>
          %29 = emitc.sub %24, %25 : (f32, f32) -> f32
          %30 = emitc.mul %27, %29 : (f32, f32) -> f32
          %31 = emitc.add %26, %arg10 : (f32, f32) -> f32
          %32 = emitc.call "sqrtf"(%31) : (f32) -> f32
          %33 = emitc.div %30, %32 : (f32, f32) -> f32
          %34 = emitc.add %33, %28 : (f32, f32) -> f32
          memref.store %34, %arg5[%12] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

