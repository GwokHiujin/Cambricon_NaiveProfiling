#include <bang.h>
__mlu_global__ void batch_norm_kernel(float* v1, float* v2, float* v3, float* v4, float* v5, float* v6, int32_t v7, int32_t v8, int32_t v9, int32_t v10, float v11) {
  int32_t c32_12 = 32;
  size_t c18446744073709551615_13 = -1;
  size_t c0_14 = 0;
  size_t c1_15 = 1;
  size_t c32_16 = 32;
  size_t v17 = (size_t) v8;
  int32_t v18 = (v10) * (v9);
  size_t v19 = (size_t) v18;
  int64_t v20 = taskIdX;
  size_t v21 = (size_t) v20;
  int32_t v22 = (int32_t) v21;
  int32_t v23 = (v22) * (c32_12);
  int32_t v24 = (v7) * (v8);
  int32_t v25 = (v24) * (v9);
  int32_t v26 = (v25) * (v10);
  for (size_t v27 = c0_14; v27 < c32_16; v27 += c1_15) {
    int32_t v28 = (int32_t) v27;
    int32_t v29 = (v23) + (v28);
    size_t v30 = (size_t) v29;
    size_t v31 = (c18446744073709551615_13) - (v30);
    bool v32 = v30 < c0_14;
    size_t v33 = (v32) ? (v31) : (v30);
    size_t v34 = (v33) / (v19);
    size_t v35 = (c18446744073709551615_13) - (v34);
    size_t v36 = (v32) ? (v35) : (v34);
    size_t v37 = (v36) % (v17);
    size_t v38 = (v37) + (v17);
    bool v39 = v37 < c0_14;
    size_t v40 = (v39) ? (v38) : (v37);
    bool v41 = v29 < v26;
    if (v41) {
      float v42 = v1[v30];
      float v43 = v4[v40];
      float v44 = v5[v40];
      float v45 = v2[v40];
      float v46 = v3[v40];
      float v47 = v42 - v43;
      float v48 = v45 * v47;
      float v49 = v44 + v11;
      float v50 = sqrtf(v49);
      float v51 = v48 / v50;
      float v52 = v51 + v46;
      v6[v30] = v52;
    };
  }
  return;
}




