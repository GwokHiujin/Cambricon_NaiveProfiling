warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z38__device_stub__compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg4 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = arith.muli %1, %arg4 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %arg5, %arg6 : i32
    %9 = gpu.block_dim  x
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.cmpi eq, %11, %c0_i32 : i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %8 : i32 to index
    %15 = arith.muli %1, %arg4 : i32
    %16 = arith.addi %15, %7 : i32
    %17 = arith.muli %16, %arg5 : i32
    %18 = arith.muli %17, %arg6 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.subi %14, %10 : index
    %21 = arith.subi %13, %c1 : index
    %22 = arith.addi %21, %20 : index
    %23 = arith.divui %22, %13 : index
    %24:2 = affine.for %arg7 = 0 to %23 iter_args(%arg8 = %cst, %arg9 = %cst) -> (f32, f32) {
      %33 = affine.load %arg0[%arg7 * symbol(%13) + symbol(%19) + symbol(%10)] : memref<?xf32>
      %34 = arith.addf %arg9, %33 : f32
      %35 = arith.mulf %33, %33 : f32
      %36 = arith.addf %arg8, %35 : f32
      affine.yield %36, %34 : f32, f32
    }
    affine.store %24#1, %alloca[symbol(%10)] : memref<1xf32, 5>
    %25 = arith.addi %10, %9 : index
    affine.store %24#0, %alloca[symbol(%25)] : memref<1xf32, 5>
    nvvm.barrier0
    %26 = gpu.block_dim  x
    %27 = arith.index_cast %26 : index to i32
    %28 = arith.divui %27, %c2_i32 : i32
    %29 = math.ctlz %28 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.subi %c32, %30 : index
    %32 = arith.divui %27, %c2_i32 : i32
    affine.for %arg7 = 0 to %31 {
      %33 = arith.index_cast %arg7 : index to i32
      %34 = arith.shrui %32, %33 : i32
      %35 = arith.cmpi ult, %11, %34 : i32
      scf.if %35 {
        %36 = arith.addi %11, %34 : i32
        %37 = arith.index_cast %36 : i32 to index
        %38 = memref.load %alloca[%37] : memref<1xf32, 5>
        %39 = affine.load %alloca[symbol(%10)] : memref<1xf32, 5>
        %40 = arith.addf %39, %38 : f32
        affine.store %40, %alloca[symbol(%10)] : memref<1xf32, 5>
        %41 = arith.addi %11, %34 : i32
        %42 = arith.index_cast %41 : i32 to index
        %43 = arith.addi %42, %9 : index
        %44 = memref.load %alloca[%43] : memref<1xf32, 5>
        %45 = affine.load %alloca[symbol(%10) + symbol(%9)] : memref<1xf32, 5>
        %46 = arith.addf %45, %44 : f32
        affine.store %46, %alloca[symbol(%10) + symbol(%9)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %12 {
      %33 = affine.load %alloca[0] : memref<1xf32, 5>
      %34 = arith.sitofp %8 : i32 to f32
      %35 = arith.divf %33, %34 : f32
      %36 = affine.load %alloca[symbol(%9)] : memref<1xf32, 5>
      %37 = arith.sitofp %8 : i32 to f32
      %38 = arith.divf %36, %37 : f32
      %39 = arith.mulf %35, %35 : f32
      %40 = arith.subf %38, %39 : f32
      affine.store %35, %arg1[symbol(%3) + symbol(%6)] : memref<?xf32>
      affine.store %40, %arg2[symbol(%5) + symbol(%6)] : memref<?xf32>
    }
    return
  }
  func.func private @_Z35__device_stub__instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, f32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %0 = arith.index_cast %arg8 : i32 to index
    %1 = arith.index_cast %arg8 : i32 to index
    %2 = arith.muli %arg8, %arg9 : i32
    %3 = arith.muli %2, %arg10 : i32
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg8 : i32 to index
    %6 = arith.muli %arg9, %arg10 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.index_cast %6 : i32 to index
    %9 = arith.index_cast %6 : i32 to index
    %10 = arith.index_cast %6 : i32 to index
    %11 = gpu.block_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = gpu.thread_id  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.addi %15, %17 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.index_cast %18 : i32 to index
    %21 = arith.divsi %18, %3 : i32
    %22 = arith.muli %21, %arg8 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.muli %21, %arg8 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.index_cast %18 : i32 to index
    %27 = arith.index_cast %18 : i32 to index
    %28 = arith.index_cast %18 : i32 to index
    %29 = arith.muli %arg7, %arg8 : i32
    %30 = arith.muli %29, %arg9 : i32
    %31 = arith.muli %30, %arg10 : i32
    %32 = arith.cmpi slt, %18, %31 : i32
    scf.if %32 {
      %33 = affine.load %arg1[symbol(%23) + (symbol(%19) floordiv symbol(%7)) mod symbol(%0)] : memref<?xf32>
      %34 = affine.load %arg2[symbol(%25) + (symbol(%20) floordiv symbol(%8)) mod symbol(%1)] : memref<?xf32>
      %35 = affine.load %arg3[(symbol(%26) floordiv symbol(%9)) mod symbol(%4)] : memref<?xf32>
      %36 = affine.load %arg4[(symbol(%27) floordiv symbol(%10)) mod symbol(%5)] : memref<?xf32>
      %37 = affine.load %arg0[symbol(%28)] : memref<?xf32>
      %38 = arith.subf %37, %33 : f32
      %39 = arith.mulf %35, %38 : f32
      %40 = arith.addf %34, %arg6 : f32
      %41 = math.sqrt %40 : f32
      %42 = arith.divf %39, %41 : f32
      %43 = arith.addf %42, %36 : f32
      affine.store %43, %arg5[symbol(%28)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg4 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.block_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %arg5, %arg6 : i32
    %7 = gpu.block_dim  x
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    %11 = arith.index_cast %6 : i32 to index
    %12 = arith.addi %2, %5 : i32
    %13 = arith.muli %12, %arg5 : i32
    %14 = arith.muli %13, %arg6 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.subi %11, %8 : index
    %17 = arith.subi %7, %c1 : index
    %18 = arith.addi %17, %16 : index
    %19 = arith.divui %18, %7 : index
    %20:2 = affine.for %arg7 = 0 to %19 iter_args(%arg8 = %cst, %arg9 = %cst) -> (f32, f32) {
      %27 = affine.load %arg0[%arg7 * symbol(%7) + symbol(%15) + symbol(%8)] : memref<?xf32>
      %28 = arith.addf %arg9, %27 : f32
      %29 = arith.mulf %27, %27 : f32
      %30 = arith.addf %arg8, %29 : f32
      affine.yield %30, %28 : f32, f32
    }
    affine.store %20#1, %alloca[symbol(%8)] : memref<1xf32, 5>
    %21 = arith.addi %8, %7 : index
    affine.store %20#0, %alloca[symbol(%21)] : memref<1xf32, 5>
    nvvm.barrier0
    %22 = arith.index_cast %7 : index to i32
    %23 = arith.divui %22, %c2_i32 : i32
    %24 = math.ctlz %23 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.subi %c32, %25 : index
    affine.for %arg7 = 0 to %26 {
      %27 = arith.index_cast %arg7 : index to i32
      %28 = arith.shrui %23, %27 : i32
      %29 = arith.cmpi ult, %9, %28 : i32
      scf.if %29 {
        %30 = arith.addi %9, %28 : i32
        %31 = arith.index_cast %30 : i32 to index
        %32 = memref.load %alloca[%31] : memref<1xf32, 5>
        %33 = affine.load %alloca[symbol(%8)] : memref<1xf32, 5>
        %34 = arith.addf %33, %32 : f32
        affine.store %34, %alloca[symbol(%8)] : memref<1xf32, 5>
        %35 = arith.addi %31, %7 : index
        %36 = memref.load %alloca[%35] : memref<1xf32, 5>
        %37 = affine.load %alloca[symbol(%21)] : memref<1xf32, 5>
        %38 = arith.addf %37, %36 : f32
        affine.store %38, %alloca[symbol(%21)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %10 {
      %27 = affine.load %alloca[0] : memref<1xf32, 5>
      %28 = arith.sitofp %6 : i32 to f32
      %29 = arith.divf %27, %28 : f32
      %30 = affine.load %alloca[symbol(%7)] : memref<1xf32, 5>
      %31 = arith.divf %30, %28 : f32
      %32 = arith.mulf %29, %29 : f32
      %33 = arith.subf %31, %32 : f32
      affine.store %29, %arg1[symbol(%3) + symbol(%4)] : memref<?xf32>
      affine.store %33, %arg2[symbol(%3) + symbol(%4)] : memref<?xf32>
    }
    return
  }
  func.func private @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.index_cast %arg8 : i32 to index
    %1 = arith.muli %arg8, %arg9 : i32
    %2 = arith.muli %1, %arg10 : i32
    %3 = arith.muli %arg9, %arg10 : i32
    %4 = arith.index_cast %3 : i32 to index
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.addi %9, %11 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.subi %c-1, %13 : index
    %15 = arith.cmpi slt, %13, %c0 : index
    %16 = arith.select %15, %14, %13 : index
    %17 = arith.divsi %16, %4 : index
    %18 = arith.subi %c-1, %17 : index
    %19 = arith.select %15, %18, %17 : index
    %20 = arith.remsi %19, %0 : index
    %21 = arith.addi %20, %0 : index
    %22 = arith.cmpi slt, %20, %c0 : index
    %23 = arith.select %22, %21, %20 : index
    %24 = arith.divsi %12, %2 : i32
    %25 = arith.muli %24, %arg8 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.muli %arg7, %arg8 : i32
    %28 = arith.muli %27, %arg9 : i32
    %29 = arith.muli %28, %arg10 : i32
    %30 = arith.cmpi slt, %12, %29 : i32
    scf.if %30 {
      %31 = affine.load %arg1[symbol(%26) + symbol(%23)] : memref<?xf32>
      %32 = affine.load %arg2[symbol(%26) + symbol(%23)] : memref<?xf32>
      %33 = affine.load %arg3[symbol(%23)] : memref<?xf32>
      %34 = affine.load %arg4[symbol(%23)] : memref<?xf32>
      %35 = affine.load %arg0[symbol(%13)] : memref<?xf32>
      %36 = arith.subf %35, %31 : f32
      %37 = arith.mulf %33, %36 : f32
      %38 = arith.addf %32, %arg6 : f32
      %39 = math.sqrt %38 : f32
      %40 = arith.divf %37, %39 : f32
      %41 = arith.addf %40, %34 : f32
      affine.store %41, %arg5[symbol(%13)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg4 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.block_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %arg5, %arg6 : i32
    %7 = gpu.block_dim  x
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.cmpi eq, %9, %c0_i32 : i32
    %11 = arith.index_cast %6 : i32 to index
    %12 = arith.addi %2, %5 : i32
    %13 = arith.muli %12, %arg5 : i32
    %14 = arith.muli %13, %arg6 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.subi %11, %8 : index
    %17 = arith.subi %7, %c1 : index
    %18 = arith.addi %17, %16 : index
    %19 = arith.divui %18, %7 : index
    %20:2 = scf.for %arg7 = %c0 to %19 step %c1 iter_args(%arg8 = %cst, %arg9 = %cst) -> (f32, f32) {
      %27 = arith.muli %arg7, %7 : index
      %28 = arith.addi %27, %15 : index
      %29 = arith.addi %28, %8 : index
      %30 = memref.load %arg0[%29] : memref<?xf32>
      %31 = arith.addf %arg9, %30 : f32
      %32 = arith.mulf %30, %30 : f32
      %33 = arith.addf %arg8, %32 : f32
      scf.yield %33, %31 : f32, f32
    }
    memref.store %20#1, %alloca[%8] : memref<1xf32, 5>
    %21 = arith.addi %8, %7 : index
    memref.store %20#0, %alloca[%21] : memref<1xf32, 5>
    nvvm.barrier0
    %22 = arith.index_cast %7 : index to i32
    %23 = arith.divui %22, %c2_i32 : i32
    %24 = math.ctlz %23 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.subi %c32, %25 : index
    scf.for %arg7 = %c0 to %26 step %c1 {
      %27 = arith.index_cast %arg7 : index to i32
      %28 = arith.shrui %23, %27 : i32
      %29 = arith.cmpi ult, %9, %28 : i32
      scf.if %29 {
        %30 = arith.addi %9, %28 : i32
        %31 = arith.index_cast %30 : i32 to index
        %32 = memref.load %alloca[%31] : memref<1xf32, 5>
        %33 = memref.load %alloca[%8] : memref<1xf32, 5>
        %34 = arith.addf %33, %32 : f32
        memref.store %34, %alloca[%8] : memref<1xf32, 5>
        %35 = arith.addi %31, %7 : index
        %36 = memref.load %alloca[%35] : memref<1xf32, 5>
        %37 = memref.load %alloca[%21] : memref<1xf32, 5>
        %38 = arith.addf %37, %36 : f32
        memref.store %38, %alloca[%21] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %10 {
      %27 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %28 = arith.sitofp %6 : i32 to f32
      %29 = arith.divf %27, %28 : f32
      %30 = memref.load %alloca[%7] : memref<1xf32, 5>
      %31 = arith.divf %30, %28 : f32
      %32 = arith.mulf %29, %29 : f32
      %33 = arith.subf %31, %32 : f32
      %34 = arith.addi %3, %4 : index
      memref.store %29, %arg1[%34] : memref<?xf32>
      memref.store %33, %arg2[%34] : memref<?xf32>
    }
    return
  }
  func.func private @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %0 = arith.index_cast %arg8 : i32 to index
    %1 = arith.muli %arg8, %arg9 : i32
    %2 = arith.muli %1, %arg10 : i32
    %3 = arith.muli %arg9, %arg10 : i32
    %4 = arith.index_cast %3 : i32 to index
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.addi %9, %11 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.subi %c-1, %13 : index
    %15 = arith.cmpi slt, %13, %c0 : index
    %16 = arith.select %15, %14, %13 : index
    %17 = arith.divsi %16, %4 : index
    %18 = arith.subi %c-1, %17 : index
    %19 = arith.select %15, %18, %17 : index
    %20 = arith.remsi %19, %0 : index
    %21 = arith.addi %20, %0 : index
    %22 = arith.cmpi slt, %20, %c0 : index
    %23 = arith.select %22, %21, %20 : index
    %24 = arith.divsi %12, %2 : i32
    %25 = arith.muli %24, %arg8 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.muli %arg7, %arg8 : i32
    %28 = arith.muli %27, %arg9 : i32
    %29 = arith.muli %28, %arg10 : i32
    %30 = arith.cmpi slt, %12, %29 : i32
    scf.if %30 {
      %31 = arith.addi %26, %23 : index
      %32 = memref.load %arg1[%31] : memref<?xf32>
      %33 = memref.load %arg2[%31] : memref<?xf32>
      %34 = memref.load %arg3[%23] : memref<?xf32>
      %35 = memref.load %arg4[%23] : memref<?xf32>
      %36 = memref.load %arg0[%13] : memref<?xf32>
      %37 = arith.subf %36, %32 : f32
      %38 = arith.mulf %34, %37 : f32
      %39 = arith.addf %33, %arg6 : f32
      %40 = math.sqrt %39 : f32
      %41 = arith.divf %38, %40 : f32
      %42 = arith.addf %41, %35 : f32
      memref.store %42, %arg5[%13] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_id  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %arg5, %arg6 : i32
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %arg7 : index to i32
      %9 = arith.cmpi eq, %8, %c0_i32 : i32
      %10 = arith.index_cast %6 : i32 to index
      %11 = arith.addi %2, %5 : i32
      %12 = arith.muli %11, %arg5 : i32
      %13 = arith.muli %12, %arg6 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.subi %10, %arg7 : index
      %16 = arith.subi %7, %c1_1 : index
      %17 = arith.addi %16, %15 : index
      %18 = arith.divui %17, %7 : index
      %19:2 = scf.for %arg8 = %c0_0 to %18 step %c1_1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
        %26 = arith.muli %arg8, %7 : index
        %27 = arith.addi %26, %14 : index
        %28 = arith.addi %27, %arg7 : index
        %29 = memref.load %arg0[%28] : memref<?xf32>
        %30 = arith.addf %arg10, %29 : f32
        %31 = arith.mulf %29, %29 : f32
        %32 = arith.addf %arg9, %31 : f32
        scf.yield %32, %30 : f32, f32
      }
      memref.store %19#1, %alloca[%arg7] : memref<1xf32, 5>
      %20 = arith.addi %arg7, %7 : index
      memref.store %19#0, %alloca[%20] : memref<1xf32, 5>
      "polygeist.barrier"(%arg7) : (index) -> ()
      %21 = arith.index_cast %7 : index to i32
      %22 = arith.divui %21, %c2_i32 : i32
      %23 = math.ctlz %22 : i32
      %24 = arith.index_cast %23 : i32 to index
      %25 = arith.subi %c32_2, %24 : index
      scf.for %arg8 = %c0_0 to %25 step %c1_1 {
        %26 = arith.index_cast %arg8 : index to i32
        %27 = arith.shrui %22, %26 : i32
        %28 = arith.cmpi ult, %8, %27 : i32
        scf.if %28 {
          %29 = arith.addi %8, %27 : i32
          %30 = arith.index_cast %29 : i32 to index
          %31 = memref.load %alloca[%30] : memref<1xf32, 5>
          %32 = memref.load %alloca[%arg7] : memref<1xf32, 5>
          %33 = arith.addf %32, %31 : f32
          memref.store %33, %alloca[%arg7] : memref<1xf32, 5>
          %34 = arith.addi %30, %7 : index
          %35 = memref.load %alloca[%34] : memref<1xf32, 5>
          %36 = memref.load %alloca[%20] : memref<1xf32, 5>
          %37 = arith.addf %36, %35 : f32
          memref.store %37, %alloca[%20] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg7) : (index) -> ()
      }
      scf.if %9 {
        %26 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
        %27 = arith.sitofp %6 : i32 to f32
        %28 = arith.divf %26, %27 : f32
        %29 = memref.load %alloca[%7] : memref<1xf32, 5>
        %30 = arith.divf %29, %27 : f32
        %31 = arith.mulf %28, %28 : f32
        %32 = arith.subf %30, %31 : f32
        %33 = arith.addi %3, %4 : index
        memref.store %28, %arg1[%33] : memref<?xf32>
        memref.store %32, %arg2[%33] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c0_0 = arith.constant 0 : index
      %0 = arith.index_cast %arg8 : i32 to index
      %1 = arith.muli %arg8, %arg9 : i32
      %2 = arith.muli %1, %arg10 : i32
      %3 = arith.muli %arg9, %arg10 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_id  x
      %6 = arith.index_cast %5 : index to i32
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %6, %8 : i32
      %10 = arith.index_cast %arg11 : index to i32
      %11 = arith.addi %9, %10 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.subi %c-1, %12 : index
      %14 = arith.cmpi slt, %12, %c0_0 : index
      %15 = arith.select %14, %13, %12 : index
      %16 = arith.divsi %15, %4 : index
      %17 = arith.subi %c-1, %16 : index
      %18 = arith.select %14, %17, %16 : index
      %19 = arith.remsi %18, %0 : index
      %20 = arith.addi %19, %0 : index
      %21 = arith.cmpi slt, %19, %c0_0 : index
      %22 = arith.select %21, %20, %19 : index
      %23 = arith.divsi %11, %2 : i32
      %24 = arith.muli %23, %arg8 : i32
      %25 = arith.index_cast %24 : i32 to index
      %26 = arith.muli %arg7, %arg8 : i32
      %27 = arith.muli %26, %arg9 : i32
      %28 = arith.muli %27, %arg10 : i32
      %29 = arith.cmpi slt, %11, %28 : i32
      scf.if %29 {
        %30 = arith.addi %25, %22 : index
        %31 = memref.load %arg1[%30] : memref<?xf32>
        %32 = memref.load %arg2[%30] : memref<?xf32>
        %33 = memref.load %arg3[%22] : memref<?xf32>
        %34 = memref.load %arg4[%22] : memref<?xf32>
        %35 = memref.load %arg0[%12] : memref<?xf32>
        %36 = arith.subf %35, %31 : f32
        %37 = arith.mulf %33, %36 : f32
        %38 = arith.addf %32, %arg6 : f32
        %39 = math.sqrt %38 : f32
        %40 = arith.divf %37, %39 : f32
        %41 = arith.addf %40, %34 : f32
        memref.store %41, %arg5[%12] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_id  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %arg5, %arg6 : i32
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %arg7 : index to i32
      %9 = arith.cmpi eq, %8, %c0_i32 : i32
      %10 = arith.index_cast %6 : i32 to index
      %11 = arith.addi %2, %5 : i32
      %12 = arith.muli %11, %arg5 : i32
      %13 = arith.muli %12, %arg6 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.subi %10, %arg7 : index
      %16 = arith.subi %7, %c1_1 : index
      %17 = arith.addi %16, %15 : index
      %18 = arith.divui %17, %7 : index
      %19:2 = scf.for %arg8 = %c0_0 to %18 step %c1_1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
        %26 = arith.muli %arg8, %7 : index
        %27 = arith.addi %26, %14 : index
        %28 = arith.addi %27, %arg7 : index
        %29 = memref.load %arg0[%28] : memref<?xf32>
        %30 = arith.addf %arg10, %29 : f32
        %31 = arith.mulf %29, %29 : f32
        %32 = arith.addf %arg9, %31 : f32
        scf.yield %32, %30 : f32, f32
      }
      memref.store %19#1, %alloca[%arg7] : memref<1xf32, 5>
      %20 = arith.addi %arg7, %7 : index
      memref.store %19#0, %alloca[%20] : memref<1xf32, 5>
      "polygeist.barrier"(%arg7) : (index) -> ()
      %21 = arith.index_cast %7 : index to i32
      %22 = arith.divui %21, %c2_i32 : i32
      %23 = math.ctlz %22 : i32
      %24 = arith.index_cast %23 : i32 to index
      %25 = arith.subi %c32_2, %24 : index
      scf.for %arg8 = %c0_0 to %25 step %c1_1 {
        %26 = arith.index_cast %arg8 : index to i32
        %27 = arith.shrui %22, %26 : i32
        %28 = arith.cmpi ult, %8, %27 : i32
        scf.if %28 {
          %29 = arith.addi %8, %27 : i32
          %30 = arith.index_cast %29 : i32 to index
          %31 = memref.load %alloca[%30] : memref<1xf32, 5>
          %32 = memref.load %alloca[%arg7] : memref<1xf32, 5>
          %33 = arith.addf %32, %31 : f32
          memref.store %33, %alloca[%arg7] : memref<1xf32, 5>
          %34 = arith.addi %30, %7 : index
          %35 = memref.load %alloca[%34] : memref<1xf32, 5>
          %36 = memref.load %alloca[%20] : memref<1xf32, 5>
          %37 = arith.addf %36, %35 : f32
          memref.store %37, %alloca[%20] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg7) : (index) -> ()
      }
      scf.if %9 {
        %26 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
        %27 = arith.sitofp %6 : i32 to f32
        %28 = arith.divf %26, %27 : f32
        %29 = memref.load %alloca[%7] : memref<1xf32, 5>
        %30 = arith.divf %29, %27 : f32
        %31 = arith.mulf %28, %28 : f32
        %32 = arith.subf %30, %31 : f32
        %33 = arith.addi %3, %4 : index
        memref.store %28, %arg1[%33] : memref<?xf32>
        memref.store %32, %arg2[%33] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c0_0 = arith.constant 0 : index
      %0 = arith.index_cast %arg8 : i32 to index
      %1 = arith.muli %arg8, %arg9 : i32
      %2 = arith.muli %1, %arg10 : i32
      %3 = arith.muli %arg9, %arg10 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_id  x
      %6 = arith.index_cast %5 : index to i32
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %6, %8 : i32
      %10 = arith.index_cast %arg11 : index to i32
      %11 = arith.addi %9, %10 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.subi %c-1, %12 : index
      %14 = arith.cmpi slt, %12, %c0_0 : index
      %15 = arith.select %14, %13, %12 : index
      %16 = arith.divsi %15, %4 : index
      %17 = arith.subi %c-1, %16 : index
      %18 = arith.select %14, %17, %16 : index
      %19 = arith.remsi %18, %0 : index
      %20 = arith.addi %19, %0 : index
      %21 = arith.cmpi slt, %19, %c0_0 : index
      %22 = arith.select %21, %20, %19 : index
      %23 = arith.divsi %11, %2 : i32
      %24 = arith.muli %23, %arg8 : i32
      %25 = arith.index_cast %24 : i32 to index
      %26 = arith.muli %arg7, %arg8 : i32
      %27 = arith.muli %26, %arg9 : i32
      %28 = arith.muli %27, %arg10 : i32
      %29 = arith.cmpi slt, %11, %28 : i32
      scf.if %29 {
        %30 = arith.addi %25, %22 : index
        %31 = memref.load %arg1[%30] : memref<?xf32>
        %32 = memref.load %arg2[%30] : memref<?xf32>
        %33 = memref.load %arg3[%22] : memref<?xf32>
        %34 = memref.load %arg4[%22] : memref<?xf32>
        %35 = memref.load %arg0[%12] : memref<?xf32>
        %36 = arith.subf %35, %31 : f32
        %37 = arith.mulf %33, %36 : f32
        %38 = arith.addf %32, %arg6 : f32
        %39 = math.sqrt %38 : f32
        %40 = arith.divf %37, %39 : f32
        %41 = arith.addf %40, %34 : f32
        memref.store %41, %arg5[%12] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg4 : i32
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %arg5, %arg6 : i32
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %5 : i32 to index
    %8 = arith.addi %2, %4 : i32
    %9 = arith.muli %8, %arg5 : i32
    %10 = arith.muli %9, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.subi %6, %c1 : index
    scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
      %30 = arith.subi %7, %arg7 : index
      %31 = arith.addi %12, %30 : index
      %32 = arith.divui %31, %6 : index
      %33:2 = scf.for %arg8 = %c0 to %32 step %c1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
        %35 = arith.muli %arg8, %6 : index
        %36 = arith.addi %35, %11 : index
        %37 = arith.addi %36, %arg7 : index
        %38 = memref.load %arg0[%37] : memref<?xf32>
        %39 = arith.addf %arg10, %38 : f32
        %40 = arith.mulf %38, %38 : f32
        %41 = arith.addf %arg9, %40 : f32
        scf.yield %41, %39 : f32, f32
      }
      memref.store %33#1, %alloca[%arg7] : memref<1xf32, 5>
      %34 = arith.addi %arg7, %6 : index
      memref.store %33#0, %alloca[%34] : memref<1xf32, 5>
      scf.yield
    }
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.divui %14, %c2_i32 : i32
    %16 = math.ctlz %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.subi %c32, %17 : index
    scf.for %arg7 = %c0 to %18 step %c1 {
      %30 = arith.index_cast %arg7 : index to i32
      %31 = arith.shrui %15, %30 : i32
      scf.parallel (%arg8) = (%c0) to (%c32) step (%c1) {
        %32 = arith.addi %arg8, %13 : index
        %33 = arith.index_cast %arg8 : index to i32
        %34 = arith.cmpi ult, %33, %31 : i32
        scf.if %34 {
          %35 = arith.addi %33, %31 : i32
          %36 = arith.index_cast %35 : i32 to index
          %37 = memref.load %alloca[%36] : memref<1xf32, 5>
          %38 = memref.load %alloca[%arg8] : memref<1xf32, 5>
          %39 = arith.addf %38, %37 : f32
          memref.store %39, %alloca[%arg8] : memref<1xf32, 5>
          %40 = arith.addi %36, %13 : index
          %41 = memref.load %alloca[%40] : memref<1xf32, 5>
          %42 = memref.load %alloca[%32] : memref<1xf32, 5>
          %43 = arith.addf %42, %41 : f32
          memref.store %43, %alloca[%32] : memref<1xf32, 5>
        }
        scf.yield
      }
    }
    %19 = gpu.block_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.muli %20, %arg4 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = gpu.block_id  y
    %24 = arith.muli %arg5, %arg6 : i32
    %25 = memref.load %alloca[%c0] : memref<1xf32, 5>
    %26 = arith.sitofp %24 : i32 to f32
    %27 = arith.divf %25, %26 : f32
    %28 = arith.mulf %27, %27 : f32
    %29 = arith.addi %22, %23 : index
    scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
      %30 = arith.index_cast %arg7 : index to i32
      %31 = arith.cmpi eq, %30, %c0_i32 : i32
      scf.if %31 {
        %32 = memref.load %alloca[%13] : memref<1xf32, 5>
        %33 = arith.divf %32, %26 : f32
        %34 = arith.subf %33, %28 : f32
        memref.store %27, %arg1[%29] : memref<?xf32>
        memref.store %34, %arg2[%29] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg8 : i32 to index
    %1 = arith.muli %arg8, %arg9 : i32
    %2 = arith.muli %1, %arg10 : i32
    %3 = arith.muli %arg9, %arg10 : i32
    %4 = arith.index_cast %3 : i32 to index
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = arith.muli %arg7, %arg8 : i32
    %11 = arith.muli %10, %arg9 : i32
    %12 = arith.muli %11, %arg10 : i32
    scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
      %13 = arith.index_cast %arg11 : index to i32
      %14 = arith.addi %9, %13 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.subi %c-1, %15 : index
      %17 = arith.cmpi slt, %15, %c0 : index
      %18 = arith.select %17, %16, %15 : index
      %19 = arith.divsi %18, %4 : index
      %20 = arith.subi %c-1, %19 : index
      %21 = arith.select %17, %20, %19 : index
      %22 = arith.remsi %21, %0 : index
      %23 = arith.addi %22, %0 : index
      %24 = arith.cmpi slt, %22, %c0 : index
      %25 = arith.select %24, %23, %22 : index
      %26 = arith.divsi %14, %2 : i32
      %27 = arith.muli %26, %arg8 : i32
      %28 = arith.index_cast %27 : i32 to index
      %29 = arith.cmpi slt, %14, %12 : i32
      scf.if %29 {
        %30 = arith.addi %28, %25 : index
        %31 = memref.load %arg1[%30] : memref<?xf32>
        %32 = memref.load %arg2[%30] : memref<?xf32>
        %33 = memref.load %arg3[%25] : memref<?xf32>
        %34 = memref.load %arg4[%25] : memref<?xf32>
        %35 = memref.load %arg0[%15] : memref<?xf32>
        %36 = arith.subf %35, %31 : f32
        %37 = arith.mulf %33, %36 : f32
        %38 = arith.addf %32, %arg6 : f32
        %39 = math.sqrt %38 : f32
        %40 = arith.divf %37, %39 : f32
        %41 = arith.addf %40, %34 : f32
        memref.store %41, %arg5[%15] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23compute_mean_var_kernelPKfPfS1_iiii_0 {
    gpu.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = gpu.block_id  y
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %arg5, %arg6 : i32
      %6 = gpu.block_dim  x
      %7 = arith.index_cast %5 : i32 to index
      %8 = arith.addi %2, %4 : i32
      %9 = arith.muli %8, %arg5 : i32
      %10 = arith.muli %9, %arg6 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.subi %6, %c1 : index
      scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
        %24 = arith.subi %7, %arg7 : index
        %25 = arith.addi %12, %24 : index
        %26 = arith.divui %25, %6 : index
        %27:2 = scf.for %arg8 = %c0 to %26 step %c1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
          %29 = arith.muli %arg8, %6 : index
          %30 = arith.addi %29, %11 : index
          %31 = arith.addi %30, %arg7 : index
          %32 = memref.load %arg0[%31] : memref<?xf32>
          %33 = arith.addf %arg10, %32 : f32
          %34 = arith.mulf %32, %32 : f32
          %35 = arith.addf %arg9, %34 : f32
          scf.yield %35, %33 : f32, f32
        }
        memref.store %27#1, %alloca[%arg7] : memref<1xf32, 5>
        %28 = arith.addi %arg7, %6 : index
        memref.store %27#0, %alloca[%28] : memref<1xf32, 5>
        scf.yield
      }
      %13 = arith.index_cast %6 : index to i32
      %14 = arith.divui %13, %c2_i32 : i32
      %15 = math.ctlz %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.subi %c32, %16 : index
      scf.for %arg7 = %c0 to %17 step %c1 {
        %24 = arith.index_cast %arg7 : index to i32
        %25 = arith.shrui %14, %24 : i32
        scf.parallel (%arg8) = (%c0) to (%c32) step (%c1) {
          %26 = arith.addi %arg8, %6 : index
          %27 = arith.index_cast %arg8 : index to i32
          %28 = arith.cmpi ult, %27, %25 : i32
          scf.if %28 {
            %29 = arith.addi %27, %25 : i32
            %30 = arith.index_cast %29 : i32 to index
            %31 = memref.load %alloca[%30] : memref<1xf32, 5>
            %32 = memref.load %alloca[%arg8] : memref<1xf32, 5>
            %33 = arith.addf %32, %31 : f32
            memref.store %33, %alloca[%arg8] : memref<1xf32, 5>
            %34 = arith.addi %30, %6 : index
            %35 = memref.load %alloca[%34] : memref<1xf32, 5>
            %36 = memref.load %alloca[%26] : memref<1xf32, 5>
            %37 = arith.addf %36, %35 : f32
            memref.store %37, %alloca[%26] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %18 = arith.index_cast %2 : i32 to index
      %19 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %20 = arith.sitofp %5 : i32 to f32
      %21 = arith.divf %19, %20 : f32
      %22 = arith.mulf %21, %21 : f32
      %23 = arith.addi %18, %3 : index
      scf.parallel (%arg7) = (%c0) to (%c32) step (%c1) {
        %24 = arith.index_cast %arg7 : index to i32
        %25 = arith.cmpi eq, %24, %c0_i32 : i32
        scf.if %25 {
          %26 = memref.load %alloca[%6] : memref<1xf32, 5>
          %27 = arith.divf %26, %20 : f32
          %28 = arith.subf %27, %22 : f32
          memref.store %21, %arg1[%23] : memref<?xf32>
          memref.store %28, %arg2[%23] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
  gpu.module @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii_1 {
    gpu.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg8 : i32 to index
      %1 = arith.muli %arg8, %arg9 : i32
      %2 = arith.muli %1, %arg10 : i32
      %3 = arith.muli %arg9, %arg10 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_id  x
      %6 = arith.index_cast %5 : index to i32
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %6, %8 : i32
      %10 = arith.muli %arg7, %arg8 : i32
      %11 = arith.muli %10, %arg9 : i32
      %12 = arith.muli %11, %arg10 : i32
      scf.parallel (%arg11) = (%c0) to (%c32) step (%c1) {
        %13 = arith.index_cast %arg11 : index to i32
        %14 = arith.addi %9, %13 : i32
        %15 = arith.index_cast %14 : i32 to index
        %16 = arith.subi %c-1, %15 : index
        %17 = arith.cmpi slt, %15, %c0 : index
        %18 = arith.select %17, %16, %15 : index
        %19 = arith.divsi %18, %4 : index
        %20 = arith.subi %c-1, %19 : index
        %21 = arith.select %17, %20, %19 : index
        %22 = arith.remsi %21, %0 : index
        %23 = arith.addi %22, %0 : index
        %24 = arith.cmpi slt, %22, %c0 : index
        %25 = arith.select %24, %23, %22 : index
        %26 = arith.divsi %14, %2 : i32
        %27 = arith.muli %26, %arg8 : i32
        %28 = arith.index_cast %27 : i32 to index
        %29 = arith.cmpi slt, %14, %12 : i32
        scf.if %29 {
          %30 = arith.addi %28, %25 : index
          %31 = memref.load %arg1[%30] : memref<?xf32>
          %32 = memref.load %arg2[%30] : memref<?xf32>
          %33 = memref.load %arg3[%25] : memref<?xf32>
          %34 = memref.load %arg4[%25] : memref<?xf32>
          %35 = memref.load %arg0[%15] : memref<?xf32>
          %36 = arith.subf %35, %31 : f32
          %37 = arith.mulf %33, %36 : f32
          %38 = arith.addf %32, %arg6 : f32
          %39 = math.sqrt %38 : f32
          %40 = arith.divf %37, %39 : f32
          %41 = arith.addf %40, %34 : f32
          memref.store %41, %arg5[%15] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23compute_mean_var_kernelPKfPfS1_iiii_0 {
    gpu.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = gpu.block_id  y
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %arg5, %arg6 : i32
      %c32_0 = arith.constant 32 : index
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.addi %2, %4 : i32
      %8 = arith.muli %7, %arg5 : i32
      %9 = arith.muli %8, %arg6 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg7 = %c0 to %c32 step %c1_1 {
        %23 = arith.subi %6, %arg7 : index
        %24 = arith.addi %11, %23 : index
        %25 = arith.divui %24, %c32_0 : index
        %26:2 = scf.for %arg8 = %c0 to %25 step %c1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
          %28 = arith.muli %arg8, %c32_0 : index
          %29 = arith.addi %28, %10 : index
          %30 = arith.addi %29, %arg7 : index
          %31 = memref.load %arg0[%30] : memref<?xf32>
          %32 = arith.addf %arg10, %31 : f32
          %33 = arith.mulf %31, %31 : f32
          %34 = arith.addf %arg9, %33 : f32
          scf.yield %34, %32 : f32, f32
        }
        memref.store %26#1, %alloca[%arg7] : memref<1xf32, 5>
        %27 = arith.addi %arg7, %c32_0 : index
        memref.store %26#0, %alloca[%27] : memref<1xf32, 5>
      }
      %12 = arith.index_cast %c32_0 : index to i32
      %13 = arith.divui %12, %c2_i32 : i32
      %14 = math.ctlz %13 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.subi %c32, %15 : index
      scf.for %arg7 = %c0 to %16 step %c1 {
        %23 = arith.index_cast %arg7 : index to i32
        %24 = arith.shrui %13, %23 : i32
        %c1_3 = arith.constant 1 : index
        scf.for %arg8 = %c0 to %c32 step %c1_3 {
          %25 = arith.addi %arg8, %c32_0 : index
          %26 = arith.index_cast %arg8 : index to i32
          %27 = arith.cmpi ult, %26, %24 : i32
          scf.if %27 {
            %28 = arith.addi %26, %24 : i32
            %29 = arith.index_cast %28 : i32 to index
            %30 = memref.load %alloca[%29] : memref<1xf32, 5>
            %31 = memref.load %alloca[%arg8] : memref<1xf32, 5>
            %32 = arith.addf %31, %30 : f32
            memref.store %32, %alloca[%arg8] : memref<1xf32, 5>
            %33 = arith.addi %29, %c32_0 : index
            %34 = memref.load %alloca[%33] : memref<1xf32, 5>
            %35 = memref.load %alloca[%25] : memref<1xf32, 5>
            %36 = arith.addf %35, %34 : f32
            memref.store %36, %alloca[%25] : memref<1xf32, 5>
          }
        }
      }
      %17 = arith.index_cast %2 : i32 to index
      %18 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %19 = arith.sitofp %5 : i32 to f32
      %20 = arith.divf %18, %19 : f32
      %21 = arith.mulf %20, %20 : f32
      %22 = arith.addi %17, %3 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg7 = %c0 to %c32 step %c1_2 {
        %23 = arith.index_cast %arg7 : index to i32
        %24 = arith.cmpi eq, %23, %c0_i32 : i32
        scf.if %24 {
          %25 = memref.load %alloca[%c32_0] : memref<1xf32, 5>
          %26 = arith.divf %25, %19 : f32
          %27 = arith.subf %26, %21 : f32
          memref.store %20, %arg1[%22] : memref<?xf32>
          memref.store %27, %arg2[%22] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
  gpu.module @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii_1 {
    gpu.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg8 : i32 to index
      %1 = arith.muli %arg8, %arg9 : i32
      %2 = arith.muli %1, %arg10 : i32
      %3 = arith.muli %arg9, %arg10 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_id  x
      %6 = arith.index_cast %5 : index to i32
      %c32_0 = arith.constant 32 : index
      %7 = arith.index_cast %c32_0 : index to i32
      %8 = arith.muli %6, %7 : i32
      %9 = arith.muli %arg7, %arg8 : i32
      %10 = arith.muli %9, %arg9 : i32
      %11 = arith.muli %10, %arg10 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg11 = %c0 to %c32 step %c1_1 {
        %12 = arith.index_cast %arg11 : index to i32
        %13 = arith.addi %8, %12 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.subi %c-1, %14 : index
        %16 = arith.cmpi slt, %14, %c0 : index
        %17 = arith.select %16, %15, %14 : index
        %18 = arith.divsi %17, %4 : index
        %19 = arith.subi %c-1, %18 : index
        %20 = arith.select %16, %19, %18 : index
        %21 = arith.remsi %20, %0 : index
        %22 = arith.addi %21, %0 : index
        %23 = arith.cmpi slt, %21, %c0 : index
        %24 = arith.select %23, %22, %21 : index
        %25 = arith.divsi %13, %2 : i32
        %26 = arith.muli %25, %arg8 : i32
        %27 = arith.index_cast %26 : i32 to index
        %28 = arith.cmpi slt, %13, %11 : i32
        scf.if %28 {
          %29 = arith.addi %27, %24 : index
          %30 = memref.load %arg1[%29] : memref<?xf32>
          %31 = memref.load %arg2[%29] : memref<?xf32>
          %32 = memref.load %arg3[%24] : memref<?xf32>
          %33 = memref.load %arg4[%24] : memref<?xf32>
          %34 = memref.load %arg0[%14] : memref<?xf32>
          %35 = arith.subf %34, %30 : f32
          %36 = arith.mulf %32, %35 : f32
          %37 = arith.addf %31, %arg6 : f32
          %38 = math.sqrt %37 : f32
          %39 = arith.divf %36, %38 : f32
          %40 = arith.addf %39, %33 : f32
          memref.store %40, %arg5[%14] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<1xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<1xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23compute_mean_var_kernelPKfPfS1_iiii_0 {
    gpu.func @_Z23compute_mean_var_kernelPKfPfS1_iiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %arg4 : i32
      %4 = gpu.block_id  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %arg5, %arg6 : i32
      %c32_0 = arith.constant 32 : index
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.addi %3, %5 : i32
      %9 = arith.muli %8, %arg5 : i32
      %10 = arith.muli %9, %arg6 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg7 = %c0 to %c32 step %c1_1 {
        %24 = arith.subi %7, %arg7 : index
        %25 = arith.addi %12, %24 : index
        %26 = arith.divui %25, %c32_0 : index
        %27:2 = scf.for %arg8 = %c0 to %26 step %c1 iter_args(%arg9 = %cst, %arg10 = %cst) -> (f32, f32) {
          %29 = arith.muli %arg8, %c32_0 : index
          %30 = arith.addi %29, %11 : index
          %31 = arith.addi %30, %arg7 : index
          %32 = memref.load %arg0[%31] : memref<?xf32>
          %33 = arith.addf %arg10, %32 : f32
          %34 = arith.mulf %32, %32 : f32
          %35 = arith.addf %arg9, %34 : f32
          scf.yield %35, %33 : f32, f32
        }
        memref.store %27#1, %alloca[%arg7] : memref<1xf32, 5>
        %28 = arith.addi %arg7, %c32_0 : index
        memref.store %27#0, %alloca[%28] : memref<1xf32, 5>
      }
      %13 = arith.index_cast %c32_0 : index to i32
      %14 = arith.divui %13, %c2_i32 : i32
      %15 = math.ctlz %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.subi %c32, %16 : index
      scf.for %arg7 = %c0 to %17 step %c1 {
        %24 = arith.index_cast %arg7 : index to i32
        %25 = arith.shrui %14, %24 : i32
        %c1_3 = arith.constant 1 : index
        scf.for %arg8 = %c0 to %c32 step %c1_3 {
          %26 = arith.addi %arg8, %c32_0 : index
          %27 = arith.index_cast %arg8 : index to i32
          %28 = arith.cmpi ult, %27, %25 : i32
          scf.if %28 {
            %29 = arith.addi %27, %25 : i32
            %30 = arith.index_cast %29 : i32 to index
            %31 = memref.load %alloca[%30] : memref<1xf32, 5>
            %32 = memref.load %alloca[%arg8] : memref<1xf32, 5>
            %33 = arith.addf %32, %31 : f32
            memref.store %33, %alloca[%arg8] : memref<1xf32, 5>
            %34 = arith.addi %30, %c32_0 : index
            %35 = memref.load %alloca[%34] : memref<1xf32, 5>
            %36 = memref.load %alloca[%26] : memref<1xf32, 5>
            %37 = arith.addf %36, %35 : f32
            memref.store %37, %alloca[%26] : memref<1xf32, 5>
          }
        }
      }
      %18 = arith.index_cast %3 : i32 to index
      %19 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %20 = arith.sitofp %6 : i32 to f32
      %21 = arith.divf %19, %20 : f32
      %22 = arith.mulf %21, %21 : f32
      %23 = arith.addi %18, %4 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg7 = %c0 to %c32 step %c1_2 {
        %24 = arith.index_cast %arg7 : index to i32
        %25 = arith.cmpi eq, %24, %c0_i32 : i32
        scf.if %25 {
          %26 = memref.load %alloca[%c32_0] : memref<1xf32, 5>
          %27 = arith.divf %26, %20 : f32
          %28 = arith.subf %27, %22 : f32
          memref.store %21, %arg1[%23] : memref<?xf32>
          memref.store %28, %arg2[%23] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
  gpu.module @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii_1 {
    gpu.func @_Z20instance_norm_kernelPKfS0_S0_S0_S0_Pffiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: memref<?xf32>, %arg5: memref<?xf32>, %arg6: f32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32) {
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg8 : i32 to index
      %1 = arith.muli %arg8, %arg9 : i32
      %2 = arith.muli %1, %arg10 : i32
      %3 = arith.muli %arg9, %arg10 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_id  x
      %6 = arith.index_cast %5 : index to i32
      %c32_0 = arith.constant 32 : index
      %7 = arith.index_cast %c32_0 : index to i32
      %8 = arith.muli %6, %7 : i32
      %9 = arith.muli %arg7, %arg8 : i32
      %10 = arith.muli %9, %arg9 : i32
      %11 = arith.muli %10, %arg10 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg11 = %c0 to %c32 step %c1_1 {
        %12 = arith.index_cast %arg11 : index to i32
        %13 = arith.addi %8, %12 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.subi %c-1, %14 : index
        %16 = arith.cmpi slt, %14, %c0 : index
        %17 = arith.select %16, %15, %14 : index
        %18 = arith.divsi %17, %4 : index
        %19 = arith.subi %c-1, %18 : index
        %20 = arith.select %16, %19, %18 : index
        %21 = arith.remsi %20, %0 : index
        %22 = arith.addi %21, %0 : index
        %23 = arith.cmpi slt, %21, %c0 : index
        %24 = arith.select %23, %22, %21 : index
        %25 = arith.divsi %13, %2 : i32
        %26 = arith.muli %25, %arg8 : i32
        %27 = arith.index_cast %26 : i32 to index
        %28 = arith.cmpi slt, %13, %11 : i32
        scf.if %28 {
          %29 = arith.addi %27, %24 : index
          %30 = memref.load %arg1[%29] : memref<?xf32>
          %31 = memref.load %arg2[%29] : memref<?xf32>
          %32 = memref.load %arg3[%24] : memref<?xf32>
          %33 = memref.load %arg4[%24] : memref<?xf32>
          %34 = memref.load %arg0[%14] : memref<?xf32>
          %35 = arith.subf %34, %30 : f32
          %36 = arith.mulf %32, %35 : f32
          %37 = arith.addf %31, %arg6 : f32
          %38 = math.sqrt %37 : f32
          %39 = arith.divf %36, %38 : f32
          %40 = arith.addf %39, %33 : f32
          memref.store %40, %arg5[%14] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] GPUBlockIdToNPULowering: process op: 

%6 = gpu.block_id  y
[ict-error] GPUBlockIdToNPULowering: block id dimension is not x

