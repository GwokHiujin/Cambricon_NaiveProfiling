#include <bang.h>
__mlu_global__ void rms_norm_kernel(float* v1, float* v2, int32_t v3, int32_t v4, int32_t v5, int32_t v6, float v7) {
  int32_t c0_8 = 0;
  bool c1_9 = true;
  int32_t c2_10 = 2;
  size_t c0_11 = 0;
  size_t c1_12 = 1;
  size_t c32_13 = 32;
  __nram__ int8_t v14[32];
  float* v15 = (float*)v14;
  int64_t v16 = taskIdX;
  size_t v17 = (size_t) v16;
  int32_t v18 = (int32_t) v17;
  int32_t v19 = (v3) * (v5);
  int32_t v20 = (v19) * (v6);
  bool v21 = v18 >= v20;
  bool v22;
  if (v21) {
    v22 = c1_9;
  } else {
    bool v23 = v4 <= c0_8;
    v22 = v23;
  }
  if (v22) {
  } else {
    __nram__ int8_t v24[32];
    float* v25 = (float*)v24;
    size_t v26 = (size_t) v6;
    size_t v27 = (v17) % (v26);
    size_t v28 = (v27) + (v26);
    bool v29 = v27 < c0_11;
    size_t v30 = (v29) ? (v28) : (v27);
    int32_t v31 = (v18) / (v6);
    int32_t v32 = (v31) % (v5);
    int32_t v33 = (v31) / (v5);
    int32_t v34 = (v33) * (v4);
    for (size_t v35 = c0_11; v35 < c32_13; v35 += c1_12) {
      int32_t v36 = (int32_t) v35;
      int32_t v37 = (v34) + (v36);
      int32_t v38 = (v37) * (v5);
      int32_t v39 = (v38) + (v32);
      int32_t v40 = (v39) * (v6);
      size_t v41 = (size_t) v40;
      size_t v42 = (v41) + (v30);
      float v43 = v1[v42];
      float v44 = v43 * v43;
      v15[v35] = v44;
    };
    int32_t v45 = (v4) / (c2_10);
