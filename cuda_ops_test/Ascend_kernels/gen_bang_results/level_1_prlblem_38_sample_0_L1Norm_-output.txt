warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z29__device_stub__l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z14l1_norm_kernelPKfPfii(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<256xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %arg2 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %arg2 : i32 to index
    %8 = arith.subi %7, %2 : index
    %9 = arith.subi %6, %c1 : index
    %10 = arith.addi %9, %8 : index
    %11 = arith.divui %10, %6 : index
    %12 = affine.for %arg4 = 0 to %11 iter_args(%arg5 = %cst) -> (f32) {
      %27 = affine.load %arg0[%arg4 * symbol(%6) + symbol(%5) + symbol(%2)] : memref<?xf32>
      %28 = math.absf %27 : f32
      %29 = arith.addf %arg5, %28 : f32
      affine.yield %29 : f32
    }
    affine.store %12, %alloca[symbol(%2)] : memref<256xf32, 5>
    nvvm.barrier0
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.divui %14, %c2_i32 : i32
    %16 = scf.while (%arg4 = %15) : (i32) -> i32 {
      %27 = arith.cmpi sgt, %arg4, %c0_i32 : i32
      scf.condition(%27) %arg4 : i32
    } do {
    ^bb0(%arg4: i32):
      %27 = arith.cmpi slt, %3, %arg4 : i32
      scf.if %27 {
        %29 = arith.addi %3, %arg4 : i32
        %30 = arith.index_cast %29 : i32 to index
        %31 = memref.load %alloca[%30] : memref<256xf32, 5>
        %32 = affine.load %alloca[symbol(%2)] : memref<256xf32, 5>
        %33 = arith.addf %32, %31 : f32
        affine.store %33, %alloca[symbol(%2)] : memref<256xf32, 5>
      }
      nvvm.barrier0
      %28 = arith.divsi %arg4, %c2_i32 : i32
      scf.yield %28 : i32
    }
    %17 = affine.load %alloca[0] : memref<256xf32, 5>
    %18 = arith.muli %1, %arg2 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.index_cast %18 : i32 to index
    %21 = gpu.block_dim  x
    %22 = arith.index_cast %arg2 : i32 to index
    %23 = arith.subi %22, %2 : index
    %24 = arith.subi %21, %c1 : index
    %25 = arith.addi %24, %23 : index
    %26 = arith.divui %25, %21 : index
    affine.for %arg4 = 0 to %26 {
      %27 = affine.load %arg0[%arg4 * symbol(%21) + symbol(%19) + symbol(%2)] : memref<?xf32>
      %28 = arith.divf %27, %17 : f32
      affine.store %28, %arg1[%arg4 * symbol(%21) + symbol(%20) + symbol(%2)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<256xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %arg2 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %arg2 : i32 to index
    %8 = arith.subi %7, %2 : index
    %9 = arith.subi %6, %c1 : index
    %10 = arith.addi %9, %8 : index
    %11 = arith.divui %10, %6 : index
    %12 = affine.for %arg4 = 0 to %11 iter_args(%arg5 = %cst) -> (f32) {
      %17 = affine.load %arg0[%arg4 * symbol(%6) + symbol(%5) + symbol(%2)] : memref<?xf32>
      %18 = math.absf %17 : f32
      %19 = arith.addf %arg5, %18 : f32
      affine.yield %19 : f32
    }
    affine.store %12, %alloca[symbol(%2)] : memref<256xf32, 5>
    nvvm.barrier0
    %13 = arith.index_cast %6 : index to i32
    %14 = arith.divui %13, %c2_i32 : i32
    %15 = scf.while (%arg4 = %14) : (i32) -> i32 {
      %17 = arith.cmpi sgt, %arg4, %c0_i32 : i32
      scf.condition(%17) %arg4 : i32
    } do {
    ^bb0(%arg4: i32):
      %17 = arith.cmpi slt, %3, %arg4 : i32
      scf.if %17 {
        %19 = arith.addi %3, %arg4 : i32
        %20 = arith.index_cast %19 : i32 to index
        %21 = memref.load %alloca[%20] : memref<256xf32, 5>
        %22 = affine.load %alloca[symbol(%2)] : memref<256xf32, 5>
        %23 = arith.addf %22, %21 : f32
        affine.store %23, %alloca[symbol(%2)] : memref<256xf32, 5>
      }
      nvvm.barrier0
      %18 = arith.divsi %arg4, %c2_i32 : i32
      scf.yield %18 : i32
    }
    %16 = affine.load %alloca[0] : memref<256xf32, 5>
    affine.for %arg4 = 0 to %11 {
      %17 = affine.load %arg0[%arg4 * symbol(%6) + symbol(%5) + symbol(%2)] : memref<?xf32>
      %18 = arith.divf %17, %16 : f32
      affine.store %18, %arg1[%arg4 * symbol(%6) + symbol(%5) + symbol(%2)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<256xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %arg2 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %arg2 : i32 to index
    %8 = arith.subi %7, %2 : index
    %9 = arith.subi %6, %c1 : index
    %10 = arith.addi %9, %8 : index
    %11 = arith.divui %10, %6 : index
    %12 = scf.for %arg4 = %c0 to %11 step %c1 iter_args(%arg5 = %cst) -> (f32) {
      %17 = arith.muli %arg4, %6 : index
      %18 = arith.addi %17, %5 : index
      %19 = arith.addi %18, %2 : index
      %20 = memref.load %arg0[%19] : memref<?xf32>
      %21 = math.absf %20 : f32
      %22 = arith.addf %arg5, %21 : f32
      scf.yield %22 : f32
    }
    memref.store %12, %alloca[%2] : memref<256xf32, 5>
    nvvm.barrier0
    %13 = arith.index_cast %6 : index to i32
    %14 = arith.divui %13, %c2_i32 : i32
    %15 = scf.while (%arg4 = %14) : (i32) -> i32 {
      %17 = arith.cmpi sgt, %arg4, %c0_i32 : i32
      scf.condition(%17) %arg4 : i32
    } do {
    ^bb0(%arg4: i32):
      %17 = arith.cmpi slt, %3, %arg4 : i32
      scf.if %17 {
        %19 = arith.addi %3, %arg4 : i32
        %20 = arith.index_cast %19 : i32 to index
        %21 = memref.load %alloca[%20] : memref<256xf32, 5>
        %22 = memref.load %alloca[%2] : memref<256xf32, 5>
        %23 = arith.addf %22, %21 : f32
        memref.store %23, %alloca[%2] : memref<256xf32, 5>
      }
      nvvm.barrier0
      %18 = arith.divsi %arg4, %c2_i32 : i32
      scf.yield %18 : i32
    }
    %16 = memref.load %alloca[%c0] : memref<256xf32, 5>
    scf.for %arg4 = %c0 to %11 step %c1 {
      %17 = arith.muli %arg4, %6 : index
      %18 = arith.addi %17, %5 : index
      %19 = arith.addi %18, %2 : index
      %20 = memref.load %arg0[%19] : memref<?xf32>
      %21 = arith.divf %20, %16 : f32
      memref.store %21, %arg1[%19] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<256xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.index_cast %arg4 : index to i32
      %3 = arith.muli %1, %arg2 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %arg2 : i32 to index
      %7 = arith.subi %6, %arg4 : index
      %8 = arith.subi %5, %c1_1 : index
      %9 = arith.addi %8, %7 : index
      %10 = arith.divui %9, %5 : index
      %11 = scf.for %arg5 = %c0_0 to %10 step %c1_1 iter_args(%arg6 = %cst) -> (f32) {
        %16 = arith.muli %arg5, %5 : index
        %17 = arith.addi %16, %4 : index
        %18 = arith.addi %17, %arg4 : index
        %19 = memref.load %arg0[%18] : memref<?xf32>
        %20 = math.absf %19 : f32
        %21 = arith.addf %arg6, %20 : f32
        scf.yield %21 : f32
      }
      memref.store %11, %alloca[%arg4] : memref<256xf32, 5>
      "polygeist.barrier"(%arg4) : (index) -> ()
      %12 = arith.index_cast %5 : index to i32
      %13 = arith.divui %12, %c2_i32 : i32
      %14 = scf.while (%arg5 = %13) : (i32) -> i32 {
        %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32
        scf.condition(%16) %arg5 : i32
      } do {
      ^bb0(%arg5: i32):
        %16 = arith.cmpi slt, %2, %arg5 : i32
        scf.if %16 {
          %18 = arith.addi %2, %arg5 : i32
          %19 = arith.index_cast %18 : i32 to index
          %20 = memref.load %alloca[%19] : memref<256xf32, 5>
          %21 = memref.load %alloca[%arg4] : memref<256xf32, 5>
          %22 = arith.addf %21, %20 : f32
          memref.store %22, %alloca[%arg4] : memref<256xf32, 5>
        }
        "polygeist.barrier"(%arg4) : (index) -> ()
        %17 = arith.divsi %arg5, %c2_i32 : i32
        scf.yield %17 : i32
      }
      %15 = memref.load %alloca[%c0_0] : memref<256xf32, 5>
      scf.for %arg5 = %c0_0 to %10 step %c1_1 {
        %16 = arith.muli %arg5, %5 : index
        %17 = arith.addi %16, %4 : index
        %18 = arith.addi %17, %arg4 : index
        %19 = memref.load %arg0[%18] : memref<?xf32>
        %20 = arith.divf %19, %15 : f32
        memref.store %20, %arg1[%18] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<256xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.index_cast %arg4 : index to i32
      %3 = arith.muli %1, %arg2 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %arg2 : i32 to index
      %7 = arith.subi %6, %arg4 : index
      %8 = arith.subi %5, %c1_1 : index
      %9 = arith.addi %8, %7 : index
      %10 = arith.divui %9, %5 : index
      %11 = scf.for %arg5 = %c0_0 to %10 step %c1_1 iter_args(%arg6 = %cst) -> (f32) {
        %16 = arith.muli %arg5, %5 : index
        %17 = arith.addi %16, %4 : index
        %18 = arith.addi %17, %arg4 : index
        %19 = memref.load %arg0[%18] : memref<?xf32>
        %20 = math.absf %19 : f32
        %21 = arith.addf %arg6, %20 : f32
        scf.yield %21 : f32
      }
      memref.store %11, %alloca[%arg4] : memref<256xf32, 5>
      "polygeist.barrier"(%arg4) : (index) -> ()
      %12 = arith.index_cast %5 : index to i32
      %13 = arith.divui %12, %c2_i32 : i32
      %14 = scf.while (%arg5 = %13) : (i32) -> i32 {
        %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32
        scf.condition(%16) %arg5 : i32
      } do {
      ^bb0(%arg5: i32):
        %16 = arith.cmpi slt, %2, %arg5 : i32
        scf.if %16 {
          %18 = arith.addi %2, %arg5 : i32
          %19 = arith.index_cast %18 : i32 to index
          %20 = memref.load %alloca[%19] : memref<256xf32, 5>
          %21 = memref.load %alloca[%arg4] : memref<256xf32, 5>
          %22 = arith.addf %21, %20 : f32
          memref.store %22, %alloca[%arg4] : memref<256xf32, 5>
        }
        "polygeist.barrier"(%arg4) : (index) -> ()
        %17 = arith.divsi %arg5, %c2_i32 : i32
        scf.yield %17 : i32
      }
      %15 = memref.load %alloca[%c0_0] : memref<256xf32, 5>
      scf.for %arg5 = %c0_0 to %10 step %c1_1 {
        %16 = arith.muli %arg5, %5 : index
        %17 = arith.addi %16, %4 : index
        %18 = arith.addi %17, %arg4 : index
        %19 = memref.load %arg0[%18] : memref<?xf32>
        %20 = arith.divf %19, %15 : f32
        memref.store %20, %arg1[%18] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<256xf32, 5>
    %alloca_0 = memref.alloca() : memref<32xi32>
    %alloca_1 = memref.alloca() : memref<32xi32>
    %alloca_2 = memref.alloca() : memref<i1>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg2 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %arg2 : i32 to index
    %6 = arith.subi %4, %c1 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %18 = arith.subi %5, %arg4 : index
      %19 = arith.addi %6, %18 : index
      %20 = arith.divui %19, %4 : index
      %21 = scf.for %arg5 = %c0 to %20 step %c1 iter_args(%arg6 = %cst) -> (f32) {
        %22 = arith.muli %arg5, %4 : index
        %23 = arith.addi %22, %3 : index
        %24 = arith.addi %23, %arg4 : index
        %25 = memref.load %arg0[%24] : memref<?xf32>
        %26 = math.absf %25 : f32
        %27 = arith.addf %arg6, %26 : f32
        scf.yield %27 : f32
      }
      memref.store %21, %alloca[%arg4] : memref<256xf32, 5>
      scf.yield
    }
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.divui %8, %c2_i32 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      memref.store %9, %alloca_0[%arg4] : memref<32xi32>
      scf.yield
    }
    scf.while : () -> () {
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %19 = memref.load %alloca_0[%arg4] : memref<32xi32>
        %20 = arith.cmpi sgt, %19, %c0_i32 : i32
        %21 = arith.cmpi eq, %arg4, %c0 : index
        scf.if %21 {
          memref.store %20, %alloca_2[] : memref<i1>
        }
        memref.store %19, %alloca_1[%arg4] : memref<32xi32>
        scf.yield
      }
      %18 = memref.load %alloca_2[] : memref<i1>
      scf.condition(%18)
    } do {
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %18 = arith.index_cast %arg4 : index to i32
        %19 = memref.load %alloca_1[%arg4] : memref<32xi32>
        %20 = arith.cmpi slt, %18, %19 : i32
        scf.if %20 {
          %21 = arith.addi %18, %19 : i32
          %22 = arith.index_cast %21 : i32 to index
          %23 = memref.load %alloca[%22] : memref<256xf32, 5>
          %24 = memref.load %alloca[%arg4] : memref<256xf32, 5>
          %25 = arith.addf %24, %23 : f32
          memref.store %25, %alloca[%arg4] : memref<256xf32, 5>
        }
        scf.yield
      }
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %18 = memref.load %alloca_1[%arg4] : memref<32xi32>
        %19 = arith.divsi %18, %c2_i32 : i32
        memref.store %19, %alloca_0[%arg4] : memref<32xi32>
        scf.yield
      }
      scf.yield
    }
    %10 = gpu.block_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.muli %11, %arg2 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_dim  x
    %15 = arith.subi %14, %c1 : index
    %16 = arith.index_cast %arg2 : i32 to index
    %17 = memref.load %alloca[%c0] : memref<256xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %18 = arith.subi %16, %arg4 : index
      %19 = arith.addi %15, %18 : index
      %20 = arith.divui %19, %14 : index
      scf.for %arg5 = %c0 to %20 step %c1 {
        %21 = arith.muli %arg5, %14 : index
        %22 = arith.addi %21, %13 : index
        %23 = arith.addi %22, %arg4 : index
        %24 = memref.load %arg0[%23] : memref<?xf32>
        %25 = arith.divf %24, %17 : f32
        memref.store %25, %arg1[%23] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<256xf32, 5>
      %alloca_0 = memref.alloca() : memref<32xi32>
      %alloca_1 = memref.alloca() : memref<32xi32>
      %alloca_2 = memref.alloca() : memref<i1>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg2 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %arg2 : i32 to index
      %6 = arith.subi %4, %c1 : index
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %10 = arith.subi %5, %arg4 : index
        %11 = arith.addi %6, %10 : index
        %12 = arith.divui %11, %4 : index
        %13 = scf.for %arg5 = %c0 to %12 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %14 = arith.muli %arg5, %4 : index
          %15 = arith.addi %14, %3 : index
          %16 = arith.addi %15, %arg4 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = math.absf %17 : f32
          %19 = arith.addf %arg6, %18 : f32
          scf.yield %19 : f32
        }
        memref.store %13, %alloca[%arg4] : memref<256xf32, 5>
        scf.yield
      }
      %7 = arith.index_cast %4 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        memref.store %8, %alloca_0[%arg4] : memref<32xi32>
        scf.yield
      }
      scf.while : () -> () {
        scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
          %11 = memref.load %alloca_0[%arg4] : memref<32xi32>
          %12 = arith.cmpi sgt, %11, %c0_i32 : i32
          %13 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %13 {
            memref.store %12, %alloca_2[] : memref<i1>
          }
          memref.store %11, %alloca_1[%arg4] : memref<32xi32>
          scf.yield
        }
        %10 = memref.load %alloca_2[] : memref<i1>
        scf.condition(%10)
      } do {
        scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
          %10 = arith.index_cast %arg4 : index to i32
          %11 = memref.load %alloca_1[%arg4] : memref<32xi32>
          %12 = arith.cmpi slt, %10, %11 : i32
          scf.if %12 {
            %13 = arith.addi %10, %11 : i32
            %14 = arith.index_cast %13 : i32 to index
            %15 = memref.load %alloca[%14] : memref<256xf32, 5>
            %16 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %17 = arith.addf %16, %15 : f32
            memref.store %17, %alloca[%arg4] : memref<256xf32, 5>
          }
          scf.yield
        }
        scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
          %10 = memref.load %alloca_1[%arg4] : memref<32xi32>
          %11 = arith.divsi %10, %c2_i32 : i32
          memref.store %11, %alloca_0[%arg4] : memref<32xi32>
          scf.yield
        }
        scf.yield
      }
      %9 = memref.load %alloca[%c0] : memref<256xf32, 5>
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %10 = arith.subi %5, %arg4 : index
        %11 = arith.addi %6, %10 : index
        %12 = arith.divui %11, %4 : index
        scf.for %arg5 = %c0 to %12 step %c1 {
          %13 = arith.muli %arg5, %4 : index
          %14 = arith.addi %13, %3 : index
          %15 = arith.addi %14, %arg4 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = arith.divf %16, %9 : f32
          memref.store %17, %arg1[%15] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<256xf32, 5>
      %alloca_0 = memref.alloca() : memref<32xi32>
      %alloca_1 = memref.alloca() : memref<32xi32>
      %alloca_2 = memref.alloca() : memref<i1>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg2 : i32
      %3 = arith.index_cast %2 : i32 to index
      %c32_3 = arith.constant 32 : index
      %4 = arith.index_cast %arg2 : i32 to index
      %5 = arith.subi %c32_3, %c1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_4 {
        %9 = arith.subi %4, %arg4 : index
        %10 = arith.addi %5, %9 : index
        %11 = arith.divui %10, %c32_3 : index
        %12 = scf.for %arg5 = %c0 to %11 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %13 = arith.muli %arg5, %c32_3 : index
          %14 = arith.addi %13, %3 : index
          %15 = arith.addi %14, %arg4 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = math.absf %16 : f32
          %18 = arith.addf %arg6, %17 : f32
          scf.yield %18 : f32
        }
        memref.store %12, %alloca[%arg4] : memref<256xf32, 5>
      }
      %6 = arith.index_cast %c32_3 : index to i32
      %7 = arith.divui %6, %c2_i32 : i32
      %c1_5 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_5 {
        memref.store %7, %alloca_0[%arg4] : memref<32xi32>
      }
      scf.while : () -> () {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %10 = memref.load %alloca_0[%arg4] : memref<32xi32>
          %11 = arith.cmpi sgt, %10, %c0_i32 : i32
          %12 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %12 {
            memref.store %11, %alloca_2[] : memref<i1>
          }
          memref.store %10, %alloca_1[%arg4] : memref<32xi32>
        }
        %9 = memref.load %alloca_2[] : memref<i1>
        scf.condition(%9)
      } do {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %9 = arith.index_cast %arg4 : index to i32
          %10 = memref.load %alloca_1[%arg4] : memref<32xi32>
          %11 = arith.cmpi slt, %9, %10 : i32
          scf.if %11 {
            %12 = arith.addi %9, %10 : i32
            %13 = arith.index_cast %12 : i32 to index
            %14 = memref.load %alloca[%13] : memref<256xf32, 5>
            %15 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %16 = arith.addf %15, %14 : f32
            memref.store %16, %alloca[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_8 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_8 {
          %9 = memref.load %alloca_1[%arg4] : memref<32xi32>
          %10 = arith.divsi %9, %c2_i32 : i32
          memref.store %10, %alloca_0[%arg4] : memref<32xi32>
        }
        scf.yield
      }
      %8 = memref.load %alloca[%c0] : memref<256xf32, 5>
      %c1_6 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_6 {
        %9 = arith.subi %4, %arg4 : index
        %10 = arith.addi %5, %9 : index
        %11 = arith.divui %10, %c32_3 : index
        scf.for %arg5 = %c0 to %11 step %c1 {
          %12 = arith.muli %arg5, %c32_3 : index
          %13 = arith.addi %12, %3 : index
          %14 = arith.addi %13, %arg4 : index
          %15 = memref.load %arg0[%14] : memref<?xf32>
          %16 = arith.divf %15, %8 : f32
          memref.store %16, %arg1[%14] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<256xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<256xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<256xf32, 5>
      %alloca_0 = memref.alloca() : memref<32xi32, 5>
      %alloca_1 = memref.alloca() : memref<32xi32, 5>
      %alloca_2 = memref.alloca() : memref<i1, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %arg2 : i32
      %4 = arith.index_cast %3 : i32 to index
      %c32_3 = arith.constant 32 : index
      %5 = arith.index_cast %arg2 : i32 to index
      %6 = arith.subi %c32_3, %c1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_4 {
        %10 = arith.subi %5, %arg4 : index
        %11 = arith.addi %6, %10 : index
        %12 = arith.divui %11, %c32_3 : index
        %13 = scf.for %arg5 = %c0 to %12 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %14 = arith.muli %arg5, %c32_3 : index
          %15 = arith.addi %14, %4 : index
          %16 = arith.addi %15, %arg4 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = math.absf %17 : f32
          %19 = arith.addf %arg6, %18 : f32
          scf.yield %19 : f32
        }
        memref.store %13, %alloca[%arg4] : memref<256xf32, 5>
      }
      %7 = arith.index_cast %c32_3 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      %c1_5 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_5 {
        memref.store %8, %alloca_0[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %11 = memref.load %alloca_0[%arg4] : memref<32xi32, 5>
          %12 = arith.cmpi sgt, %11, %c0_i32 : i32
          %13 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %13 {
            memref.store %12, %alloca_2[] : memref<i1, 5>
          }
          memref.store %11, %alloca_1[%arg4] : memref<32xi32, 5>
        }
        %10 = memref.load %alloca_2[] : memref<i1, 5>
        scf.condition(%10)
      } do {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %10 = arith.index_cast %arg4 : index to i32
          %11 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %12 = arith.cmpi slt, %10, %11 : i32
          scf.if %12 {
            %13 = arith.addi %10, %11 : i32
            %14 = arith.index_cast %13 : i32 to index
            %15 = memref.load %alloca[%14] : memref<256xf32, 5>
            %16 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %17 = arith.addf %16, %15 : f32
            memref.store %17, %alloca[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_8 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_8 {
          %10 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %11 = arith.divsi %10, %c2_i32 : i32
          memref.store %11, %alloca_0[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %9 = memref.load %alloca[%c0] : memref<256xf32, 5>
      %c1_6 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_6 {
        %10 = arith.subi %5, %arg4 : index
        %11 = arith.addi %6, %10 : index
        %12 = arith.divui %11, %c32_3 : index
        scf.for %arg5 = %c0 to %12 step %c1 {
          %13 = arith.muli %arg5, %c32_3 : index
          %14 = arith.addi %13, %4 : index
          %15 = arith.addi %14, %arg4 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = arith.divf %16, %9 : f32
          memref.store %17, %arg1[%15] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca_0 = memref.alloca() : memref<32xi32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%1 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca_0 = memref.alloca() : memref<32xi32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<256xf32, 5>
      %1 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_0 = memref.alloca() : memref<32xi32, 5>
      %alloca_1 = memref.alloca() : memref<32xi32, 5>
      %alloca_2 = memref.alloca() : memref<i1, 5>
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %3, %arg2 : i32
      %5 = arith.index_cast %4 : i32 to index
      %c32_3 = arith.constant 32 : index
      %6 = arith.index_cast %arg2 : i32 to index
      %7 = arith.subi %c32_3, %c1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_4 {
        %11 = arith.subi %6, %arg4 : index
        %12 = arith.addi %7, %11 : index
        %13 = arith.divui %12, %c32_3 : index
        %14 = scf.for %arg5 = %c0 to %13 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %15 = arith.muli %arg5, %c32_3 : index
          %16 = arith.addi %15, %5 : index
          %17 = arith.addi %16, %arg4 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = math.absf %18 : f32
          %20 = arith.addf %arg6, %19 : f32
          scf.yield %20 : f32
        }
        memref.store %14, %alloca[%arg4] : memref<256xf32, 5>
      }
      %8 = arith.index_cast %c32_3 : index to i32
      %9 = arith.divui %8, %c2_i32 : i32
      %c1_5 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_5 {
        memref.store %9, %alloca_0[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %12 = memref.load %alloca_0[%arg4] : memref<32xi32, 5>
          %13 = arith.cmpi sgt, %12, %c0_i32 : i32
          %14 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %14 {
            memref.store %13, %alloca_2[] : memref<i1, 5>
          }
          memref.store %12, %alloca_1[%arg4] : memref<32xi32, 5>
        }
        %11 = memref.load %alloca_2[] : memref<i1, 5>
        scf.condition(%11)
      } do {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %11 = arith.index_cast %arg4 : index to i32
          %12 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %13 = arith.cmpi slt, %11, %12 : i32
          scf.if %13 {
            %14 = arith.addi %11, %12 : i32
            %15 = arith.index_cast %14 : i32 to index
            %16 = memref.load %alloca[%15] : memref<256xf32, 5>
            %17 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %18 = arith.addf %17, %16 : f32
            memref.store %18, %alloca[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_8 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_8 {
          %11 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %12 = arith.divsi %11, %c2_i32 : i32
          memref.store %12, %alloca_0[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %10 = memref.load %alloca[%c0] : memref<256xf32, 5>
      %c1_6 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_6 {
        %11 = arith.subi %6, %arg4 : index
        %12 = arith.addi %7, %11 : index
        %13 = arith.divui %12, %c32_3 : index
        scf.for %arg5 = %c0 to %13 step %c1 {
          %14 = arith.muli %arg5, %c32_3 : index
          %15 = arith.addi %14, %5 : index
          %16 = arith.addi %15, %arg4 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = arith.divf %17, %10 : f32
          memref.store %18, %arg1[%16] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca_1 = memref.alloca() : memref<32xi32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca_1 = memref.alloca() : memref<32xi32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<256xf32, 5>
      %1 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_0 = memref.alloca() : memref<32xi32, 5>
      %2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_1 = memref.alloca() : memref<32xi32, 5>
      %alloca_2 = memref.alloca() : memref<i1, 5>
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %4, %arg2 : i32
      %6 = arith.index_cast %5 : i32 to index
      %c32_3 = arith.constant 32 : index
      %7 = arith.index_cast %arg2 : i32 to index
      %8 = arith.subi %c32_3, %c1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_4 {
        %12 = arith.subi %7, %arg4 : index
        %13 = arith.addi %8, %12 : index
        %14 = arith.divui %13, %c32_3 : index
        %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.muli %arg5, %c32_3 : index
          %17 = arith.addi %16, %6 : index
          %18 = arith.addi %17, %arg4 : index
          %19 = memref.load %arg0[%18] : memref<?xf32>
          %20 = math.absf %19 : f32
          %21 = arith.addf %arg6, %20 : f32
          scf.yield %21 : f32
        }
        memref.store %15, %alloca[%arg4] : memref<256xf32, 5>
      }
      %9 = arith.index_cast %c32_3 : index to i32
      %10 = arith.divui %9, %c2_i32 : i32
      %c1_5 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_5 {
        memref.store %10, %alloca_0[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %13 = memref.load %alloca_0[%arg4] : memref<32xi32, 5>
          %14 = arith.cmpi sgt, %13, %c0_i32 : i32
          %15 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %15 {
            memref.store %14, %alloca_2[] : memref<i1, 5>
          }
          memref.store %13, %alloca_1[%arg4] : memref<32xi32, 5>
        }
        %12 = memref.load %alloca_2[] : memref<i1, 5>
        scf.condition(%12)
      } do {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %12 = arith.index_cast %arg4 : index to i32
          %13 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %14 = arith.cmpi slt, %12, %13 : i32
          scf.if %14 {
            %15 = arith.addi %12, %13 : i32
            %16 = arith.index_cast %15 : i32 to index
            %17 = memref.load %alloca[%16] : memref<256xf32, 5>
            %18 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %19 = arith.addf %18, %17 : f32
            memref.store %19, %alloca[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_8 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_8 {
          %12 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %13 = arith.divsi %12, %c2_i32 : i32
          memref.store %13, %alloca_0[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %11 = memref.load %alloca[%c0] : memref<256xf32, 5>
      %c1_6 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_6 {
        %12 = arith.subi %7, %arg4 : index
        %13 = arith.addi %8, %12 : index
        %14 = arith.divui %13, %c32_3 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %15 = arith.muli %arg5, %c32_3 : index
          %16 = arith.addi %15, %6 : index
          %17 = arith.addi %16, %arg4 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = arith.divf %18, %11 : f32
          memref.store %19, %arg1[%17] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca_2 = memref.alloca() : memref<i1, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%3 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca_2 = memref.alloca() : memref<i1, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<256xf32, 5>
      %1 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_0 = memref.alloca() : memref<32xi32, 5>
      %2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_1 = memref.alloca() : memref<32xi32, 5>
      %3 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca_2 = memref.alloca() : memref<i1, 5>
      %4 = gpu.block_id  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %5, %arg2 : i32
      %7 = arith.index_cast %6 : i32 to index
      %c32_3 = arith.constant 32 : index
      %8 = arith.index_cast %arg2 : i32 to index
      %9 = arith.subi %c32_3, %c1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_4 {
        %13 = arith.subi %8, %arg4 : index
        %14 = arith.addi %9, %13 : index
        %15 = arith.divui %14, %c32_3 : index
        %16 = scf.for %arg5 = %c0 to %15 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %17 = arith.muli %arg5, %c32_3 : index
          %18 = arith.addi %17, %7 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = math.absf %20 : f32
          %22 = arith.addf %arg6, %21 : f32
          scf.yield %22 : f32
        }
        memref.store %16, %alloca[%arg4] : memref<256xf32, 5>
      }
      %10 = arith.index_cast %c32_3 : index to i32
      %11 = arith.divui %10, %c2_i32 : i32
      %c1_5 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_5 {
        memref.store %11, %alloca_0[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %14 = memref.load %alloca_0[%arg4] : memref<32xi32, 5>
          %15 = arith.cmpi sgt, %14, %c0_i32 : i32
          %16 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %16 {
            memref.store %15, %alloca_2[] : memref<i1, 5>
          }
          memref.store %14, %alloca_1[%arg4] : memref<32xi32, 5>
        }
        %13 = memref.load %alloca_2[] : memref<i1, 5>
        scf.condition(%13)
      } do {
        %c1_7 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_7 {
          %13 = arith.index_cast %arg4 : index to i32
          %14 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %15 = arith.cmpi slt, %13, %14 : i32
          scf.if %15 {
            %16 = arith.addi %13, %14 : i32
            %17 = arith.index_cast %16 : i32 to index
            %18 = memref.load %alloca[%17] : memref<256xf32, 5>
            %19 = memref.load %alloca[%arg4] : memref<256xf32, 5>
            %20 = arith.addf %19, %18 : f32
            memref.store %20, %alloca[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_8 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_8 {
          %13 = memref.load %alloca_1[%arg4] : memref<32xi32, 5>
          %14 = arith.divsi %13, %c2_i32 : i32
          memref.store %14, %alloca_0[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %12 = memref.load %alloca[%c0] : memref<256xf32, 5>
      %c1_6 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_6 {
        %13 = arith.subi %8, %arg4 : index
        %14 = arith.addi %9, %13 : index
        %15 = arith.divui %14, %c32_3 : index
        scf.for %arg5 = %c0 to %15 step %c1 {
          %16 = arith.muli %arg5, %c32_3 : index
          %17 = arith.addi %16, %7 : index
          %18 = arith.addi %17, %arg4 : index
          %19 = memref.load %arg0[%18] : memref<?xf32>
          %20 = arith.divf %19, %12 : f32
          memref.store %20, %arg1[%18] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%4 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%9 = arith.index_cast %8 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%11 = arith.index_cast %arg2 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%18 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%23 = arith.index_cast %22 : i32 to index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<256xf32, 5>
      %2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %3 = builtin.unrealized_conversion_cast %2 : !llvm.ptr<6> to memref<32xi32, 5>
      %4 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %5 = builtin.unrealized_conversion_cast %4 : !llvm.ptr<6> to memref<32xi32, 5>
      %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<i1, 5>
      %8 = "npu.block_id"() : () -> i64
      %9 = emitc.cast %8 : i64 to i32
      %10 = arith.muli %9, %arg2 : i32
      %11 = emitc.cast %10 : i32 to index
      %c32_0 = arith.constant 32 : index
      %12 = emitc.cast %arg2 : i32 to index
      %13 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %16 = arith.subi %12, %arg4 : index
        %17 = arith.addi %13, %16 : index
        %18 = arith.divui %17, %c32_0 : index
        %19 = scf.for %arg5 = %c0 to %18 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %20 = arith.muli %arg5, %c32_0 : index
          %21 = arith.addi %20, %11 : index
          %22 = arith.addi %21, %arg4 : index
          %23 = memref.load %arg0[%22] : memref<?xf32>
          %24 = math.absf %23 : f32
          %25 = emitc.add %arg6, %24 : (f32, f32) -> f32
          scf.yield %25 : f32
        }
        memref.store %19, %1[%arg4] : memref<256xf32, 5>
      }
      %c32_i32 = arith.constant 32 : i32
      %14 = arith.divui %c32_i32, %c2_i32 : i32
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        memref.store %14, %3[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        %c1_4 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_4 {
          %17 = memref.load %3[%arg4] : memref<32xi32, 5>
          %18 = arith.cmpi sgt, %17, %c0_i32 : i32
          %19 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %19 {
            memref.store %18, %7[] : memref<i1, 5>
          }
          memref.store %17, %5[%arg4] : memref<32xi32, 5>
        }
        %16 = memref.load %7[] : memref<i1, 5>
        scf.condition(%16)
      } do {
        %c1_4 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_4 {
          %16 = builtin.unrealized_conversion_cast %arg4 : index to i64
          %17 = emitc.cast %16 : i64 to i32
          %18 = memref.load %5[%arg4] : memref<32xi32, 5>
          %19 = arith.cmpi slt, %17, %18 : i32
          scf.if %19 {
            %20 = arith.addi %17, %18 : i32
            %21 = emitc.cast %20 : i32 to index
            %22 = memref.load %1[%21] : memref<256xf32, 5>
            %23 = memref.load %1[%arg4] : memref<256xf32, 5>
            %24 = emitc.add %23, %22 : (f32, f32) -> f32
            memref.store %24, %1[%arg4] : memref<256xf32, 5>
          }
        }
        %c1_5 = arith.constant 1 : index
        scf.for %arg4 = %c0 to %c32 step %c1_5 {
          %16 = memref.load %5[%arg4] : memref<32xi32, 5>
          %17 = arith.divsi %16, %c2_i32 : i32
          memref.store %17, %3[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %15 = memref.load %1[%c0] : memref<256xf32, 5>
      %c1_3 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_3 {
        %16 = arith.subi %12, %arg4 : index
        %17 = arith.addi %13, %16 : index
        %18 = arith.divui %17, %c32_0 : index
        scf.for %arg5 = %c0 to %18 step %c1 {
          %19 = arith.muli %arg5, %c32_0 : index
          %20 = arith.addi %19, %11 : index
          %21 = arith.addi %20, %arg4 : index
          %22 = memref.load %arg0[%21] : memref<?xf32>
          %23 = emitc.div %22, %15 : (f32, f32) -> f32
          memref.store %23, %arg1[%21] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c31 = arith.constant 31 : index
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<256xf32, 5>
      %2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %3 = builtin.unrealized_conversion_cast %2 : !llvm.ptr<6> to memref<32xi32, 5>
      %4 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %5 = builtin.unrealized_conversion_cast %4 : !llvm.ptr<6> to memref<32xi32, 5>
      %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<i1, 5>
      %8 = "npu.block_id"() : () -> i64
      %9 = emitc.cast %8 : i64 to i32
      %10 = arith.muli %9, %arg2 : i32
      %11 = emitc.cast %10 : i32 to index
      %12 = emitc.cast %arg2 : i32 to index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %14 = arith.subi %12, %arg4 : index
        %15 = arith.addi %14, %c31 : index
        %16 = arith.divui %15, %c32 : index
        %17 = scf.for %arg5 = %c0 to %16 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %18 = arith.muli %arg5, %c32 : index
          %19 = arith.addi %18, %11 : index
          %20 = arith.addi %19, %arg4 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = math.absf %21 : f32
          %23 = emitc.add %arg6, %22 : (f32, f32) -> f32
          scf.yield %23 : f32
        }
        memref.store %17, %1[%arg4] : memref<256xf32, 5>
      }
      scf.for %arg4 = %c0 to %c32 step %c1 {
        memref.store %c16_i32, %3[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %15 = memref.load %3[%arg4] : memref<32xi32, 5>
          %16 = arith.cmpi sgt, %15, %c0_i32 : i32
          %17 = arith.cmpi eq, %arg4, %c0 : index
          scf.if %17 {
            memref.store %16, %7[] : memref<i1, 5>
          }
          memref.store %15, %5[%arg4] : memref<32xi32, 5>
        }
        %14 = memref.load %7[] : memref<i1, 5>
        scf.condition(%14)
      } do {
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %14 = builtin.unrealized_conversion_cast %arg4 : index to i64
          %15 = emitc.cast %14 : i64 to i32
          %16 = memref.load %5[%arg4] : memref<32xi32, 5>
          %17 = arith.cmpi slt, %15, %16 : i32
          scf.if %17 {
            %18 = arith.addi %15, %16 : i32
            %19 = emitc.cast %18 : i32 to index
            %20 = memref.load %1[%19] : memref<256xf32, 5>
            %21 = memref.load %1[%arg4] : memref<256xf32, 5>
            %22 = emitc.add %21, %20 : (f32, f32) -> f32
            memref.store %22, %1[%arg4] : memref<256xf32, 5>
          }
        }
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %14 = memref.load %5[%arg4] : memref<32xi32, 5>
          %15 = arith.divsi %14, %c2_i32 : i32
          memref.store %15, %3[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %13 = memref.load %1[%c0] : memref<256xf32, 5>
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %14 = arith.subi %12, %arg4 : index
        %15 = arith.addi %14, %c31 : index
        %16 = arith.divui %15, %c32 : index
        scf.for %arg5 = %c0 to %16 step %c1 {
          %17 = arith.muli %arg5, %c32 : index
          %18 = arith.addi %17, %11 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = emitc.div %20, %13 : (f32, f32) -> f32
          memref.store %21, %arg1[%19] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z14l1_norm_kernelPKfPfii_0 {
    gpu.func @_Z14l1_norm_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c31 = arith.constant 31 : index
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 256 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<256xf32, 5>
      %2 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %3 = builtin.unrealized_conversion_cast %2 : !llvm.ptr<6> to memref<32xi32, 5>
      %4 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %5 = builtin.unrealized_conversion_cast %4 : !llvm.ptr<6> to memref<32xi32, 5>
      %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<i1, 5>
      %8 = "npu.block_id"() : () -> i64
      %9 = emitc.cast %8 : i64 to i32
      %10 = arith.muli %9, %arg2 : i32
      %11 = emitc.cast %10 : i32 to index
      %12 = emitc.cast %arg2 : i32 to index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %14 = arith.subi %12, %arg4 : index
        %15 = arith.addi %14, %c31 : index
        %16 = arith.divui %15, %c32 : index
        %17 = scf.for %arg5 = %c0 to %16 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %18 = arith.muli %arg5, %c32 : index
          %19 = arith.addi %18, %11 : index
          %20 = arith.addi %19, %arg4 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = math.absf %21 : f32
          %23 = emitc.add %arg6, %22 : (f32, f32) -> f32
          scf.yield %23 : f32
        }
        memref.store %17, %1[%arg4] : memref<256xf32, 5>
      }
      scf.for %arg4 = %c0 to %c32 step %c1 {
        memref.store %c16_i32, %3[%arg4] : memref<32xi32, 5>
      }
      scf.while : () -> () {
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %15 = memref.load %3[%arg4] : memref<32xi32, 5>
          %16 = arith.cmpi sgt, %15, %c0_i32 : i32
          %17 = arith.cmpi eq, %arg4, %c0 : index
          emitc.if %17 {
            memref.store %16, %7[] : memref<i1, 5>
          }
          memref.store %15, %5[%arg4] : memref<32xi32, 5>
        }
        %14 = memref.load %7[] : memref<i1, 5>
        scf.condition(%14)
      } do {
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %14 = builtin.unrealized_conversion_cast %arg4 : index to i64
          %15 = emitc.cast %14 : i64 to i32
          %16 = memref.load %5[%arg4] : memref<32xi32, 5>
          %17 = arith.cmpi slt, %15, %16 : i32
          emitc.if %17 {
            %18 = arith.addi %15, %16 : i32
            %19 = emitc.cast %18 : i32 to index
            %20 = memref.load %1[%19] : memref<256xf32, 5>
            %21 = memref.load %1[%arg4] : memref<256xf32, 5>
            %22 = emitc.add %21, %20 : (f32, f32) -> f32
            memref.store %22, %1[%arg4] : memref<256xf32, 5>
          }
        }
        scf.for %arg4 = %c0 to %c32 step %c1 {
          %14 = memref.load %5[%arg4] : memref<32xi32, 5>
          %15 = arith.divsi %14, %c2_i32 : i32
          memref.store %15, %3[%arg4] : memref<32xi32, 5>
        }
        scf.yield
      }
      %13 = memref.load %1[%c0] : memref<256xf32, 5>
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %14 = arith.subi %12, %arg4 : index
        %15 = arith.addi %14, %c31 : index
        %16 = arith.divui %15, %c32 : index
        scf.for %arg5 = %c0 to %16 step %c1 {
          %17 = arith.muli %arg5, %c32 : index
          %18 = arith.addi %17, %11 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = emitc.div %20, %13 : (f32, f32) -> f32
          memref.store %21, %arg1[%19] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("/CUDA2BANG/Cambricon_NaiveProfiling/cuda_ops_test/Ascend_kernels/gen_cuda_kernels/level_1_prlblem_38_sample_0_L1Norm_.cu":18:46): error: ICT_ERROR(): cannot emit MemRef element type: 'memref<32xi32, 5>'
[ict-debug] driver.cc: After emitc::translateToCpp:

