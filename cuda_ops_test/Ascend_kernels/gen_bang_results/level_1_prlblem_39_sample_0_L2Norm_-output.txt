warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z34__device_stub__l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z19l2_normalize_kernelPKfPfii(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %cst = arith.constant 9.99999993E-9 : f32
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg3 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = arith.muli %1, %arg3 : i32
    %5 = arith.index_cast %4 : i32 to index
    %6 = gpu.thread_id  x
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %arg3 : i32 to index
    %9 = arith.subi %8, %6 : index
    %10 = arith.subi %7, %c1 : index
    %11 = arith.addi %10, %9 : index
    %12 = arith.divui %11, %7 : index
    %13 = affine.for %arg4 = 0 to %12 iter_args(%arg5 = %cst_0) -> (f32) {
      %34 = affine.load %arg0[%arg4 * symbol(%7) + symbol(%6) + symbol(%3)] : memref<?xf32>
      %35 = arith.mulf %34, %34 : f32
      %36 = arith.addf %arg5, %35 : f32
      affine.yield %36 : f32
    }
    %14 = gpu.thread_id  x
    affine.store %13, %alloca[symbol(%14)] : memref<1xf32, 5>
    nvvm.barrier0
    %15 = gpu.block_dim  x
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.divui %16, %c2_i32 : i32
    %18 = math.ctlz %17 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.subi %c32, %19 : index
    %21 = arith.divui %16, %c2_i32 : i32
    %22 = gpu.thread_id  x
    %23 = arith.index_cast %22 : index to i32
    affine.for %arg4 = 0 to %20 {
      %34 = arith.index_cast %arg4 : index to i32
      %35 = arith.shrui %21, %34 : i32
      %36 = arith.cmpi ult, %23, %35 : i32
      scf.if %36 {
        %37 = arith.addi %23, %35 : i32
        %38 = arith.index_cast %37 : i32 to index
        %39 = memref.load %alloca[%38] : memref<1xf32, 5>
        %40 = affine.load %alloca[symbol(%22)] : memref<1xf32, 5>
        %41 = arith.addf %40, %39 : f32
        affine.store %41, %alloca[symbol(%22)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    %24 = affine.load %alloca[0] : memref<1xf32, 5>
    %25 = arith.addf %24, %cst : f32
    %26 = math.sqrt %25 : f32
    %27 = gpu.thread_id  x
    %28 = gpu.block_dim  x
    %29 = arith.index_cast %arg3 : i32 to index
    %30 = arith.subi %29, %27 : index
    %31 = arith.subi %28, %c1 : index
    %32 = arith.addi %31, %30 : index
    %33 = arith.divui %32, %28 : index
    affine.for %arg4 = 0 to %33 {
      %34 = affine.load %arg0[%arg4 * symbol(%28) + symbol(%27) + symbol(%3)] : memref<?xf32>
      %35 = arith.divf %34, %26 : f32
      affine.store %35, %arg1[%arg4 * symbol(%28) + symbol(%27) + symbol(%5)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %cst = arith.constant 9.99999993E-9 : f32
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg3 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.thread_id  x
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %arg3 : i32 to index
    %7 = arith.subi %6, %4 : index
    %8 = arith.subi %5, %c1 : index
    %9 = arith.addi %8, %7 : index
    %10 = arith.divui %9, %5 : index
    %11 = affine.for %arg4 = 0 to %10 iter_args(%arg5 = %cst_0) -> (f32) {
      %21 = affine.load %arg0[%arg4 * symbol(%5) + symbol(%4) + symbol(%3)] : memref<?xf32>
      %22 = arith.mulf %21, %21 : f32
      %23 = arith.addf %arg5, %22 : f32
      affine.yield %23 : f32
    }
    affine.store %11, %alloca[symbol(%4)] : memref<1xf32, 5>
    nvvm.barrier0
    %12 = arith.index_cast %5 : index to i32
    %13 = arith.divui %12, %c2_i32 : i32
    %14 = math.ctlz %13 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.subi %c32, %15 : index
    %17 = arith.index_cast %4 : index to i32
    affine.for %arg4 = 0 to %16 {
      %21 = arith.index_cast %arg4 : index to i32
      %22 = arith.shrui %13, %21 : i32
      %23 = arith.cmpi ult, %17, %22 : i32
      scf.if %23 {
        %24 = arith.addi %17, %22 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = memref.load %alloca[%25] : memref<1xf32, 5>
        %27 = affine.load %alloca[symbol(%4)] : memref<1xf32, 5>
        %28 = arith.addf %27, %26 : f32
        affine.store %28, %alloca[symbol(%4)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    %18 = affine.load %alloca[0] : memref<1xf32, 5>
    %19 = arith.addf %18, %cst : f32
    %20 = math.sqrt %19 : f32
    affine.for %arg4 = 0 to %10 {
      %21 = affine.load %arg0[%arg4 * symbol(%5) + symbol(%4) + symbol(%3)] : memref<?xf32>
      %22 = arith.divf %21, %20 : f32
      affine.store %22, %arg1[%arg4 * symbol(%5) + symbol(%4) + symbol(%3)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %cst = arith.constant 9.99999993E-9 : f32
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg3 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.thread_id  x
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %arg3 : i32 to index
    %7 = arith.subi %6, %4 : index
    %8 = arith.subi %5, %c1 : index
    %9 = arith.addi %8, %7 : index
    %10 = arith.divui %9, %5 : index
    %11 = scf.for %arg4 = %c0 to %10 step %c1 iter_args(%arg5 = %cst_0) -> (f32) {
      %21 = arith.muli %arg4, %5 : index
      %22 = arith.addi %21, %4 : index
      %23 = arith.addi %22, %3 : index
      %24 = memref.load %arg0[%23] : memref<?xf32>
      %25 = arith.mulf %24, %24 : f32
      %26 = arith.addf %arg5, %25 : f32
      scf.yield %26 : f32
    }
    memref.store %11, %alloca[%4] : memref<1xf32, 5>
    nvvm.barrier0
    %12 = arith.index_cast %5 : index to i32
    %13 = arith.divui %12, %c2_i32 : i32
    %14 = math.ctlz %13 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.subi %c32, %15 : index
    %17 = arith.index_cast %4 : index to i32
    scf.for %arg4 = %c0 to %16 step %c1 {
      %21 = arith.index_cast %arg4 : index to i32
      %22 = arith.shrui %13, %21 : i32
      %23 = arith.cmpi ult, %17, %22 : i32
      scf.if %23 {
        %24 = arith.addi %17, %22 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = memref.load %alloca[%25] : memref<1xf32, 5>
        %27 = memref.load %alloca[%4] : memref<1xf32, 5>
        %28 = arith.addf %27, %26 : f32
        memref.store %28, %alloca[%4] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    %18 = memref.load %alloca[%c0] : memref<1xf32, 5>
    %19 = arith.addf %18, %cst : f32
    %20 = math.sqrt %19 : f32
    scf.for %arg4 = %c0 to %10 step %c1 {
      %21 = arith.muli %arg4, %5 : index
      %22 = arith.addi %21, %4 : index
      %23 = arith.addi %22, %3 : index
      %24 = memref.load %arg0[%23] : memref<?xf32>
      %25 = arith.divf %24, %20 : f32
      memref.store %25, %arg1[%23] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %cst = arith.constant 9.99999993E-9 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_3 = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg3 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %arg3 : i32 to index
      %6 = arith.subi %5, %arg4 : index
      %7 = arith.subi %4, %c1_1 : index
      %8 = arith.addi %7, %6 : index
      %9 = arith.divui %8, %4 : index
      %10 = scf.for %arg5 = %c0_0 to %9 step %c1_1 iter_args(%arg6 = %cst_3) -> (f32) {
        %20 = arith.muli %arg5, %4 : index
        %21 = arith.addi %20, %arg4 : index
        %22 = arith.addi %21, %3 : index
        %23 = memref.load %arg0[%22] : memref<?xf32>
        %24 = arith.mulf %23, %23 : f32
        %25 = arith.addf %arg6, %24 : f32
        scf.yield %25 : f32
      }
      memref.store %10, %alloca[%arg4] : memref<1xf32, 5>
      "polygeist.barrier"(%arg4) : (index) -> ()
      %11 = arith.index_cast %4 : index to i32
      %12 = arith.divui %11, %c2_i32 : i32
      %13 = math.ctlz %12 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.subi %c32_2, %14 : index
      %16 = arith.index_cast %arg4 : index to i32
      scf.for %arg5 = %c0_0 to %15 step %c1_1 {
        %20 = arith.index_cast %arg5 : index to i32
        %21 = arith.shrui %12, %20 : i32
        %22 = arith.cmpi ult, %16, %21 : i32
        scf.if %22 {
          %23 = arith.addi %16, %21 : i32
          %24 = arith.index_cast %23 : i32 to index
          %25 = memref.load %alloca[%24] : memref<1xf32, 5>
          %26 = memref.load %alloca[%arg4] : memref<1xf32, 5>
          %27 = arith.addf %26, %25 : f32
          memref.store %27, %alloca[%arg4] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg4) : (index) -> ()
      }
      %17 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
      %18 = arith.addf %17, %cst : f32
      %19 = math.sqrt %18 : f32
      scf.for %arg5 = %c0_0 to %9 step %c1_1 {
        %20 = arith.muli %arg5, %4 : index
        %21 = arith.addi %20, %arg4 : index
        %22 = arith.addi %21, %3 : index
        %23 = memref.load %arg0[%22] : memref<?xf32>
        %24 = arith.divf %23, %19 : f32
        memref.store %24, %arg1[%22] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %cst = arith.constant 9.99999993E-9 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_3 = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg3 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %arg3 : i32 to index
      %6 = arith.subi %5, %arg4 : index
      %7 = arith.subi %4, %c1_1 : index
      %8 = arith.addi %7, %6 : index
      %9 = arith.divui %8, %4 : index
      %10 = scf.for %arg5 = %c0_0 to %9 step %c1_1 iter_args(%arg6 = %cst_3) -> (f32) {
        %20 = arith.muli %arg5, %4 : index
        %21 = arith.addi %20, %arg4 : index
        %22 = arith.addi %21, %3 : index
        %23 = memref.load %arg0[%22] : memref<?xf32>
        %24 = arith.mulf %23, %23 : f32
        %25 = arith.addf %arg6, %24 : f32
        scf.yield %25 : f32
      }
      memref.store %10, %alloca[%arg4] : memref<1xf32, 5>
      "polygeist.barrier"(%arg4) : (index) -> ()
      %11 = arith.index_cast %4 : index to i32
      %12 = arith.divui %11, %c2_i32 : i32
      %13 = math.ctlz %12 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.subi %c32_2, %14 : index
      %16 = arith.index_cast %arg4 : index to i32
      scf.for %arg5 = %c0_0 to %15 step %c1_1 {
        %20 = arith.index_cast %arg5 : index to i32
        %21 = arith.shrui %12, %20 : i32
        %22 = arith.cmpi ult, %16, %21 : i32
        scf.if %22 {
          %23 = arith.addi %16, %21 : i32
          %24 = arith.index_cast %23 : i32 to index
          %25 = memref.load %alloca[%24] : memref<1xf32, 5>
          %26 = memref.load %alloca[%arg4] : memref<1xf32, 5>
          %27 = arith.addf %26, %25 : f32
          memref.store %27, %alloca[%arg4] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg4) : (index) -> ()
      }
      %17 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
      %18 = arith.addf %17, %cst : f32
      %19 = math.sqrt %18 : f32
      scf.for %arg5 = %c0_0 to %9 step %c1_1 {
        %20 = arith.muli %arg5, %4 : index
        %21 = arith.addi %20, %arg4 : index
        %22 = arith.addi %21, %3 : index
        %23 = memref.load %arg0[%22] : memref<?xf32>
        %24 = arith.divf %23, %19 : f32
        memref.store %24, %arg1[%22] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant 9.99999993E-9 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg3 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %arg3 : i32 to index
    %6 = arith.subi %4, %c1 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %22 = arith.subi %5, %arg4 : index
      %23 = arith.addi %6, %22 : index
      %24 = arith.divui %23, %4 : index
      %25 = scf.for %arg5 = %c0 to %24 step %c1 iter_args(%arg6 = %cst) -> (f32) {
        %26 = arith.muli %arg5, %4 : index
        %27 = arith.addi %26, %arg4 : index
        %28 = arith.addi %27, %3 : index
        %29 = memref.load %arg0[%28] : memref<?xf32>
        %30 = arith.mulf %29, %29 : f32
        %31 = arith.addf %arg6, %30 : f32
        scf.yield %31 : f32
      }
      memref.store %25, %alloca[%arg4] : memref<1xf32, 5>
      scf.yield
    }
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.divui %8, %c2_i32 : i32
    %10 = math.ctlz %9 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.subi %c32, %11 : index
    scf.for %arg4 = %c0 to %12 step %c1 {
      %22 = arith.index_cast %arg4 : index to i32
      %23 = arith.shrui %9, %22 : i32
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %24 = arith.index_cast %arg5 : index to i32
        %25 = arith.cmpi ult, %24, %23 : i32
        scf.if %25 {
          %26 = arith.addi %24, %23 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%arg5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.yield
      }
    }
    %13 = gpu.block_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %14, %arg3 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.subi %7, %c1 : index
    %18 = arith.index_cast %arg3 : i32 to index
    %19 = memref.load %alloca[%c0] : memref<1xf32, 5>
    %20 = arith.addf %19, %cst_0 : f32
    %21 = math.sqrt %20 : f32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %22 = arith.subi %18, %arg4 : index
      %23 = arith.addi %17, %22 : index
      %24 = arith.divui %23, %7 : index
      scf.for %arg5 = %c0 to %24 step %c1 {
        %25 = arith.muli %arg5, %7 : index
        %26 = arith.addi %25, %arg4 : index
        %27 = arith.addi %26, %16 : index
        %28 = memref.load %arg0[%27] : memref<?xf32>
        %29 = arith.divf %28, %21 : f32
        memref.store %29, %arg1[%27] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg3 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %arg3 : i32 to index
      %6 = arith.subi %4, %c1 : index
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %15 = arith.subi %5, %arg4 : index
        %16 = arith.addi %6, %15 : index
        %17 = arith.divui %16, %4 : index
        %18 = scf.for %arg5 = %c0 to %17 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %19 = arith.muli %arg5, %4 : index
          %20 = arith.addi %19, %arg4 : index
          %21 = arith.addi %20, %3 : index
          %22 = memref.load %arg0[%21] : memref<?xf32>
          %23 = arith.mulf %22, %22 : f32
          %24 = arith.addf %arg6, %23 : f32
          scf.yield %24 : f32
        }
        memref.store %18, %alloca[%arg4] : memref<1xf32, 5>
        scf.yield
      }
      %7 = arith.index_cast %4 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      %9 = math.ctlz %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c32, %10 : index
      scf.for %arg4 = %c0 to %11 step %c1 {
        %15 = arith.index_cast %arg4 : index to i32
        %16 = arith.shrui %8, %15 : i32
        scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.cmpi ult, %17, %16 : i32
          scf.if %18 {
            %19 = arith.addi %17, %16 : i32
            %20 = arith.index_cast %19 : i32 to index
            %21 = memref.load %alloca[%20] : memref<1xf32, 5>
            %22 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %23 = arith.addf %22, %21 : f32
            memref.store %23, %alloca[%arg5] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %13 = arith.addf %12, %cst_0 : f32
      %14 = math.sqrt %13 : f32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %15 = arith.subi %5, %arg4 : index
        %16 = arith.addi %6, %15 : index
        %17 = arith.divui %16, %4 : index
        scf.for %arg5 = %c0 to %17 step %c1 {
          %18 = arith.muli %arg5, %4 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = arith.addi %19, %3 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.divf %21, %14 : f32
          memref.store %22, %arg1[%20] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg3 : i32
      %3 = arith.index_cast %2 : i32 to index
      %c32_1 = arith.constant 32 : index
      %4 = arith.index_cast %arg3 : i32 to index
      %5 = arith.subi %c32_1, %c1 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %14 = arith.subi %4, %arg4 : index
        %15 = arith.addi %5, %14 : index
        %16 = arith.divui %15, %c32_1 : index
        %17 = scf.for %arg5 = %c0 to %16 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %18 = arith.muli %arg5, %c32_1 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = arith.addi %19, %3 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.mulf %21, %21 : f32
          %23 = arith.addf %arg6, %22 : f32
          scf.yield %23 : f32
        }
        memref.store %17, %alloca[%arg4] : memref<1xf32, 5>
      }
      %6 = arith.index_cast %c32_1 : index to i32
      %7 = arith.divui %6, %c2_i32 : i32
      %8 = math.ctlz %7 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = arith.subi %c32, %9 : index
      scf.for %arg4 = %c0 to %10 step %c1 {
        %14 = arith.index_cast %arg4 : index to i32
        %15 = arith.shrui %7, %14 : i32
        %c1_4 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_4 {
          %16 = arith.index_cast %arg5 : index to i32
          %17 = arith.cmpi ult, %16, %15 : i32
          scf.if %17 {
            %18 = arith.addi %16, %15 : i32
            %19 = arith.index_cast %18 : i32 to index
            %20 = memref.load %alloca[%19] : memref<1xf32, 5>
            %21 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %22 = arith.addf %21, %20 : f32
            memref.store %22, %alloca[%arg5] : memref<1xf32, 5>
          }
        }
      }
      %11 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %12 = arith.addf %11, %cst_0 : f32
      %13 = math.sqrt %12 : f32
      %c1_3 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_3 {
        %14 = arith.subi %4, %arg4 : index
        %15 = arith.addi %5, %14 : index
        %16 = arith.divui %15, %c32_1 : index
        scf.for %arg5 = %c0 to %16 step %c1 {
          %17 = arith.muli %arg5, %c32_1 : index
          %18 = arith.addi %17, %arg4 : index
          %19 = arith.addi %18, %3 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = arith.divf %20, %13 : f32
          memref.store %21, %arg1[%19] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<1xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<1xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %arg3 : i32
      %4 = arith.index_cast %3 : i32 to index
      %c32_1 = arith.constant 32 : index
      %5 = arith.index_cast %arg3 : i32 to index
      %6 = arith.subi %c32_1, %c1 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %15 = arith.subi %5, %arg4 : index
        %16 = arith.addi %6, %15 : index
        %17 = arith.divui %16, %c32_1 : index
        %18 = scf.for %arg5 = %c0 to %17 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %19 = arith.muli %arg5, %c32_1 : index
          %20 = arith.addi %19, %arg4 : index
          %21 = arith.addi %20, %4 : index
          %22 = memref.load %arg0[%21] : memref<?xf32>
          %23 = arith.mulf %22, %22 : f32
          %24 = arith.addf %arg6, %23 : f32
          scf.yield %24 : f32
        }
        memref.store %18, %alloca[%arg4] : memref<1xf32, 5>
      }
      %7 = arith.index_cast %c32_1 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      %9 = math.ctlz %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c32, %10 : index
      scf.for %arg4 = %c0 to %11 step %c1 {
        %15 = arith.index_cast %arg4 : index to i32
        %16 = arith.shrui %8, %15 : i32
        %c1_4 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_4 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.cmpi ult, %17, %16 : i32
          scf.if %18 {
            %19 = arith.addi %17, %16 : i32
            %20 = arith.index_cast %19 : i32 to index
            %21 = memref.load %alloca[%20] : memref<1xf32, 5>
            %22 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %23 = arith.addf %22, %21 : f32
            memref.store %23, %alloca[%arg5] : memref<1xf32, 5>
          }
        }
      }
      %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %13 = arith.addf %12, %cst_0 : f32
      %14 = math.sqrt %13 : f32
      %c1_3 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_3 {
        %15 = arith.subi %5, %arg4 : index
        %16 = arith.addi %6, %15 : index
        %17 = arith.divui %16, %c32_1 : index
        scf.for %arg5 = %c0 to %17 step %c1 {
          %18 = arith.muli %arg5, %c32_1 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = arith.addi %19, %4 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.divf %21, %14 : f32
          memref.store %22, %arg1[%20] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %5 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg3 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%14 = arith.index_cast %13 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%21 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%29 = arith.index_cast %28 : i32 to index
[ict-debug] ArithUnaryOpToNPULowering: process op: 

%20 = math.sqrt %19 : f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = emitc.cast %4 : i32 to index
      %c32_1 = arith.constant 32 : index
      %6 = emitc.cast %arg3 : i32 to index
      %7 = arith.subi %c32_1, %c1 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %15 = arith.subi %6, %arg4 : index
        %16 = arith.addi %7, %15 : index
        %17 = arith.divui %16, %c32_1 : index
        %18 = scf.for %arg5 = %c0 to %17 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %19 = arith.muli %arg5, %c32_1 : index
          %20 = arith.addi %19, %arg4 : index
          %21 = arith.addi %20, %5 : index
          %22 = memref.load %arg0[%21] : memref<?xf32>
          %23 = emitc.mul %22, %22 : (f32, f32) -> f32
          %24 = emitc.add %arg6, %23 : (f32, f32) -> f32
          scf.yield %24 : f32
        }
        memref.store %18, %1[%arg4] : memref<1xf32, 5>
      }
      %c32_i32 = arith.constant 32 : i32
      %8 = arith.divui %c32_i32, %c2_i32 : i32
      %9 = math.ctlz %8 : i32
      %10 = emitc.cast %9 : i32 to index
      %11 = arith.subi %c32, %10 : index
      scf.for %arg4 = %c0 to %11 step %c1 {
        %15 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %16 = emitc.cast %15 : i64 to i32
        %17 = arith.shrui %8, %16 : i32
        %c1_4 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_4 {
          %18 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %19 = emitc.cast %18 : i64 to i32
          %20 = arith.cmpi ult, %19, %17 : i32
          scf.if %20 {
            %21 = arith.addi %19, %17 : i32
            %22 = emitc.cast %21 : i32 to index
            %23 = memref.load %1[%22] : memref<1xf32, 5>
            %24 = memref.load %1[%arg5] : memref<1xf32, 5>
            %25 = emitc.add %24, %23 : (f32, f32) -> f32
            memref.store %25, %1[%arg5] : memref<1xf32, 5>
          }
        }
      }
      %12 = memref.load %1[%c0] : memref<1xf32, 5>
      %13 = emitc.add %12, %cst_0 : (f32, f32) -> f32
      %14 = emitc.call "sqrtf"(%13) : (f32) -> f32
      %c1_3 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_3 {
        %15 = arith.subi %6, %arg4 : index
        %16 = arith.addi %7, %15 : index
        %17 = arith.divui %16, %c32_1 : index
        scf.for %arg5 = %c0 to %17 step %c1 {
          %18 = arith.muli %arg5, %c32_1 : index
          %19 = arith.addi %18, %arg4 : index
          %20 = arith.addi %19, %5 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = emitc.div %21, %14 : (f32, f32) -> f32
          memref.store %22, %arg1[%20] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c31 = arith.constant 31 : index
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = emitc.cast %4 : i32 to index
      %6 = emitc.cast %arg3 : i32 to index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %12 = arith.subi %6, %arg4 : index
        %13 = arith.addi %12, %c31 : index
        %14 = arith.divui %13, %c32 : index
        %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.muli %arg5, %c32 : index
          %17 = arith.addi %16, %arg4 : index
          %18 = arith.addi %17, %5 : index
          %19 = memref.load %arg0[%18] : memref<?xf32>
          %20 = emitc.mul %19, %19 : (f32, f32) -> f32
          %21 = emitc.add %arg6, %20 : (f32, f32) -> f32
          scf.yield %21 : f32
        }
        memref.store %15, %1[%arg4] : memref<1xf32, 5>
      }
      %7 = emitc.cast %c27_i32 : i32 to index
      %8 = arith.subi %c32, %7 : index
      scf.for %arg4 = %c0 to %8 step %c1 {
        %12 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %13 = emitc.cast %12 : i64 to i32
        %14 = arith.shrui %c16_i32, %13 : i32
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %15 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %16 = emitc.cast %15 : i64 to i32
          %17 = arith.cmpi ult, %16, %14 : i32
          scf.if %17 {
            %18 = arith.addi %16, %14 : i32
            %19 = emitc.cast %18 : i32 to index
            %20 = memref.load %1[%19] : memref<1xf32, 5>
            %21 = memref.load %1[%arg5] : memref<1xf32, 5>
            %22 = emitc.add %21, %20 : (f32, f32) -> f32
            memref.store %22, %1[%arg5] : memref<1xf32, 5>
          }
        }
      }
      %9 = memref.load %1[%c0] : memref<1xf32, 5>
      %10 = emitc.add %9, %cst_0 : (f32, f32) -> f32
      %11 = emitc.call "sqrtf"(%10) : (f32) -> f32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %12 = arith.subi %6, %arg4 : index
        %13 = arith.addi %12, %c31 : index
        %14 = arith.divui %13, %c32 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %15 = arith.muli %arg5, %c32 : index
          %16 = arith.addi %15, %arg4 : index
          %17 = arith.addi %16, %5 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = emitc.div %18, %11 : (f32, f32) -> f32
          memref.store %19, %arg1[%17] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z19l2_normalize_kernelPKfPfii_0 {
    gpu.func @_Z19l2_normalize_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c31 = arith.constant 31 : index
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = emitc.cast %4 : i32 to index
      %6 = emitc.cast %arg3 : i32 to index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %12 = arith.subi %6, %arg4 : index
        %13 = arith.addi %12, %c31 : index
        %14 = arith.divui %13, %c32 : index
        %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.muli %arg5, %c32 : index
          %17 = arith.addi %16, %arg4 : index
          %18 = arith.addi %17, %5 : index
          %19 = memref.load %arg0[%18] : memref<?xf32>
          %20 = emitc.mul %19, %19 : (f32, f32) -> f32
          %21 = emitc.add %arg6, %20 : (f32, f32) -> f32
          scf.yield %21 : f32
        }
        memref.store %15, %1[%arg4] : memref<1xf32, 5>
      }
      %7 = emitc.cast %c27_i32 : i32 to index
      %8 = arith.subi %c32, %7 : index
      scf.for %arg4 = %c0 to %8 step %c1 {
        %12 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %13 = emitc.cast %12 : i64 to i32
        %14 = arith.shrui %c16_i32, %13 : i32
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %15 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %16 = emitc.cast %15 : i64 to i32
          %17 = arith.cmpi ult, %16, %14 : i32
          emitc.if %17 {
            %18 = arith.addi %16, %14 : i32
            %19 = emitc.cast %18 : i32 to index
            %20 = memref.load %1[%19] : memref<1xf32, 5>
            %21 = memref.load %1[%arg5] : memref<1xf32, 5>
            %22 = emitc.add %21, %20 : (f32, f32) -> f32
            memref.store %22, %1[%arg5] : memref<1xf32, 5>
          }
        }
      }
      %9 = memref.load %1[%c0] : memref<1xf32, 5>
      %10 = emitc.add %9, %cst_0 : (f32, f32) -> f32
      %11 = emitc.call "sqrtf"(%10) : (f32) -> f32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %12 = arith.subi %6, %arg4 : index
        %13 = arith.addi %12, %c31 : index
        %14 = arith.divui %13, %c32 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %15 = arith.muli %arg5, %c32 : index
          %16 = arith.addi %15, %arg4 : index
          %17 = arith.addi %16, %5 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = emitc.div %18, %11 : (f32, f32) -> f32
          memref.store %19, %arg1[%17] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

