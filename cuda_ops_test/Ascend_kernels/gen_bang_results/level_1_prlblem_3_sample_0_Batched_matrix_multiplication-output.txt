warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z45__device_stub__batched_matrix_multiply_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z30batched_matrix_multiply_kernelPKfS0_Pfiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z30batched_matrix_multiply_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg4 : i32
    %5 = arith.muli %4, %arg5 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg5 : i32
    %8 = arith.muli %7, %arg6 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %3, %arg4 : i32
    %11 = arith.muli %10, %arg6 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = gpu.block_id  y
    %14 = arith.index_cast %13 : index to i32
    %15 = gpu.block_dim  y
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.muli %14, %16 : i32
    %18 = gpu.thread_id  y
    %19 = arith.index_cast %18 : index to i32
    %20 = arith.addi %17, %19 : i32
    %21 = arith.muli %20, %arg5 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.muli %20, %arg6 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = gpu.block_id  x
    %26 = arith.index_cast %25 : index to i32
    %27 = gpu.block_dim  x
    %28 = arith.index_cast %27 : index to i32
    %29 = arith.muli %26, %28 : i32
    %30 = gpu.thread_id  x
    %31 = arith.index_cast %30 : index to i32
    %32 = arith.addi %29, %31 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.index_cast %32 : i32 to index
    %35 = arith.cmpi slt, %3, %arg3 : i32
    %36 = arith.cmpi slt, %20, %arg4 : i32
    %37 = arith.cmpi slt, %32, %arg6 : i32
    %38 = arith.andi %36, %37 : i1
    %39 = arith.andi %35, %38 : i1
    scf.if %39 {
      %40 = affine.for %arg7 = 0 to %1 iter_args(%arg8 = %cst) -> (f32) {
        %41 = affine.load %arg0[%arg7 + symbol(%6) + symbol(%22)] : memref<?xf32>
        %42 = affine.load %arg1[%arg7 * symbol(%0) + symbol(%9) + symbol(%33)] : memref<?xf32>
        %43 = arith.mulf %41, %42 : f32
        %44 = arith.addf %arg8, %43 : f32
        affine.yield %44 : f32
      }
      affine.store %40, %arg2[symbol(%12) + symbol(%24) + symbol(%34)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30batched_matrix_multiply_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg4 : i32
    %5 = arith.muli %4, %arg5 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg5 : i32
    %8 = arith.muli %7, %arg6 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %4, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  y
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.muli %19, %arg5 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %19, %arg6 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = gpu.block_id  x
    %25 = arith.index_cast %24 : index to i32
    %26 = gpu.block_dim  x
    %27 = arith.index_cast %26 : index to i32
    %28 = arith.muli %25, %27 : i32
    %29 = gpu.thread_id  x
    %30 = arith.index_cast %29 : index to i32
    %31 = arith.addi %28, %30 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.cmpi slt, %3, %arg3 : i32
    %34 = arith.cmpi slt, %19, %arg4 : i32
    %35 = arith.cmpi slt, %31, %arg6 : i32
    %36 = arith.andi %34, %35 : i1
    %37 = arith.andi %33, %36 : i1
    scf.if %37 {
      %38 = affine.for %arg7 = 0 to %1 iter_args(%arg8 = %cst) -> (f32) {
        %39 = affine.load %arg0[%arg7 + symbol(%6) + symbol(%21)] : memref<?xf32>
        %40 = affine.load %arg1[%arg7 * symbol(%0) + symbol(%9) + symbol(%32)] : memref<?xf32>
        %41 = arith.mulf %39, %40 : f32
        %42 = arith.addf %arg8, %41 : f32
        affine.yield %42 : f32
      }
      affine.store %38, %arg2[symbol(%11) + symbol(%23) + symbol(%32)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30batched_matrix_multiply_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg4 : i32
    %5 = arith.muli %4, %arg5 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg5 : i32
    %8 = arith.muli %7, %arg6 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %4, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  y
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.muli %19, %arg5 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %19, %arg6 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = gpu.block_id  x
    %25 = arith.index_cast %24 : index to i32
    %26 = gpu.block_dim  x
    %27 = arith.index_cast %26 : index to i32
    %28 = arith.muli %25, %27 : i32
    %29 = gpu.thread_id  x
    %30 = arith.index_cast %29 : index to i32
    %31 = arith.addi %28, %30 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.cmpi slt, %3, %arg3 : i32
    %34 = arith.cmpi slt, %19, %arg4 : i32
    %35 = arith.cmpi slt, %31, %arg6 : i32
    %36 = arith.andi %34, %35 : i1
    %37 = arith.andi %33, %36 : i1
    scf.if %37 {
      %38 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
        %41 = arith.addi %arg7, %6 : index
        %42 = arith.addi %41, %21 : index
        %43 = memref.load %arg0[%42] : memref<?xf32>
        %44 = arith.muli %arg7, %0 : index
        %45 = arith.addi %44, %9 : index
        %46 = arith.addi %45, %32 : index
        %47 = memref.load %arg1[%46] : memref<?xf32>
        %48 = arith.mulf %43, %47 : f32
        %49 = arith.addf %arg8, %48 : f32
        scf.yield %49 : f32
      }
      %39 = arith.addi %11, %23 : index
      %40 = arith.addi %39, %32 : index
      memref.store %38, %arg2[%40] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

