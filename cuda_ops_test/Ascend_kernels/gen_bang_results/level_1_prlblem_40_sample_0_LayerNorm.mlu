#include <bang.h>
__mlu_global__ void layer_norm_kernel(float* v1, float* v2, float* v3, float* v4, float* v5, float* v6, int32_t v7, int32_t v8, int32_t v9, int32_t v10) {
  int32_t c32_11 = 32;
  size_t c18446744073709551615_12 = -1;
  size_t c0_13 = 0;
  size_t c1_14 = 1;
  size_t c32_15 = 32;
  size_t v16 = (size_t) v8;
  int32_t v17 = (v9) * (v10);
  size_t v18 = (size_t) v17;
  int64_t v19 = taskIdX;
  size_t v20 = (size_t) v19;
  int32_t v21 = (int32_t) v20;
  int32_t v22 = (v21) * (c32_11);
  int32_t v23 = (v7) * (v8);
  int32_t v24 = (v23) * (v9);
  int32_t v25 = (v24) * (v10);
  for (size_t v26 = c0_13; v26 < c32_15; v26 += c1_14) {
    int32_t v27 = (int32_t) v26;
    int32_t v28 = (v22) + (v27);
    size_t v29 = (size_t) v28;
    size_t v30 = (c18446744073709551615_12) - (v29);
    bool v31 = v29 < c0_13;
    size_t v32 = (v31) ? (v30) : (v29);
    size_t v33 = (v32) / (v18);
    size_t v34 = (c18446744073709551615_12) - (v33);
    size_t v35 = (v31) ? (v34) : (v33);
    size_t v36 = (v35) % (v16);
    size_t v37 = (v36) + (v16);
    bool v38 = v36 < c0_13;
    size_t v39 = (v38) ? (v37) : (v36);
    bool v40 = v28 < v25;
    if (v40) {
      float v41 = v1[v29];
      float v42 = v5[v39];
      float v43 = v41 - v42;
      float v44 = v6[v39];
      float v45 = v43 * v44;
      float v46 = v2[v39];
      float v47 = v45 * v46;
      float v48 = v3[v39];
      float v49 = v47 + v48;
      v4[v29] = v49;
    };
  }
  return;
}




