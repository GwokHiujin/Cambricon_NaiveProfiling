warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z36__device_stub__maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg9 : i32 to index
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg6 : i32 to index
    %6 = arith.index_cast %arg5 : i32 to index
    %7 = arith.muli %arg3, %arg5 : i32
    %8 = gpu.block_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = gpu.block_dim  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.muli %9, %11 : i32
    %13 = gpu.thread_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.addi %12, %14 : i32
    %16 = arith.remsi %15, %arg5 : i32
    %17 = arith.muli %16, %arg7 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.index_cast %17 : i32 to index
    %20 = arith.index_cast %15 : i32 to index
    %21 = arith.divsi %15, %arg5 : i32
    %22 = arith.remsi %21, %arg3 : i32
    %23 = arith.muli %22, %arg4 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %22, %arg5 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.divsi %15, %7 : i32
    %28 = arith.muli %27, %arg3 : i32
    %29 = arith.muli %28, %arg4 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.muli %27, %arg3 : i32
    %32 = arith.muli %31, %arg5 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.muli %arg2, %arg3 : i32
    %35 = arith.muli %34, %arg5 : i32
    %36 = arith.cmpi slt, %15, %35 : i32
    scf.if %36 {
      %37 = affine.for %arg10 = 0 to %5 iter_args(%arg11 = %cst) -> (f32) {
        %38 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * s2 + s0 - s1 >= 0, -(d0 * s2) - s0 + s1 + s3 - 1 >= 0)>(%arg10)[%18, %2, %1, %0] -> f32 {
          %39 = affine.load %arg0[%arg10 * symbol(%3) + symbol(%30) + symbol(%24) + symbol(%19) - symbol(%4)] : memref<?xf32>
          %40 = arith.cmpf ogt, %39, %arg11 : f32
          %41 = arith.select %40, %39, %arg11 : f32
          affine.yield %41 : f32
        } else {
          affine.yield %arg11 : f32
        }
        affine.yield %38 : f32
      }
      affine.store %37, %arg1[symbol(%33) + symbol(%26) + symbol(%20) mod symbol(%6)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %5 = arith.muli %arg3, %arg5 : i32
    %6 = gpu.block_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = gpu.thread_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.addi %10, %12 : i32
    %14 = arith.remsi %13, %arg5 : i32
    %15 = arith.muli %14, %arg7 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %13 : i32 to index
    %18 = arith.remsi %17, %4 : index
    %19 = arith.addi %18, %4 : index
    %20 = arith.cmpi slt, %18, %c0 : index
    %21 = arith.select %20, %19, %18 : index
    %22 = arith.divsi %13, %arg5 : i32
    %23 = arith.remsi %22, %arg3 : i32
    %24 = arith.muli %23, %arg4 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.muli %23, %arg5 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.divsi %13, %5 : i32
    %29 = arith.muli %28, %arg3 : i32
    %30 = arith.muli %29, %arg4 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %29, %arg5 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.muli %arg2, %arg3 : i32
    %35 = arith.muli %34, %arg5 : i32
    %36 = arith.cmpi slt, %13, %35 : i32
    scf.if %36 {
      %37 = affine.for %arg10 = 0 to %3 iter_args(%arg11 = %cst) -> (f32) {
        %38 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * s0 + s1 - s2 >= 0, -(d0 * s0) - s1 + s2 + s3 - 1 >= 0)>(%arg10)[%1, %16, %2, %0] -> f32 {
          %39 = affine.load %arg0[%arg10 * symbol(%1) + symbol(%31) + symbol(%25) + symbol(%16) - symbol(%2)] : memref<?xf32>
          %40 = arith.cmpf ogt, %39, %arg11 : f32
          %41 = arith.select %40, %39, %arg11 : f32
          affine.yield %41 : f32
        } else {
          affine.yield %arg11 : f32
        }
        affine.yield %38 : f32
      }
      affine.store %37, %arg1[symbol(%33) + symbol(%27) + symbol(%21)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %5 = arith.muli %arg3, %arg5 : i32
    %6 = gpu.block_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = gpu.thread_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.addi %10, %12 : i32
    %14 = arith.remsi %13, %arg5 : i32
    %15 = arith.muli %14, %arg7 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %13 : i32 to index
    %18 = arith.remsi %17, %4 : index
    %19 = arith.addi %18, %4 : index
    %20 = arith.cmpi slt, %18, %c0 : index
    %21 = arith.select %20, %19, %18 : index
    %22 = arith.divsi %13, %arg5 : i32
    %23 = arith.remsi %22, %arg3 : i32
    %24 = arith.muli %23, %arg4 : i32
    %25 = arith.index_cast %24 : i32 to index
    %26 = arith.muli %23, %arg5 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.divsi %13, %5 : i32
    %29 = arith.muli %28, %arg3 : i32
    %30 = arith.muli %29, %arg4 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %29, %arg5 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.muli %arg2, %arg3 : i32
    %35 = arith.muli %34, %arg5 : i32
    %36 = arith.cmpi slt, %13, %35 : i32
    scf.if %36 {
      %37 = scf.for %arg10 = %c0 to %3 step %c1 iter_args(%arg11 = %cst) -> (f32) {
        %40 = arith.muli %arg10, %1 : index
        %41 = arith.subi %16, %2 : index
        %42 = arith.addi %40, %41 : index
        %43 = arith.cmpi sge, %42, %c0 : index
        %44 = arith.muli %40, %c-1 : index
        %45 = arith.subi %44, %16 : index
        %46 = arith.addi %45, %2 : index
        %47 = arith.addi %46, %0 : index
        %48 = arith.addi %47, %c-1 : index
        %49 = arith.cmpi sge, %48, %c0 : index
        %50 = arith.andi %43, %49 : i1
        %51 = scf.if %50 -> (f32) {
          %52 = arith.addi %40, %31 : index
          %53 = arith.addi %52, %25 : index
          %54 = arith.addi %53, %16 : index
          %55 = arith.subi %54, %2 : index
          %56 = memref.load %arg0[%55] : memref<?xf32>
          %57 = arith.cmpf ogt, %56, %arg11 : f32
          %58 = arith.select %57, %56, %arg11 : f32
          scf.yield %58 : f32
        } else {
          scf.yield %arg11 : f32
        }
        scf.yield %51 : f32
      }
      %38 = arith.addi %33, %27 : index
      %39 = arith.addi %38, %21 : index
      memref.store %37, %arg1[%39] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg10) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg9 : i32 to index
      %2 = arith.index_cast %arg8 : i32 to index
      %3 = arith.index_cast %arg6 : i32 to index
      %4 = arith.index_cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = gpu.block_id  x
      %7 = arith.index_cast %6 : index to i32
      %8 = gpu.block_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.index_cast %arg10 : index to i32
      %12 = arith.addi %10, %11 : i32
      %13 = arith.remsi %12, %arg5 : i32
      %14 = arith.muli %13, %arg7 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.index_cast %12 : i32 to index
      %17 = arith.remsi %16, %4 : index
      %18 = arith.addi %17, %4 : index
      %19 = arith.cmpi slt, %17, %c0_1 : index
      %20 = arith.select %19, %18, %17 : index
      %21 = arith.divsi %12, %arg5 : i32
      %22 = arith.remsi %21, %arg3 : i32
      %23 = arith.muli %22, %arg4 : i32
      %24 = arith.index_cast %23 : i32 to index
      %25 = arith.muli %22, %arg5 : i32
      %26 = arith.index_cast %25 : i32 to index
      %27 = arith.divsi %12, %5 : i32
      %28 = arith.muli %27, %arg3 : i32
      %29 = arith.muli %28, %arg4 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.muli %28, %arg5 : i32
      %32 = arith.index_cast %31 : i32 to index
      %33 = arith.muli %arg2, %arg3 : i32
      %34 = arith.muli %33, %arg5 : i32
      %35 = arith.cmpi slt, %12, %34 : i32
      scf.if %35 {
        %36 = scf.for %arg11 = %c0_1 to %3 step %c1_0 iter_args(%arg12 = %cst) -> (f32) {
          %39 = arith.muli %arg11, %1 : index
          %40 = arith.subi %15, %2 : index
          %41 = arith.addi %39, %40 : index
          %42 = arith.cmpi sge, %41, %c0_1 : index
          %43 = arith.muli %39, %c-1 : index
          %44 = arith.subi %43, %15 : index
          %45 = arith.addi %44, %2 : index
          %46 = arith.addi %45, %0 : index
          %47 = arith.addi %46, %c-1 : index
          %48 = arith.cmpi sge, %47, %c0_1 : index
          %49 = arith.andi %42, %48 : i1
          %50 = scf.if %49 -> (f32) {
            %51 = arith.addi %39, %30 : index
            %52 = arith.addi %51, %24 : index
            %53 = arith.addi %52, %15 : index
            %54 = arith.subi %53, %2 : index
            %55 = memref.load %arg0[%54] : memref<?xf32>
            %56 = arith.cmpf ogt, %55, %arg12 : f32
            %57 = arith.select %56, %55, %arg12 : f32
            scf.yield %57 : f32
          } else {
            scf.yield %arg12 : f32
          }
          scf.yield %50 : f32
        }
        %37 = arith.addi %32, %26 : index
        %38 = arith.addi %37, %20 : index
        memref.store %36, %arg1[%38] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg10) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg9 : i32 to index
      %2 = arith.index_cast %arg8 : i32 to index
      %3 = arith.index_cast %arg6 : i32 to index
      %4 = arith.index_cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = gpu.block_id  x
      %7 = arith.index_cast %6 : index to i32
      %8 = gpu.block_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.index_cast %arg10 : index to i32
      %12 = arith.addi %10, %11 : i32
      %13 = arith.remsi %12, %arg5 : i32
      %14 = arith.muli %13, %arg7 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.index_cast %12 : i32 to index
      %17 = arith.remsi %16, %4 : index
      %18 = arith.addi %17, %4 : index
      %19 = arith.cmpi slt, %17, %c0_1 : index
      %20 = arith.select %19, %18, %17 : index
      %21 = arith.divsi %12, %arg5 : i32
      %22 = arith.remsi %21, %arg3 : i32
      %23 = arith.muli %22, %arg4 : i32
      %24 = arith.index_cast %23 : i32 to index
      %25 = arith.muli %22, %arg5 : i32
      %26 = arith.index_cast %25 : i32 to index
      %27 = arith.divsi %12, %5 : i32
      %28 = arith.muli %27, %arg3 : i32
      %29 = arith.muli %28, %arg4 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.muli %28, %arg5 : i32
      %32 = arith.index_cast %31 : i32 to index
      %33 = arith.muli %arg2, %arg3 : i32
      %34 = arith.muli %33, %arg5 : i32
      %35 = arith.cmpi slt, %12, %34 : i32
      scf.if %35 {
        %36 = scf.for %arg11 = %c0_1 to %3 step %c1_0 iter_args(%arg12 = %cst) -> (f32) {
          %39 = arith.muli %arg11, %1 : index
          %40 = arith.subi %15, %2 : index
          %41 = arith.addi %39, %40 : index
          %42 = arith.cmpi sge, %41, %c0_1 : index
          %43 = arith.muli %39, %c-1 : index
          %44 = arith.subi %43, %15 : index
          %45 = arith.addi %44, %2 : index
          %46 = arith.addi %45, %0 : index
          %47 = arith.addi %46, %c-1 : index
          %48 = arith.cmpi sge, %47, %c0_1 : index
          %49 = arith.andi %42, %48 : i1
          %50 = scf.if %49 -> (f32) {
            %51 = arith.addi %39, %30 : index
            %52 = arith.addi %51, %24 : index
            %53 = arith.addi %52, %15 : index
            %54 = arith.subi %53, %2 : index
            %55 = memref.load %arg0[%54] : memref<?xf32>
            %56 = arith.cmpf ogt, %55, %arg12 : f32
            %57 = arith.select %56, %55, %arg12 : f32
            scf.yield %57 : f32
          } else {
            scf.yield %arg12 : f32
          }
          scf.yield %50 : f32
        }
        %37 = arith.addi %32, %26 : index
        %38 = arith.addi %37, %20 : index
        memref.store %36, %arg1[%38] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %5 = arith.muli %arg3, %arg5 : i32
    %6 = gpu.block_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = arith.muli %arg2, %arg3 : i32
    %12 = arith.muli %11, %arg5 : i32
    scf.parallel (%arg10) = (%c0) to (%c32) step (%c1) {
      %13 = arith.index_cast %arg10 : index to i32
      %14 = arith.addi %10, %13 : i32
      %15 = arith.remsi %14, %arg5 : i32
      %16 = arith.muli %15, %arg7 : i32
      %17 = arith.index_cast %16 : i32 to index
      %18 = arith.index_cast %14 : i32 to index
      %19 = arith.remsi %18, %4 : index
      %20 = arith.addi %19, %4 : index
      %21 = arith.cmpi slt, %19, %c0 : index
      %22 = arith.select %21, %20, %19 : index
      %23 = arith.divsi %14, %arg5 : i32
      %24 = arith.remsi %23, %arg3 : i32
      %25 = arith.muli %24, %arg4 : i32
      %26 = arith.index_cast %25 : i32 to index
      %27 = arith.muli %24, %arg5 : i32
      %28 = arith.index_cast %27 : i32 to index
      %29 = arith.divsi %14, %5 : i32
      %30 = arith.muli %29, %arg3 : i32
      %31 = arith.muli %30, %arg4 : i32
      %32 = arith.index_cast %31 : i32 to index
      %33 = arith.muli %30, %arg5 : i32
      %34 = arith.index_cast %33 : i32 to index
      %35 = arith.cmpi slt, %14, %12 : i32
      scf.if %35 {
        %36 = arith.subi %17, %2 : index
        %37 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
          %40 = arith.muli %arg11, %1 : index
          %41 = arith.addi %40, %36 : index
          %42 = arith.cmpi sge, %41, %c0 : index
          %43 = arith.muli %40, %c-1 : index
          %44 = arith.subi %43, %17 : index
          %45 = arith.addi %44, %2 : index
          %46 = arith.addi %45, %0 : index
          %47 = arith.addi %46, %c-1 : index
          %48 = arith.cmpi sge, %47, %c0 : index
          %49 = arith.andi %42, %48 : i1
          %50 = scf.if %49 -> (f32) {
            %51 = arith.addi %40, %32 : index
            %52 = arith.addi %51, %26 : index
            %53 = arith.addi %52, %17 : index
            %54 = arith.subi %53, %2 : index
            %55 = memref.load %arg0[%54] : memref<?xf32>
            %56 = arith.cmpf ogt, %55, %arg12 : f32
            %57 = arith.select %56, %55, %arg12 : f32
            scf.yield %57 : f32
          } else {
            scf.yield %arg12 : f32
          }
          scf.yield %50 : f32
        }
        %38 = arith.addi %34, %28 : index
        %39 = arith.addi %38, %22 : index
        memref.store %37, %arg1[%39] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii_0 {
    gpu.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg9 : i32 to index
      %2 = arith.index_cast %arg8 : i32 to index
      %3 = arith.index_cast %arg6 : i32 to index
      %4 = arith.index_cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = gpu.block_id  x
      %7 = arith.index_cast %6 : index to i32
      %8 = gpu.block_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.muli %arg2, %arg3 : i32
      %12 = arith.muli %11, %arg5 : i32
      scf.parallel (%arg10) = (%c0) to (%c32) step (%c1) {
        %13 = arith.index_cast %arg10 : index to i32
        %14 = arith.addi %10, %13 : i32
        %15 = arith.remsi %14, %arg5 : i32
        %16 = arith.muli %15, %arg7 : i32
        %17 = arith.index_cast %16 : i32 to index
        %18 = arith.index_cast %14 : i32 to index
        %19 = arith.remsi %18, %4 : index
        %20 = arith.addi %19, %4 : index
        %21 = arith.cmpi slt, %19, %c0 : index
        %22 = arith.select %21, %20, %19 : index
        %23 = arith.divsi %14, %arg5 : i32
        %24 = arith.remsi %23, %arg3 : i32
        %25 = arith.muli %24, %arg4 : i32
        %26 = arith.index_cast %25 : i32 to index
        %27 = arith.muli %24, %arg5 : i32
        %28 = arith.index_cast %27 : i32 to index
        %29 = arith.divsi %14, %5 : i32
        %30 = arith.muli %29, %arg3 : i32
        %31 = arith.muli %30, %arg4 : i32
        %32 = arith.index_cast %31 : i32 to index
        %33 = arith.muli %30, %arg5 : i32
        %34 = arith.index_cast %33 : i32 to index
        %35 = arith.cmpi slt, %14, %12 : i32
        scf.if %35 {
          %36 = arith.subi %17, %2 : index
          %37 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
            %40 = arith.muli %arg11, %1 : index
            %41 = arith.addi %40, %36 : index
            %42 = arith.cmpi sge, %41, %c0 : index
            %43 = arith.muli %40, %c-1 : index
            %44 = arith.subi %43, %17 : index
            %45 = arith.addi %44, %2 : index
            %46 = arith.addi %45, %0 : index
            %47 = arith.addi %46, %c-1 : index
            %48 = arith.cmpi sge, %47, %c0 : index
            %49 = arith.andi %42, %48 : i1
            %50 = scf.if %49 -> (f32) {
              %51 = arith.addi %40, %32 : index
              %52 = arith.addi %51, %26 : index
              %53 = arith.addi %52, %17 : index
              %54 = arith.subi %53, %2 : index
              %55 = memref.load %arg0[%54] : memref<?xf32>
              %56 = arith.cmpf ogt, %55, %arg12 : f32
              %57 = arith.select %56, %55, %arg12 : f32
              scf.yield %57 : f32
            } else {
              scf.yield %arg12 : f32
            }
            scf.yield %50 : f32
          }
          %38 = arith.addi %34, %28 : index
          %39 = arith.addi %38, %22 : index
          memref.store %37, %arg1[%39] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii_0 {
    gpu.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg9 : i32 to index
      %2 = arith.index_cast %arg8 : i32 to index
      %3 = arith.index_cast %arg6 : i32 to index
      %4 = arith.index_cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = gpu.block_id  x
      %7 = arith.index_cast %6 : index to i32
      %c32_0 = arith.constant 32 : index
      %8 = arith.index_cast %c32_0 : index to i32
      %9 = arith.muli %7, %8 : i32
      %10 = arith.muli %arg2, %arg3 : i32
      %11 = arith.muli %10, %arg5 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg10 = %c0 to %c32 step %c1_1 {
        %12 = arith.index_cast %arg10 : index to i32
        %13 = arith.addi %9, %12 : i32
        %14 = arith.remsi %13, %arg5 : i32
        %15 = arith.muli %14, %arg7 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.index_cast %13 : i32 to index
        %18 = arith.remsi %17, %4 : index
        %19 = arith.addi %18, %4 : index
        %20 = arith.cmpi slt, %18, %c0 : index
        %21 = arith.select %20, %19, %18 : index
        %22 = arith.divsi %13, %arg5 : i32
        %23 = arith.remsi %22, %arg3 : i32
        %24 = arith.muli %23, %arg4 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = arith.muli %23, %arg5 : i32
        %27 = arith.index_cast %26 : i32 to index
        %28 = arith.divsi %13, %5 : i32
        %29 = arith.muli %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = arith.index_cast %30 : i32 to index
        %32 = arith.muli %29, %arg5 : i32
        %33 = arith.index_cast %32 : i32 to index
        %34 = arith.cmpi slt, %13, %11 : i32
        scf.if %34 {
          %35 = arith.subi %16, %2 : index
          %36 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
            %39 = arith.muli %arg11, %1 : index
            %40 = arith.addi %39, %35 : index
            %41 = arith.cmpi sge, %40, %c0 : index
            %42 = arith.muli %39, %c-1 : index
            %43 = arith.subi %42, %16 : index
            %44 = arith.addi %43, %2 : index
            %45 = arith.addi %44, %0 : index
            %46 = arith.addi %45, %c-1 : index
            %47 = arith.cmpi sge, %46, %c0 : index
            %48 = arith.andi %41, %47 : i1
            %49 = scf.if %48 -> (f32) {
              %50 = arith.addi %39, %31 : index
              %51 = arith.addi %50, %25 : index
              %52 = arith.addi %51, %16 : index
              %53 = arith.subi %52, %2 : index
              %54 = memref.load %arg0[%53] : memref<?xf32>
              %55 = arith.cmpf ogt, %54, %arg12 : f32
              %56 = arith.select %55, %54, %arg12 : f32
              scf.yield %56 : f32
            } else {
              scf.yield %arg12 : f32
            }
            scf.yield %49 : f32
          }
          %37 = arith.addi %33, %27 : index
          %38 = arith.addi %37, %21 : index
          memref.store %36, %arg1[%38] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %arg9 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%4 = arith.index_cast %arg8 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %arg6 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg5 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%11 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%13 = arith.index_cast %12 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%20 = arith.index_cast %arg10 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %24 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%27 = arith.index_cast %22 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%36 = arith.index_cast %35 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%39 = arith.index_cast %38 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%44 = arith.index_cast %43 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%47 = arith.index_cast %46 : i32 to index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii_0 {
    gpu.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg4 : i32 to index
      %1 = emitc.cast %arg9 : i32 to index
      %2 = emitc.cast %arg8 : i32 to index
      %3 = emitc.cast %arg6 : i32 to index
      %4 = emitc.cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = "npu.block_id"() : () -> i64
      %7 = emitc.cast %6 : i64 to i32
      %c32_0 = arith.constant 32 : index
      %c32_i32 = arith.constant 32 : i32
      %8 = arith.muli %7, %c32_i32 : i32
      %9 = arith.muli %arg2, %arg3 : i32
      %10 = arith.muli %9, %arg5 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg10 = %c0 to %c32 step %c1_1 {
        %11 = builtin.unrealized_conversion_cast %arg10 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.addi %8, %12 : i32
        %14 = arith.remsi %13, %arg5 : i32
        %15 = arith.muli %14, %arg7 : i32
        %16 = emitc.cast %15 : i32 to index
        %17 = emitc.cast %13 : i32 to index
        %18 = arith.remsi %17, %4 : index
        %19 = arith.addi %18, %4 : index
        %20 = arith.cmpi slt, %18, %c0 : index
        %21 = arith.select %20, %19, %18 : index
        %22 = arith.divsi %13, %arg5 : i32
        %23 = arith.remsi %22, %arg3 : i32
        %24 = arith.muli %23, %arg4 : i32
        %25 = emitc.cast %24 : i32 to index
        %26 = arith.muli %23, %arg5 : i32
        %27 = emitc.cast %26 : i32 to index
        %28 = arith.divsi %13, %5 : i32
        %29 = arith.muli %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = emitc.cast %30 : i32 to index
        %32 = arith.muli %29, %arg5 : i32
        %33 = emitc.cast %32 : i32 to index
        %34 = arith.cmpi slt, %13, %10 : i32
        scf.if %34 {
          %35 = arith.subi %16, %2 : index
          %36 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
            %39 = arith.muli %arg11, %1 : index
            %40 = arith.addi %39, %35 : index
            %41 = arith.cmpi sge, %40, %c0 : index
            %42 = arith.muli %39, %c-1 : index
            %43 = arith.subi %42, %16 : index
            %44 = arith.addi %43, %2 : index
            %45 = arith.addi %44, %0 : index
            %46 = arith.addi %45, %c-1 : index
            %47 = arith.cmpi sge, %46, %c0 : index
            %48 = arith.andi %41, %47 : i1
            %49 = scf.if %48 -> (f32) {
              %50 = arith.addi %39, %31 : index
              %51 = arith.addi %50, %25 : index
              %52 = arith.addi %51, %16 : index
              %53 = arith.subi %52, %2 : index
              %54 = memref.load %arg0[%53] : memref<?xf32>
              %55 = arith.cmpf ogt, %54, %arg12 : f32
              %56 = arith.select %55, %54, %arg12 : f32
              scf.yield %56 : f32
            } else {
              scf.yield %arg12 : f32
            }
            scf.yield %49 : f32
          }
          %37 = arith.addi %33, %27 : index
          %38 = arith.addi %37, %21 : index
          memref.store %36, %arg1[%38] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii_0 {
    gpu.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg4 : i32 to index
      %1 = emitc.cast %arg9 : i32 to index
      %2 = emitc.cast %arg8 : i32 to index
      %3 = emitc.cast %arg6 : i32 to index
      %4 = emitc.cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = "npu.block_id"() : () -> i64
      %7 = emitc.cast %6 : i64 to i32
      %8 = arith.muli %7, %c32_i32 : i32
      %9 = arith.muli %arg2, %arg3 : i32
      %10 = arith.muli %9, %arg5 : i32
      scf.for %arg10 = %c0 to %c32 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg10 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.addi %8, %12 : i32
        %14 = arith.remsi %13, %arg5 : i32
        %15 = arith.muli %14, %arg7 : i32
        %16 = emitc.cast %15 : i32 to index
        %17 = emitc.cast %13 : i32 to index
        %18 = arith.remsi %17, %4 : index
        %19 = arith.addi %18, %4 : index
        %20 = arith.cmpi slt, %18, %c0 : index
        %21 = arith.select %20, %19, %18 : index
        %22 = arith.divsi %13, %arg5 : i32
        %23 = arith.remsi %22, %arg3 : i32
        %24 = arith.muli %23, %arg4 : i32
        %25 = emitc.cast %24 : i32 to index
        %26 = arith.muli %23, %arg5 : i32
        %27 = emitc.cast %26 : i32 to index
        %28 = arith.divsi %13, %5 : i32
        %29 = arith.muli %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = emitc.cast %30 : i32 to index
        %32 = arith.muli %29, %arg5 : i32
        %33 = emitc.cast %32 : i32 to index
        %34 = arith.cmpi slt, %13, %10 : i32
        scf.if %34 {
          %35 = arith.subi %16, %2 : index
          %36 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
            %39 = arith.muli %arg11, %1 : index
            %40 = arith.addi %39, %35 : index
            %41 = arith.cmpi sge, %40, %c0 : index
            %42 = arith.muli %39, %c-1 : index
            %43 = arith.subi %42, %16 : index
            %44 = arith.addi %43, %2 : index
            %45 = arith.addi %44, %0 : index
            %46 = arith.addi %45, %c-1 : index
            %47 = arith.cmpi sge, %46, %c0 : index
            %48 = arith.andi %41, %47 : i1
            %49 = scf.if %48 -> (f32) {
              %50 = arith.addi %39, %31 : index
              %51 = arith.addi %50, %25 : index
              %52 = arith.addi %51, %16 : index
              %53 = arith.subi %52, %2 : index
              %54 = memref.load %arg0[%53] : memref<?xf32>
              %55 = arith.cmpf ogt, %54, %arg12 : f32
              %56 = arith.select %55, %54, %arg12 : f32
              scf.yield %56 : f32
            } else {
              scf.yield %arg12 : f32
            }
            scf.yield %49 : f32
          }
          %37 = arith.addi %33, %27 : index
          %38 = arith.addi %37, %21 : index
          memref.store %36, %arg1[%38] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii_0 {
    gpu.func @_Z21maxpool1d_cuda_kernelPKfPfiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg4 : i32 to index
      %1 = emitc.cast %arg9 : i32 to index
      %2 = emitc.cast %arg8 : i32 to index
      %3 = emitc.cast %arg6 : i32 to index
      %4 = emitc.cast %arg5 : i32 to index
      %5 = arith.muli %arg3, %arg5 : i32
      %6 = "npu.block_id"() : () -> i64
      %7 = emitc.cast %6 : i64 to i32
      %8 = arith.muli %7, %c32_i32 : i32
      %9 = arith.muli %arg2, %arg3 : i32
      %10 = arith.muli %9, %arg5 : i32
      scf.for %arg10 = %c0 to %c32 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg10 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.addi %8, %12 : i32
        %14 = arith.remsi %13, %arg5 : i32
        %15 = arith.muli %14, %arg7 : i32
        %16 = emitc.cast %15 : i32 to index
        %17 = emitc.cast %13 : i32 to index
        %18 = arith.remsi %17, %4 : index
        %19 = arith.addi %18, %4 : index
        %20 = arith.cmpi slt, %18, %c0 : index
        %21 = arith.select %20, %19, %18 : index
        %22 = arith.divsi %13, %arg5 : i32
        %23 = arith.remsi %22, %arg3 : i32
        %24 = arith.muli %23, %arg4 : i32
        %25 = emitc.cast %24 : i32 to index
        %26 = arith.muli %23, %arg5 : i32
        %27 = emitc.cast %26 : i32 to index
        %28 = arith.divsi %13, %5 : i32
        %29 = arith.muli %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = emitc.cast %30 : i32 to index
        %32 = arith.muli %29, %arg5 : i32
        %33 = emitc.cast %32 : i32 to index
        %34 = arith.cmpi slt, %13, %10 : i32
        emitc.if %34 {
          %35 = arith.subi %16, %2 : index
          %36 = scf.for %arg11 = %c0 to %3 step %c1 iter_args(%arg12 = %cst) -> (f32) {
            %39 = arith.muli %arg11, %1 : index
            %40 = arith.addi %39, %35 : index
            %41 = arith.cmpi sge, %40, %c0 : index
            %42 = arith.muli %39, %c-1 : index
            %43 = arith.subi %42, %16 : index
            %44 = arith.addi %43, %2 : index
            %45 = arith.addi %44, %0 : index
            %46 = arith.addi %45, %c-1 : index
            %47 = arith.cmpi sge, %46, %c0 : index
            %48 = arith.andi %41, %47 : i1
            %49 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
            emitc.if %48 {
              %50 = arith.addi %39, %31 : index
              %51 = arith.addi %50, %25 : index
              %52 = arith.addi %51, %16 : index
              %53 = arith.subi %52, %2 : index
              %54 = memref.load %arg0[%53] : memref<?xf32>
              %55 = arith.cmpf ogt, %54, %arg12 : f32
              %56 = arith.select %55, %54, %arg12 : f32
              emitc.assign %56 : f32 to %49 : f32
            } else {
              emitc.assign %arg12 : f32 to %49 : f32
            }
            scf.yield %49 : f32
          }
          %37 = arith.addi %33, %27 : index
          %38 = arith.addi %37, %21 : index
          memref.store %36, %arg1[%38] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

