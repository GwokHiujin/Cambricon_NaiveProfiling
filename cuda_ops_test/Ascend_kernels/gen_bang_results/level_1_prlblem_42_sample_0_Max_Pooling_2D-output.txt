warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z37__device_stub__max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg11 : i32 to index
    %3 = arith.index_cast %arg10 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %5 = arith.index_cast %arg11 : i32 to index
    %6 = arith.index_cast %arg8 : i32 to index
    %7 = arith.index_cast %arg7 : i32 to index
    %8 = arith.muli %arg7, %arg6 : i32
    %9 = arith.muli %arg3, %arg6 : i32
    %10 = arith.muli %9, %arg7 : i32
    %11 = llvm.mlir.undef : i32
    %12 = llvm.mlir.undef : f32
    %13 = gpu.block_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = gpu.block_dim  x
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.muli %14, %16 : i32
    %18 = gpu.thread_id  x
    %19 = arith.index_cast %18 : index to i32
    %20 = arith.addi %17, %19 : i32
    %21 = arith.remsi %20, %arg7 : i32
    %22 = arith.muli %21, %arg9 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.index_cast %22 : i32 to index
    %25 = arith.index_cast %20 : i32 to index
    %26 = arith.divsi %20, %8 : i32
    %27 = arith.remsi %26, %arg3 : i32
    %28 = arith.muli %27, %arg4 : i32
    %29 = arith.muli %28, %arg5 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.muli %27, %arg6 : i32
    %32 = arith.muli %31, %arg7 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.divsi %20, %10 : i32
    %35 = arith.muli %34, %arg3 : i32
    %36 = arith.muli %35, %arg4 : i32
    %37 = arith.muli %36, %arg5 : i32
    %38 = arith.index_cast %37 : i32 to index
    %39 = arith.muli %34, %arg3 : i32
    %40 = arith.muli %39, %arg6 : i32
    %41 = arith.muli %40, %arg7 : i32
    %42 = arith.index_cast %41 : i32 to index
    %43 = arith.divsi %20, %arg7 : i32
    %44 = arith.remsi %43, %arg6 : i32
    %45 = arith.muli %44, %arg9 : i32
    %46 = arith.subi %45, %arg10 : i32
    %47 = arith.index_cast %46 : i32 to index
    %48 = arith.index_cast %46 : i32 to index
    %49 = arith.muli %44, %arg7 : i32
    %50 = arith.index_cast %49 : i32 to index
    %51 = arith.muli %arg2, %arg3 : i32
    %52 = arith.muli %51, %arg6 : i32
    %53 = arith.muli %52, %arg7 : i32
    %54 = arith.cmpi slt, %20, %53 : i32
    scf.if %54 {
      %55 = arith.subi %22, %arg10 : i32
      %56 = arith.addi %37, %29 : i32
      %57:3 = affine.for %arg12 = 0 to %6 iter_args(%arg13 = %12, %arg14 = %11, %arg15 = %cst) -> (f32, i32, f32) {
        %58 = arith.index_cast %arg12 : index to i32
        %59 = arith.muli %58, %arg11 : i32
        %60 = arith.addi %46, %59 : i32
        %61 = arith.muli %60, %arg5 : i32
        %62 = arith.addi %56, %61 : i32
        %63:3 = affine.for %arg16 = 0 to %6 iter_args(%arg17 = %arg13, %arg18 = %arg14, %arg19 = %arg15) -> (f32, i32, f32) {
          %64 = arith.index_cast %arg16 : index to i32
          %65 = arith.muli %64, %arg11 : i32
          %66 = arith.addi %55, %65 : i32
          %67:3 = affine.if affine_set<(d0, d1)[s0, s1, s2, s3, s4, s5] : (d0 * s1 + s0 >= 0, -(d0 * s1) - s0 + s2 - 1 >= 0, d1 * s1 + s3 - s4 >= 0, -(d1 * s1) - s3 + s4 + s5 - 1 >= 0)>(%arg12, %arg16)[%47, %2, %1, %23, %0, %4] -> (f32, i32, f32) {
            %68 = arith.addi %62, %66 : i32
            %69 = affine.load %arg0[%arg16 * symbol(%5) + symbol(%38) + symbol(%30) + symbol(%24) - symbol(%3) + (%arg12 * symbol(%5) + symbol(%48)) * symbol(%4)] : memref<?xf32>
            %70 = arith.cmpf ogt, %69, %arg19 : f32
            %71 = arith.select %70, %69, %arg19 : f32
            affine.yield %69, %68, %71 : f32, i32, f32
          } else {
            affine.yield %arg17, %arg18, %arg19 : f32, i32, f32
          }
          affine.yield %67#0, %67#1, %67#2 : f32, i32, f32
        }
        affine.yield %63#0, %63#1, %63#2 : f32, i32, f32
      }
      affine.store %57#2, %arg1[symbol(%42) + symbol(%33) + symbol(%50) + symbol(%25) mod symbol(%7)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg11 : i32 to index
    %3 = arith.index_cast %arg5 : i32 to index
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg7 : i32 to index
    %6 = arith.muli %arg7, %arg6 : i32
    %7 = arith.muli %arg3, %arg6 : i32
    %8 = arith.muli %7, %arg7 : i32
    %9 = llvm.mlir.undef : i32
    %10 = llvm.mlir.undef : f32
    %11 = gpu.block_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = gpu.thread_id  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.addi %15, %17 : i32
    %19 = arith.remsi %18, %arg7 : i32
    %20 = arith.muli %19, %arg9 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.index_cast %18 : i32 to index
    %23 = arith.remsi %22, %5 : index
    %24 = arith.addi %23, %5 : index
    %25 = arith.cmpi slt, %23, %c0 : index
    %26 = arith.select %25, %24, %23 : index
    %27 = arith.divsi %18, %6 : i32
    %28 = arith.remsi %27, %arg3 : i32
    %29 = arith.muli %28, %arg4 : i32
    %30 = arith.muli %29, %arg5 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %28, %arg6 : i32
    %33 = arith.muli %32, %arg7 : i32
    %34 = arith.index_cast %33 : i32 to index
    %35 = arith.divsi %18, %8 : i32
    %36 = arith.muli %35, %arg3 : i32
    %37 = arith.muli %36, %arg4 : i32
    %38 = arith.muli %37, %arg5 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.muli %36, %arg6 : i32
    %41 = arith.muli %40, %arg7 : i32
    %42 = arith.index_cast %41 : i32 to index
    %43 = arith.divsi %18, %arg7 : i32
    %44 = arith.remsi %43, %arg6 : i32
    %45 = arith.muli %44, %arg9 : i32
    %46 = arith.subi %45, %arg10 : i32
    %47 = arith.index_cast %46 : i32 to index
    %48 = arith.muli %44, %arg7 : i32
    %49 = arith.index_cast %48 : i32 to index
    %50 = arith.muli %arg2, %arg3 : i32
    %51 = arith.muli %50, %arg6 : i32
    %52 = arith.muli %51, %arg7 : i32
    %53 = arith.cmpi slt, %18, %52 : i32
    scf.if %53 {
      %54 = arith.subi %20, %arg10 : i32
      %55 = arith.addi %38, %30 : i32
      %56:3 = affine.for %arg12 = 0 to %4 iter_args(%arg13 = %10, %arg14 = %9, %arg15 = %cst) -> (f32, i32, f32) {
        %57 = arith.index_cast %arg12 : index to i32
        %58 = arith.muli %57, %arg11 : i32
        %59 = arith.addi %46, %58 : i32
        %60 = arith.muli %59, %arg5 : i32
        %61 = arith.addi %55, %60 : i32
        %62:3 = affine.for %arg16 = 0 to %4 iter_args(%arg17 = %arg13, %arg18 = %arg14, %arg19 = %arg15) -> (f32, i32, f32) {
          %63 = arith.index_cast %arg16 : index to i32
          %64 = arith.muli %63, %arg11 : i32
          %65 = arith.addi %54, %64 : i32
          %66:3 = affine.if affine_set<(d0, d1)[s0, s1, s2, s3, s4, s5] : (-(d0 * s0) - s1 + s2 + s3 - 1 >= 0, d0 * s0 + s1 - s2 >= 0, d1 * s0 + s4 >= 0, -(d1 * s0) - s4 + s5 - 1 >= 0)>(%arg16, %arg12)[%2, %21, %0, %3, %47, %1] -> (f32, i32, f32) {
            %67 = arith.addi %61, %65 : i32
            %68 = affine.load %arg0[%arg16 * symbol(%2) + symbol(%39) + symbol(%31) + symbol(%21) - symbol(%0) + (%arg12 * symbol(%2) + symbol(%47)) * symbol(%3)] : memref<?xf32>
            %69 = arith.cmpf ogt, %68, %arg19 : f32
            %70 = arith.select %69, %68, %arg19 : f32
            affine.yield %68, %67, %70 : f32, i32, f32
          } else {
            affine.yield %arg17, %arg18, %arg19 : f32, i32, f32
          }
          affine.yield %66#0, %66#1, %66#2 : f32, i32, f32
        }
        affine.yield %62#0, %62#1, %62#2 : f32, i32, f32
      }
      affine.store %56#2, %arg1[symbol(%42) + symbol(%34) + symbol(%49) + symbol(%26)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg11 : i32 to index
    %3 = arith.index_cast %arg5 : i32 to index
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg7 : i32 to index
    %6 = arith.muli %arg7, %arg6 : i32
    %7 = arith.muli %arg3, %arg6 : i32
    %8 = arith.muli %7, %arg7 : i32
    %9 = llvm.mlir.undef : i32
    %10 = llvm.mlir.undef : f32
    %11 = gpu.block_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = gpu.thread_id  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.addi %15, %17 : i32
    %19 = arith.remsi %18, %arg7 : i32
    %20 = arith.muli %19, %arg9 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.index_cast %18 : i32 to index
    %23 = arith.remsi %22, %5 : index
    %24 = arith.addi %23, %5 : index
    %25 = arith.cmpi slt, %23, %c0 : index
    %26 = arith.select %25, %24, %23 : index
    %27 = arith.divsi %18, %6 : i32
    %28 = arith.remsi %27, %arg3 : i32
    %29 = arith.muli %28, %arg4 : i32
    %30 = arith.muli %29, %arg5 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %28, %arg6 : i32
    %33 = arith.muli %32, %arg7 : i32
    %34 = arith.index_cast %33 : i32 to index
    %35 = arith.divsi %18, %8 : i32
    %36 = arith.muli %35, %arg3 : i32
    %37 = arith.muli %36, %arg4 : i32
    %38 = arith.muli %37, %arg5 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.muli %36, %arg6 : i32
    %41 = arith.muli %40, %arg7 : i32
    %42 = arith.index_cast %41 : i32 to index
    %43 = arith.divsi %18, %arg7 : i32
    %44 = arith.remsi %43, %arg6 : i32
    %45 = arith.muli %44, %arg9 : i32
    %46 = arith.subi %45, %arg10 : i32
    %47 = arith.index_cast %46 : i32 to index
    %48 = arith.muli %44, %arg7 : i32
    %49 = arith.index_cast %48 : i32 to index
    %50 = arith.muli %arg2, %arg3 : i32
    %51 = arith.muli %50, %arg6 : i32
    %52 = arith.muli %51, %arg7 : i32
    %53 = arith.cmpi slt, %18, %52 : i32
    scf.if %53 {
      %54 = arith.subi %20, %arg10 : i32
      %55 = arith.addi %38, %30 : i32
      %56:3 = scf.for %arg12 = %c0 to %4 step %c1 iter_args(%arg13 = %10, %arg14 = %9, %arg15 = %cst) -> (f32, i32, f32) {
        %60 = arith.index_cast %arg12 : index to i32
        %61 = arith.muli %60, %arg11 : i32
        %62 = arith.addi %46, %61 : i32
        %63 = arith.muli %62, %arg5 : i32
        %64 = arith.addi %55, %63 : i32
        %65:3 = scf.for %arg16 = %c0 to %4 step %c1 iter_args(%arg17 = %arg13, %arg18 = %arg14, %arg19 = %arg15) -> (f32, i32, f32) {
          %66 = arith.index_cast %arg16 : index to i32
          %67 = arith.muli %66, %arg11 : i32
          %68 = arith.addi %54, %67 : i32
          %69 = arith.muli %arg16, %2 : index
          %70 = arith.muli %69, %c-1 : index
          %71 = arith.subi %70, %21 : index
          %72 = arith.addi %71, %0 : index
          %73 = arith.addi %72, %3 : index
          %74 = arith.addi %73, %c-1 : index
          %75 = arith.cmpi sge, %74, %c0 : index
          %76 = arith.subi %21, %0 : index
          %77 = arith.addi %69, %76 : index
          %78 = arith.cmpi sge, %77, %c0 : index
          %79 = arith.andi %75, %78 : i1
          %80 = arith.muli %arg12, %2 : index
          %81 = arith.addi %80, %47 : index
          %82 = arith.cmpi sge, %81, %c0 : index
          %83 = arith.andi %79, %82 : i1
          %84 = arith.muli %80, %c-1 : index
          %85 = arith.subi %84, %47 : index
          %86 = arith.addi %85, %1 : index
          %87 = arith.addi %86, %c-1 : index
          %88 = arith.cmpi sge, %87, %c0 : index
          %89 = arith.andi %83, %88 : i1
          %90:3 = scf.if %89 -> (f32, i32, f32) {
            %91 = arith.addi %64, %68 : i32
            %92 = arith.addi %69, %39 : index
            %93 = arith.addi %92, %31 : index
            %94 = arith.addi %93, %21 : index
            %95 = arith.subi %94, %0 : index
            %96 = arith.muli %81, %3 : index
            %97 = arith.addi %95, %96 : index
            %98 = memref.load %arg0[%97] : memref<?xf32>
            %99 = arith.cmpf ogt, %98, %arg19 : f32
            %100 = arith.select %99, %98, %arg19 : f32
            scf.yield %98, %91, %100 : f32, i32, f32
          } else {
            scf.yield %arg17, %arg18, %arg19 : f32, i32, f32
          }
          scf.yield %90#0, %90#1, %90#2 : f32, i32, f32
        }
        scf.yield %65#0, %65#1, %65#2 : f32, i32, f32
      }
      %57 = arith.addi %42, %34 : index
      %58 = arith.addi %57, %49 : index
      %59 = arith.addi %58, %26 : index
      memref.store %56#2, %arg1[%59] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg12) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg11 : i32 to index
      %3 = arith.index_cast %arg5 : i32 to index
      %4 = arith.index_cast %arg8 : i32 to index
      %5 = arith.index_cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %13 = gpu.block_dim  x
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %12, %14 : i32
      %16 = arith.index_cast %arg12 : index to i32
      %17 = arith.addi %15, %16 : i32
      %18 = arith.remsi %17, %arg7 : i32
      %19 = arith.muli %18, %arg9 : i32
      %20 = arith.index_cast %19 : i32 to index
      %21 = arith.index_cast %17 : i32 to index
      %22 = arith.remsi %21, %5 : index
      %23 = arith.addi %22, %5 : index
      %24 = arith.cmpi slt, %22, %c0_1 : index
      %25 = arith.select %24, %23, %22 : index
      %26 = arith.divsi %17, %6 : i32
      %27 = arith.remsi %26, %arg3 : i32
      %28 = arith.muli %27, %arg4 : i32
      %29 = arith.muli %28, %arg5 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.muli %27, %arg6 : i32
      %32 = arith.muli %31, %arg7 : i32
      %33 = arith.index_cast %32 : i32 to index
      %34 = arith.divsi %17, %8 : i32
      %35 = arith.muli %34, %arg3 : i32
      %36 = arith.muli %35, %arg4 : i32
      %37 = arith.muli %36, %arg5 : i32
      %38 = arith.index_cast %37 : i32 to index
      %39 = arith.muli %35, %arg6 : i32
      %40 = arith.muli %39, %arg7 : i32
      %41 = arith.index_cast %40 : i32 to index
      %42 = arith.divsi %17, %arg7 : i32
      %43 = arith.remsi %42, %arg6 : i32
      %44 = arith.muli %43, %arg9 : i32
      %45 = arith.subi %44, %arg10 : i32
      %46 = arith.index_cast %45 : i32 to index
      %47 = arith.muli %43, %arg7 : i32
      %48 = arith.index_cast %47 : i32 to index
      %49 = arith.muli %arg2, %arg3 : i32
      %50 = arith.muli %49, %arg6 : i32
      %51 = arith.muli %50, %arg7 : i32
      %52 = arith.cmpi slt, %17, %51 : i32
      scf.if %52 {
        %53 = arith.subi %19, %arg10 : i32
        %54 = arith.addi %37, %29 : i32
        %55:3 = scf.for %arg13 = %c0_1 to %4 step %c1_0 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
          %59 = arith.index_cast %arg13 : index to i32
          %60 = arith.muli %59, %arg11 : i32
          %61 = arith.addi %45, %60 : i32
          %62 = arith.muli %61, %arg5 : i32
          %63 = arith.addi %54, %62 : i32
          %64:3 = scf.for %arg17 = %c0_1 to %4 step %c1_0 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
            %65 = arith.index_cast %arg17 : index to i32
            %66 = arith.muli %65, %arg11 : i32
            %67 = arith.addi %53, %66 : i32
            %68 = arith.muli %arg17, %2 : index
            %69 = arith.muli %68, %c-1 : index
            %70 = arith.subi %69, %20 : index
            %71 = arith.addi %70, %0 : index
            %72 = arith.addi %71, %3 : index
            %73 = arith.addi %72, %c-1 : index
            %74 = arith.cmpi sge, %73, %c0_1 : index
            %75 = arith.subi %20, %0 : index
            %76 = arith.addi %68, %75 : index
            %77 = arith.cmpi sge, %76, %c0_1 : index
            %78 = arith.andi %74, %77 : i1
            %79 = arith.muli %arg13, %2 : index
            %80 = arith.addi %79, %46 : index
            %81 = arith.cmpi sge, %80, %c0_1 : index
            %82 = arith.andi %78, %81 : i1
            %83 = arith.muli %79, %c-1 : index
            %84 = arith.subi %83, %46 : index
            %85 = arith.addi %84, %1 : index
            %86 = arith.addi %85, %c-1 : index
            %87 = arith.cmpi sge, %86, %c0_1 : index
            %88 = arith.andi %82, %87 : i1
            %89:3 = scf.if %88 -> (f32, i32, f32) {
              %90 = arith.addi %63, %67 : i32
              %91 = arith.addi %68, %38 : index
              %92 = arith.addi %91, %30 : index
              %93 = arith.addi %92, %20 : index
              %94 = arith.subi %93, %0 : index
              %95 = arith.muli %80, %3 : index
              %96 = arith.addi %94, %95 : index
              %97 = memref.load %arg0[%96] : memref<?xf32>
              %98 = arith.cmpf ogt, %97, %arg20 : f32
              %99 = arith.select %98, %97, %arg20 : f32
              scf.yield %97, %90, %99 : f32, i32, f32
            } else {
              scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
            }
            scf.yield %89#0, %89#1, %89#2 : f32, i32, f32
          }
          scf.yield %64#0, %64#1, %64#2 : f32, i32, f32
        }
        %56 = arith.addi %41, %33 : index
        %57 = arith.addi %56, %48 : index
        %58 = arith.addi %57, %25 : index
        memref.store %55#2, %arg1[%58] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg12) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg11 : i32 to index
      %3 = arith.index_cast %arg5 : i32 to index
      %4 = arith.index_cast %arg8 : i32 to index
      %5 = arith.index_cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %13 = gpu.block_dim  x
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %12, %14 : i32
      %16 = arith.index_cast %arg12 : index to i32
      %17 = arith.addi %15, %16 : i32
      %18 = arith.remsi %17, %arg7 : i32
      %19 = arith.muli %18, %arg9 : i32
      %20 = arith.index_cast %19 : i32 to index
      %21 = arith.index_cast %17 : i32 to index
      %22 = arith.remsi %21, %5 : index
      %23 = arith.addi %22, %5 : index
      %24 = arith.cmpi slt, %22, %c0_1 : index
      %25 = arith.select %24, %23, %22 : index
      %26 = arith.divsi %17, %6 : i32
      %27 = arith.remsi %26, %arg3 : i32
      %28 = arith.muli %27, %arg4 : i32
      %29 = arith.muli %28, %arg5 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.muli %27, %arg6 : i32
      %32 = arith.muli %31, %arg7 : i32
      %33 = arith.index_cast %32 : i32 to index
      %34 = arith.divsi %17, %8 : i32
      %35 = arith.muli %34, %arg3 : i32
      %36 = arith.muli %35, %arg4 : i32
      %37 = arith.muli %36, %arg5 : i32
      %38 = arith.index_cast %37 : i32 to index
      %39 = arith.muli %35, %arg6 : i32
      %40 = arith.muli %39, %arg7 : i32
      %41 = arith.index_cast %40 : i32 to index
      %42 = arith.divsi %17, %arg7 : i32
      %43 = arith.remsi %42, %arg6 : i32
      %44 = arith.muli %43, %arg9 : i32
      %45 = arith.subi %44, %arg10 : i32
      %46 = arith.index_cast %45 : i32 to index
      %47 = arith.muli %43, %arg7 : i32
      %48 = arith.index_cast %47 : i32 to index
      %49 = arith.muli %arg2, %arg3 : i32
      %50 = arith.muli %49, %arg6 : i32
      %51 = arith.muli %50, %arg7 : i32
      %52 = arith.cmpi slt, %17, %51 : i32
      scf.if %52 {
        %53 = arith.subi %19, %arg10 : i32
        %54 = arith.addi %37, %29 : i32
        %55:3 = scf.for %arg13 = %c0_1 to %4 step %c1_0 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
          %59 = arith.index_cast %arg13 : index to i32
          %60 = arith.muli %59, %arg11 : i32
          %61 = arith.addi %45, %60 : i32
          %62 = arith.muli %61, %arg5 : i32
          %63 = arith.addi %54, %62 : i32
          %64:3 = scf.for %arg17 = %c0_1 to %4 step %c1_0 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
            %65 = arith.index_cast %arg17 : index to i32
            %66 = arith.muli %65, %arg11 : i32
            %67 = arith.addi %53, %66 : i32
            %68 = arith.muli %arg17, %2 : index
            %69 = arith.muli %68, %c-1 : index
            %70 = arith.subi %69, %20 : index
            %71 = arith.addi %70, %0 : index
            %72 = arith.addi %71, %3 : index
            %73 = arith.addi %72, %c-1 : index
            %74 = arith.cmpi sge, %73, %c0_1 : index
            %75 = arith.subi %20, %0 : index
            %76 = arith.addi %68, %75 : index
            %77 = arith.cmpi sge, %76, %c0_1 : index
            %78 = arith.andi %74, %77 : i1
            %79 = arith.muli %arg13, %2 : index
            %80 = arith.addi %79, %46 : index
            %81 = arith.cmpi sge, %80, %c0_1 : index
            %82 = arith.andi %78, %81 : i1
            %83 = arith.muli %79, %c-1 : index
            %84 = arith.subi %83, %46 : index
            %85 = arith.addi %84, %1 : index
            %86 = arith.addi %85, %c-1 : index
            %87 = arith.cmpi sge, %86, %c0_1 : index
            %88 = arith.andi %82, %87 : i1
            %89:3 = scf.if %88 -> (f32, i32, f32) {
              %90 = arith.addi %63, %67 : i32
              %91 = arith.addi %68, %38 : index
              %92 = arith.addi %91, %30 : index
              %93 = arith.addi %92, %20 : index
              %94 = arith.subi %93, %0 : index
              %95 = arith.muli %80, %3 : index
              %96 = arith.addi %94, %95 : index
              %97 = memref.load %arg0[%96] : memref<?xf32>
              %98 = arith.cmpf ogt, %97, %arg20 : f32
              %99 = arith.select %98, %97, %arg20 : f32
              scf.yield %97, %90, %99 : f32, i32, f32
            } else {
              scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
            }
            scf.yield %89#0, %89#1, %89#2 : f32, i32, f32
          }
          scf.yield %64#0, %64#1, %64#2 : f32, i32, f32
        }
        %56 = arith.addi %41, %33 : index
        %57 = arith.addi %56, %48 : index
        %58 = arith.addi %57, %25 : index
        memref.store %55#2, %arg1[%58] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg11 : i32 to index
    %3 = arith.index_cast %arg5 : i32 to index
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg7 : i32 to index
    %6 = arith.muli %arg7, %arg6 : i32
    %7 = arith.muli %arg3, %arg6 : i32
    %8 = arith.muli %7, %arg7 : i32
    %9 = llvm.mlir.undef : i32
    %10 = llvm.mlir.undef : f32
    %11 = gpu.block_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = arith.muli %arg2, %arg3 : i32
    %17 = arith.muli %16, %arg6 : i32
    %18 = arith.muli %17, %arg7 : i32
    scf.parallel (%arg12) = (%c0) to (%c32) step (%c1) {
      %19 = arith.index_cast %arg12 : index to i32
      %20 = arith.addi %15, %19 : i32
      %21 = arith.remsi %20, %arg7 : i32
      %22 = arith.muli %21, %arg9 : i32
      %23 = arith.index_cast %22 : i32 to index
      %24 = arith.index_cast %20 : i32 to index
      %25 = arith.remsi %24, %5 : index
      %26 = arith.addi %25, %5 : index
      %27 = arith.cmpi slt, %25, %c0 : index
      %28 = arith.select %27, %26, %25 : index
      %29 = arith.divsi %20, %6 : i32
      %30 = arith.remsi %29, %arg3 : i32
      %31 = arith.muli %30, %arg4 : i32
      %32 = arith.muli %31, %arg5 : i32
      %33 = arith.index_cast %32 : i32 to index
      %34 = arith.muli %30, %arg6 : i32
      %35 = arith.muli %34, %arg7 : i32
      %36 = arith.index_cast %35 : i32 to index
      %37 = arith.divsi %20, %8 : i32
      %38 = arith.muli %37, %arg3 : i32
      %39 = arith.muli %38, %arg4 : i32
      %40 = arith.muli %39, %arg5 : i32
      %41 = arith.index_cast %40 : i32 to index
      %42 = arith.muli %38, %arg6 : i32
      %43 = arith.muli %42, %arg7 : i32
      %44 = arith.index_cast %43 : i32 to index
      %45 = arith.divsi %20, %arg7 : i32
      %46 = arith.remsi %45, %arg6 : i32
      %47 = arith.muli %46, %arg9 : i32
      %48 = arith.subi %47, %arg10 : i32
      %49 = arith.index_cast %48 : i32 to index
      %50 = arith.muli %46, %arg7 : i32
      %51 = arith.index_cast %50 : i32 to index
      %52 = arith.cmpi slt, %20, %18 : i32
      scf.if %52 {
        %53 = arith.subi %22, %arg10 : i32
        %54 = arith.addi %40, %32 : i32
        %55 = arith.subi %23, %0 : index
        %56:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
          %60 = arith.index_cast %arg13 : index to i32
          %61 = arith.muli %60, %arg11 : i32
          %62 = arith.addi %48, %61 : i32
          %63 = arith.muli %62, %arg5 : i32
          %64 = arith.addi %54, %63 : i32
          %65 = arith.muli %arg13, %2 : index
          %66 = arith.addi %65, %49 : index
          %67 = arith.cmpi sge, %66, %c0 : index
          %68 = arith.muli %65, %c-1 : index
          %69 = arith.subi %68, %49 : index
          %70 = arith.addi %69, %1 : index
          %71 = arith.addi %70, %c-1 : index
          %72 = arith.cmpi sge, %71, %c0 : index
          %73 = arith.muli %66, %3 : index
          %74:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
            %75 = arith.index_cast %arg17 : index to i32
            %76 = arith.muli %75, %arg11 : i32
            %77 = arith.addi %53, %76 : i32
            %78 = arith.muli %arg17, %2 : index
            %79 = arith.muli %78, %c-1 : index
            %80 = arith.subi %79, %23 : index
            %81 = arith.addi %80, %0 : index
            %82 = arith.addi %81, %3 : index
            %83 = arith.addi %82, %c-1 : index
            %84 = arith.cmpi sge, %83, %c0 : index
            %85 = arith.addi %78, %55 : index
            %86 = arith.cmpi sge, %85, %c0 : index
            %87 = arith.andi %84, %86 : i1
            %88 = arith.andi %87, %67 : i1
            %89 = arith.andi %88, %72 : i1
            %90:3 = scf.if %89 -> (f32, i32, f32) {
              %91 = arith.addi %64, %77 : i32
              %92 = arith.addi %78, %41 : index
              %93 = arith.addi %92, %33 : index
              %94 = arith.addi %93, %23 : index
              %95 = arith.subi %94, %0 : index
              %96 = arith.addi %95, %73 : index
              %97 = memref.load %arg0[%96] : memref<?xf32>
              %98 = arith.cmpf ogt, %97, %arg20 : f32
              %99 = arith.select %98, %97, %arg20 : f32
              scf.yield %97, %91, %99 : f32, i32, f32
            } else {
              scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
            }
            scf.yield %90#0, %90#1, %90#2 : f32, i32, f32
          }
          scf.yield %74#0, %74#1, %74#2 : f32, i32, f32
        }
        %57 = arith.addi %44, %36 : index
        %58 = arith.addi %57, %51 : index
        %59 = arith.addi %58, %28 : index
        memref.store %56#2, %arg1[%59] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii_0 {
    gpu.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg11 : i32 to index
      %3 = arith.index_cast %arg5 : i32 to index
      %4 = arith.index_cast %arg8 : i32 to index
      %5 = arith.index_cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %13 = gpu.block_dim  x
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %12, %14 : i32
      %16 = arith.muli %arg2, %arg3 : i32
      %17 = arith.muli %16, %arg6 : i32
      %18 = arith.muli %17, %arg7 : i32
      scf.parallel (%arg12) = (%c0) to (%c32) step (%c1) {
        %19 = arith.index_cast %arg12 : index to i32
        %20 = arith.addi %15, %19 : i32
        %21 = arith.remsi %20, %arg7 : i32
        %22 = arith.muli %21, %arg9 : i32
        %23 = arith.index_cast %22 : i32 to index
        %24 = arith.index_cast %20 : i32 to index
        %25 = arith.remsi %24, %5 : index
        %26 = arith.addi %25, %5 : index
        %27 = arith.cmpi slt, %25, %c0 : index
        %28 = arith.select %27, %26, %25 : index
        %29 = arith.divsi %20, %6 : i32
        %30 = arith.remsi %29, %arg3 : i32
        %31 = arith.muli %30, %arg4 : i32
        %32 = arith.muli %31, %arg5 : i32
        %33 = arith.index_cast %32 : i32 to index
        %34 = arith.muli %30, %arg6 : i32
        %35 = arith.muli %34, %arg7 : i32
        %36 = arith.index_cast %35 : i32 to index
        %37 = arith.divsi %20, %8 : i32
        %38 = arith.muli %37, %arg3 : i32
        %39 = arith.muli %38, %arg4 : i32
        %40 = arith.muli %39, %arg5 : i32
        %41 = arith.index_cast %40 : i32 to index
        %42 = arith.muli %38, %arg6 : i32
        %43 = arith.muli %42, %arg7 : i32
        %44 = arith.index_cast %43 : i32 to index
        %45 = arith.divsi %20, %arg7 : i32
        %46 = arith.remsi %45, %arg6 : i32
        %47 = arith.muli %46, %arg9 : i32
        %48 = arith.subi %47, %arg10 : i32
        %49 = arith.index_cast %48 : i32 to index
        %50 = arith.muli %46, %arg7 : i32
        %51 = arith.index_cast %50 : i32 to index
        %52 = arith.cmpi slt, %20, %18 : i32
        scf.if %52 {
          %53 = arith.subi %22, %arg10 : i32
          %54 = arith.addi %40, %32 : i32
          %55 = arith.subi %23, %0 : index
          %56:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
            %60 = arith.index_cast %arg13 : index to i32
            %61 = arith.muli %60, %arg11 : i32
            %62 = arith.addi %48, %61 : i32
            %63 = arith.muli %62, %arg5 : i32
            %64 = arith.addi %54, %63 : i32
            %65 = arith.muli %arg13, %2 : index
            %66 = arith.addi %65, %49 : index
            %67 = arith.cmpi sge, %66, %c0 : index
            %68 = arith.muli %65, %c-1 : index
            %69 = arith.subi %68, %49 : index
            %70 = arith.addi %69, %1 : index
            %71 = arith.addi %70, %c-1 : index
            %72 = arith.cmpi sge, %71, %c0 : index
            %73 = arith.muli %66, %3 : index
            %74:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
              %75 = arith.index_cast %arg17 : index to i32
              %76 = arith.muli %75, %arg11 : i32
              %77 = arith.addi %53, %76 : i32
              %78 = arith.muli %arg17, %2 : index
              %79 = arith.muli %78, %c-1 : index
              %80 = arith.subi %79, %23 : index
              %81 = arith.addi %80, %0 : index
              %82 = arith.addi %81, %3 : index
              %83 = arith.addi %82, %c-1 : index
              %84 = arith.cmpi sge, %83, %c0 : index
              %85 = arith.addi %78, %55 : index
              %86 = arith.cmpi sge, %85, %c0 : index
              %87 = arith.andi %84, %86 : i1
              %88 = arith.andi %87, %67 : i1
              %89 = arith.andi %88, %72 : i1
              %90:3 = scf.if %89 -> (f32, i32, f32) {
                %91 = arith.addi %64, %77 : i32
                %92 = arith.addi %78, %41 : index
                %93 = arith.addi %92, %33 : index
                %94 = arith.addi %93, %23 : index
                %95 = arith.subi %94, %0 : index
                %96 = arith.addi %95, %73 : index
                %97 = memref.load %arg0[%96] : memref<?xf32>
                %98 = arith.cmpf ogt, %97, %arg20 : f32
                %99 = arith.select %98, %97, %arg20 : f32
                scf.yield %97, %91, %99 : f32, i32, f32
              } else {
                scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
              }
              scf.yield %90#0, %90#1, %90#2 : f32, i32, f32
            }
            scf.yield %74#0, %74#1, %74#2 : f32, i32, f32
          }
          %57 = arith.addi %44, %36 : index
          %58 = arith.addi %57, %51 : index
          %59 = arith.addi %58, %28 : index
          memref.store %56#2, %arg1[%59] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii_0 {
    gpu.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg11 : i32 to index
      %3 = arith.index_cast %arg5 : i32 to index
      %4 = arith.index_cast %arg8 : i32 to index
      %5 = arith.index_cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %c32_0 = arith.constant 32 : index
      %13 = arith.index_cast %c32_0 : index to i32
      %14 = arith.muli %12, %13 : i32
      %15 = arith.muli %arg2, %arg3 : i32
      %16 = arith.muli %15, %arg6 : i32
      %17 = arith.muli %16, %arg7 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg12 = %c0 to %c32 step %c1_1 {
        %18 = arith.index_cast %arg12 : index to i32
        %19 = arith.addi %14, %18 : i32
        %20 = arith.remsi %19, %arg7 : i32
        %21 = arith.muli %20, %arg9 : i32
        %22 = arith.index_cast %21 : i32 to index
        %23 = arith.index_cast %19 : i32 to index
        %24 = arith.remsi %23, %5 : index
        %25 = arith.addi %24, %5 : index
        %26 = arith.cmpi slt, %24, %c0 : index
        %27 = arith.select %26, %25, %24 : index
        %28 = arith.divsi %19, %6 : i32
        %29 = arith.remsi %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = arith.muli %30, %arg5 : i32
        %32 = arith.index_cast %31 : i32 to index
        %33 = arith.muli %29, %arg6 : i32
        %34 = arith.muli %33, %arg7 : i32
        %35 = arith.index_cast %34 : i32 to index
        %36 = arith.divsi %19, %8 : i32
        %37 = arith.muli %36, %arg3 : i32
        %38 = arith.muli %37, %arg4 : i32
        %39 = arith.muli %38, %arg5 : i32
        %40 = arith.index_cast %39 : i32 to index
        %41 = arith.muli %37, %arg6 : i32
        %42 = arith.muli %41, %arg7 : i32
        %43 = arith.index_cast %42 : i32 to index
        %44 = arith.divsi %19, %arg7 : i32
        %45 = arith.remsi %44, %arg6 : i32
        %46 = arith.muli %45, %arg9 : i32
        %47 = arith.subi %46, %arg10 : i32
        %48 = arith.index_cast %47 : i32 to index
        %49 = arith.muli %45, %arg7 : i32
        %50 = arith.index_cast %49 : i32 to index
        %51 = arith.cmpi slt, %19, %17 : i32
        scf.if %51 {
          %52 = arith.subi %21, %arg10 : i32
          %53 = arith.addi %39, %31 : i32
          %54 = arith.subi %22, %0 : index
          %55:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
            %59 = arith.index_cast %arg13 : index to i32
            %60 = arith.muli %59, %arg11 : i32
            %61 = arith.addi %47, %60 : i32
            %62 = arith.muli %61, %arg5 : i32
            %63 = arith.addi %53, %62 : i32
            %64 = arith.muli %arg13, %2 : index
            %65 = arith.addi %64, %48 : index
            %66 = arith.cmpi sge, %65, %c0 : index
            %67 = arith.muli %64, %c-1 : index
            %68 = arith.subi %67, %48 : index
            %69 = arith.addi %68, %1 : index
            %70 = arith.addi %69, %c-1 : index
            %71 = arith.cmpi sge, %70, %c0 : index
            %72 = arith.muli %65, %3 : index
            %73:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
              %74 = arith.index_cast %arg17 : index to i32
              %75 = arith.muli %74, %arg11 : i32
              %76 = arith.addi %52, %75 : i32
              %77 = arith.muli %arg17, %2 : index
              %78 = arith.muli %77, %c-1 : index
              %79 = arith.subi %78, %22 : index
              %80 = arith.addi %79, %0 : index
              %81 = arith.addi %80, %3 : index
              %82 = arith.addi %81, %c-1 : index
              %83 = arith.cmpi sge, %82, %c0 : index
              %84 = arith.addi %77, %54 : index
              %85 = arith.cmpi sge, %84, %c0 : index
              %86 = arith.andi %83, %85 : i1
              %87 = arith.andi %86, %66 : i1
              %88 = arith.andi %87, %71 : i1
              %89:3 = scf.if %88 -> (f32, i32, f32) {
                %90 = arith.addi %63, %76 : i32
                %91 = arith.addi %77, %40 : index
                %92 = arith.addi %91, %32 : index
                %93 = arith.addi %92, %22 : index
                %94 = arith.subi %93, %0 : index
                %95 = arith.addi %94, %72 : index
                %96 = memref.load %arg0[%95] : memref<?xf32>
                %97 = arith.cmpf ogt, %96, %arg20 : f32
                %98 = arith.select %97, %96, %arg20 : f32
                scf.yield %96, %90, %98 : f32, i32, f32
              } else {
                scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
              }
              scf.yield %89#0, %89#1, %89#2 : f32, i32, f32
            }
            scf.yield %73#0, %73#1, %73#2 : f32, i32, f32
          }
          %56 = arith.addi %43, %35 : index
          %57 = arith.addi %56, %50 : index
          %58 = arith.addi %57, %27 : index
          memref.store %55#2, %arg1[%58] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg10 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%4 = arith.index_cast %arg11 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %arg5 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg8 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%10 = arith.index_cast %arg7 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%17 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = arith.index_cast %18 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%27 = arith.index_cast %arg12 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%32 = arith.index_cast %31 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%34 = arith.index_cast %29 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%44 = arith.index_cast %43 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%48 = arith.index_cast %47 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%54 = arith.index_cast %53 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%58 = arith.index_cast %57 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%64 = arith.index_cast %63 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%67 = arith.index_cast %66 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%78 = arith.index_cast %arg13 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%95 = arith.index_cast %arg17 : index to i32
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii_0 {
    gpu.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg10 : i32 to index
      %1 = emitc.cast %arg4 : i32 to index
      %2 = emitc.cast %arg11 : i32 to index
      %3 = emitc.cast %arg5 : i32 to index
      %4 = emitc.cast %arg8 : i32 to index
      %5 = emitc.cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = "npu.block_id"() : () -> i64
      %12 = emitc.cast %11 : i64 to i32
      %c32_0 = arith.constant 32 : index
      %c32_i32 = arith.constant 32 : i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = arith.muli %arg2, %arg3 : i32
      %15 = arith.muli %14, %arg6 : i32
      %16 = arith.muli %15, %arg7 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg12 = %c0 to %c32 step %c1_1 {
        %17 = builtin.unrealized_conversion_cast %arg12 : index to i64
        %18 = emitc.cast %17 : i64 to i32
        %19 = arith.addi %13, %18 : i32
        %20 = arith.remsi %19, %arg7 : i32
        %21 = arith.muli %20, %arg9 : i32
        %22 = emitc.cast %21 : i32 to index
        %23 = emitc.cast %19 : i32 to index
        %24 = arith.remsi %23, %5 : index
        %25 = arith.addi %24, %5 : index
        %26 = arith.cmpi slt, %24, %c0 : index
        %27 = arith.select %26, %25, %24 : index
        %28 = arith.divsi %19, %6 : i32
        %29 = arith.remsi %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = arith.muli %30, %arg5 : i32
        %32 = emitc.cast %31 : i32 to index
        %33 = arith.muli %29, %arg6 : i32
        %34 = arith.muli %33, %arg7 : i32
        %35 = emitc.cast %34 : i32 to index
        %36 = arith.divsi %19, %8 : i32
        %37 = arith.muli %36, %arg3 : i32
        %38 = arith.muli %37, %arg4 : i32
        %39 = arith.muli %38, %arg5 : i32
        %40 = emitc.cast %39 : i32 to index
        %41 = arith.muli %37, %arg6 : i32
        %42 = arith.muli %41, %arg7 : i32
        %43 = emitc.cast %42 : i32 to index
        %44 = arith.divsi %19, %arg7 : i32
        %45 = arith.remsi %44, %arg6 : i32
        %46 = arith.muli %45, %arg9 : i32
        %47 = arith.subi %46, %arg10 : i32
        %48 = emitc.cast %47 : i32 to index
        %49 = arith.muli %45, %arg7 : i32
        %50 = emitc.cast %49 : i32 to index
        %51 = arith.cmpi slt, %19, %16 : i32
        scf.if %51 {
          %52 = arith.subi %21, %arg10 : i32
          %53 = arith.addi %39, %31 : i32
          %54 = arith.subi %22, %0 : index
          %55:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
            %59 = builtin.unrealized_conversion_cast %arg13 : index to i64
            %60 = emitc.cast %59 : i64 to i32
            %61 = arith.muli %60, %arg11 : i32
            %62 = arith.addi %47, %61 : i32
            %63 = arith.muli %62, %arg5 : i32
            %64 = arith.addi %53, %63 : i32
            %65 = arith.muli %arg13, %2 : index
            %66 = arith.addi %65, %48 : index
            %67 = arith.cmpi sge, %66, %c0 : index
            %68 = arith.muli %65, %c-1 : index
            %69 = arith.subi %68, %48 : index
            %70 = arith.addi %69, %1 : index
            %71 = arith.addi %70, %c-1 : index
            %72 = arith.cmpi sge, %71, %c0 : index
            %73 = arith.muli %66, %3 : index
            %74:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
              %75 = builtin.unrealized_conversion_cast %arg17 : index to i64
              %76 = emitc.cast %75 : i64 to i32
              %77 = arith.muli %76, %arg11 : i32
              %78 = arith.addi %52, %77 : i32
              %79 = arith.muli %arg17, %2 : index
              %80 = arith.muli %79, %c-1 : index
              %81 = arith.subi %80, %22 : index
              %82 = arith.addi %81, %0 : index
              %83 = arith.addi %82, %3 : index
              %84 = arith.addi %83, %c-1 : index
              %85 = arith.cmpi sge, %84, %c0 : index
              %86 = arith.addi %79, %54 : index
              %87 = arith.cmpi sge, %86, %c0 : index
              %88 = arith.andi %85, %87 : i1
              %89 = arith.andi %88, %67 : i1
              %90 = arith.andi %89, %72 : i1
              %91:3 = scf.if %90 -> (f32, i32, f32) {
                %92 = arith.addi %64, %78 : i32
                %93 = arith.addi %79, %40 : index
                %94 = arith.addi %93, %32 : index
                %95 = arith.addi %94, %22 : index
                %96 = arith.subi %95, %0 : index
                %97 = arith.addi %96, %73 : index
                %98 = memref.load %arg0[%97] : memref<?xf32>
                %99 = arith.cmpf ogt, %98, %arg20 : f32
                %100 = arith.select %99, %98, %arg20 : f32
                scf.yield %98, %92, %100 : f32, i32, f32
              } else {
                scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
              }
              scf.yield %91#0, %91#1, %91#2 : f32, i32, f32
            }
            scf.yield %74#0, %74#1, %74#2 : f32, i32, f32
          }
          %56 = arith.addi %43, %35 : index
          %57 = arith.addi %56, %50 : index
          %58 = arith.addi %57, %27 : index
          memref.store %55#2, %arg1[%58] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii_0 {
    gpu.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg10 : i32 to index
      %1 = emitc.cast %arg4 : i32 to index
      %2 = emitc.cast %arg11 : i32 to index
      %3 = emitc.cast %arg5 : i32 to index
      %4 = emitc.cast %arg8 : i32 to index
      %5 = emitc.cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = "npu.block_id"() : () -> i64
      %12 = emitc.cast %11 : i64 to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = arith.muli %arg2, %arg3 : i32
      %15 = arith.muli %14, %arg6 : i32
      %16 = arith.muli %15, %arg7 : i32
      scf.for %arg12 = %c0 to %c32 step %c1 {
        %17 = builtin.unrealized_conversion_cast %arg12 : index to i64
        %18 = emitc.cast %17 : i64 to i32
        %19 = arith.addi %13, %18 : i32
        %20 = arith.remsi %19, %arg7 : i32
        %21 = arith.muli %20, %arg9 : i32
        %22 = emitc.cast %21 : i32 to index
        %23 = emitc.cast %19 : i32 to index
        %24 = arith.remsi %23, %5 : index
        %25 = arith.addi %24, %5 : index
        %26 = arith.cmpi slt, %24, %c0 : index
        %27 = arith.select %26, %25, %24 : index
        %28 = arith.divsi %19, %6 : i32
        %29 = arith.remsi %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = arith.muli %30, %arg5 : i32
        %32 = emitc.cast %31 : i32 to index
        %33 = arith.muli %29, %arg6 : i32
        %34 = arith.muli %33, %arg7 : i32
        %35 = emitc.cast %34 : i32 to index
        %36 = arith.divsi %19, %8 : i32
        %37 = arith.muli %36, %arg3 : i32
        %38 = arith.muli %37, %arg4 : i32
        %39 = arith.muli %38, %arg5 : i32
        %40 = emitc.cast %39 : i32 to index
        %41 = arith.muli %37, %arg6 : i32
        %42 = arith.muli %41, %arg7 : i32
        %43 = emitc.cast %42 : i32 to index
        %44 = arith.divsi %19, %arg7 : i32
        %45 = arith.remsi %44, %arg6 : i32
        %46 = arith.muli %45, %arg9 : i32
        %47 = arith.subi %46, %arg10 : i32
        %48 = emitc.cast %47 : i32 to index
        %49 = arith.muli %45, %arg7 : i32
        %50 = emitc.cast %49 : i32 to index
        %51 = arith.cmpi slt, %19, %16 : i32
        scf.if %51 {
          %52 = arith.subi %21, %arg10 : i32
          %53 = arith.addi %39, %31 : i32
          %54 = arith.subi %22, %0 : index
          %55:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
            %59 = builtin.unrealized_conversion_cast %arg13 : index to i64
            %60 = emitc.cast %59 : i64 to i32
            %61 = arith.muli %60, %arg11 : i32
            %62 = arith.addi %47, %61 : i32
            %63 = arith.muli %62, %arg5 : i32
            %64 = arith.addi %53, %63 : i32
            %65 = arith.muli %arg13, %2 : index
            %66 = arith.addi %65, %48 : index
            %67 = arith.cmpi sge, %66, %c0 : index
            %68 = arith.muli %65, %c-1 : index
            %69 = arith.subi %68, %48 : index
            %70 = arith.addi %69, %1 : index
            %71 = arith.addi %70, %c-1 : index
            %72 = arith.cmpi sge, %71, %c0 : index
            %73 = arith.muli %66, %3 : index
            %74:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
              %75 = builtin.unrealized_conversion_cast %arg17 : index to i64
              %76 = emitc.cast %75 : i64 to i32
              %77 = arith.muli %76, %arg11 : i32
              %78 = arith.addi %52, %77 : i32
              %79 = arith.muli %arg17, %2 : index
              %80 = arith.muli %79, %c-1 : index
              %81 = arith.subi %80, %22 : index
              %82 = arith.addi %81, %0 : index
              %83 = arith.addi %82, %3 : index
              %84 = arith.addi %83, %c-1 : index
              %85 = arith.cmpi sge, %84, %c0 : index
              %86 = arith.addi %79, %54 : index
              %87 = arith.cmpi sge, %86, %c0 : index
              %88 = arith.andi %85, %87 : i1
              %89 = arith.andi %88, %67 : i1
              %90 = arith.andi %89, %72 : i1
              %91:3 = scf.if %90 -> (f32, i32, f32) {
                %92 = arith.addi %64, %78 : i32
                %93 = arith.addi %79, %40 : index
                %94 = arith.addi %93, %32 : index
                %95 = arith.addi %94, %22 : index
                %96 = arith.subi %95, %0 : index
                %97 = arith.addi %96, %73 : index
                %98 = memref.load %arg0[%97] : memref<?xf32>
                %99 = arith.cmpf ogt, %98, %arg20 : f32
                %100 = arith.select %99, %98, %arg20 : f32
                scf.yield %98, %92, %100 : f32, i32, f32
              } else {
                scf.yield %arg18, %arg19, %arg20 : f32, i32, f32
              }
              scf.yield %91#0, %91#1, %91#2 : f32, i32, f32
            }
            scf.yield %74#0, %74#1, %74#2 : f32, i32, f32
          }
          %56 = arith.addi %43, %35 : index
          %57 = arith.addi %56, %50 : index
          %58 = arith.addi %57, %27 : index
          memref.store %55#2, %arg1[%58] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii_0 {
    gpu.func @_Z22max_pool2d_cuda_kernelPKfPfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg10 : i32 to index
      %1 = emitc.cast %arg4 : i32 to index
      %2 = emitc.cast %arg11 : i32 to index
      %3 = emitc.cast %arg5 : i32 to index
      %4 = emitc.cast %arg8 : i32 to index
      %5 = emitc.cast %arg7 : i32 to index
      %6 = arith.muli %arg7, %arg6 : i32
      %7 = arith.muli %arg3, %arg6 : i32
      %8 = arith.muli %7, %arg7 : i32
      %9 = llvm.mlir.undef : i32
      %10 = llvm.mlir.undef : f32
      %11 = "npu.block_id"() : () -> i64
      %12 = emitc.cast %11 : i64 to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = arith.muli %arg2, %arg3 : i32
      %15 = arith.muli %14, %arg6 : i32
      %16 = arith.muli %15, %arg7 : i32
      scf.for %arg12 = %c0 to %c32 step %c1 {
        %17 = builtin.unrealized_conversion_cast %arg12 : index to i64
        %18 = emitc.cast %17 : i64 to i32
        %19 = arith.addi %13, %18 : i32
        %20 = arith.remsi %19, %arg7 : i32
        %21 = arith.muli %20, %arg9 : i32
        %22 = emitc.cast %21 : i32 to index
        %23 = emitc.cast %19 : i32 to index
        %24 = arith.remsi %23, %5 : index
        %25 = arith.addi %24, %5 : index
        %26 = arith.cmpi slt, %24, %c0 : index
        %27 = arith.select %26, %25, %24 : index
        %28 = arith.divsi %19, %6 : i32
        %29 = arith.remsi %28, %arg3 : i32
        %30 = arith.muli %29, %arg4 : i32
        %31 = arith.muli %30, %arg5 : i32
        %32 = emitc.cast %31 : i32 to index
        %33 = arith.muli %29, %arg6 : i32
        %34 = arith.muli %33, %arg7 : i32
        %35 = emitc.cast %34 : i32 to index
        %36 = arith.divsi %19, %8 : i32
        %37 = arith.muli %36, %arg3 : i32
        %38 = arith.muli %37, %arg4 : i32
        %39 = arith.muli %38, %arg5 : i32
        %40 = emitc.cast %39 : i32 to index
        %41 = arith.muli %37, %arg6 : i32
        %42 = arith.muli %41, %arg7 : i32
        %43 = emitc.cast %42 : i32 to index
        %44 = arith.divsi %19, %arg7 : i32
        %45 = arith.remsi %44, %arg6 : i32
        %46 = arith.muli %45, %arg9 : i32
        %47 = arith.subi %46, %arg10 : i32
        %48 = emitc.cast %47 : i32 to index
        %49 = arith.muli %45, %arg7 : i32
        %50 = emitc.cast %49 : i32 to index
        %51 = arith.cmpi slt, %19, %16 : i32
        emitc.if %51 {
          %52 = arith.subi %21, %arg10 : i32
          %53 = arith.addi %39, %31 : i32
          %54 = arith.subi %22, %0 : index
          %55:3 = scf.for %arg13 = %c0 to %4 step %c1 iter_args(%arg14 = %10, %arg15 = %9, %arg16 = %cst) -> (f32, i32, f32) {
            %59 = builtin.unrealized_conversion_cast %arg13 : index to i64
            %60 = emitc.cast %59 : i64 to i32
            %61 = arith.muli %60, %arg11 : i32
            %62 = arith.addi %47, %61 : i32
            %63 = arith.muli %62, %arg5 : i32
            %64 = arith.addi %53, %63 : i32
            %65 = arith.muli %arg13, %2 : index
            %66 = arith.addi %65, %48 : index
            %67 = arith.cmpi sge, %66, %c0 : index
            %68 = arith.muli %65, %c-1 : index
            %69 = arith.subi %68, %48 : index
            %70 = arith.addi %69, %1 : index
            %71 = arith.addi %70, %c-1 : index
            %72 = arith.cmpi sge, %71, %c0 : index
            %73 = arith.muli %66, %3 : index
            %74:3 = scf.for %arg17 = %c0 to %4 step %c1 iter_args(%arg18 = %arg14, %arg19 = %arg15, %arg20 = %arg16) -> (f32, i32, f32) {
              %75 = builtin.unrealized_conversion_cast %arg17 : index to i64
              %76 = emitc.cast %75 : i64 to i32
              %77 = arith.muli %76, %arg11 : i32
              %78 = arith.addi %52, %77 : i32
              %79 = arith.muli %arg17, %2 : index
              %80 = arith.muli %79, %c-1 : index
              %81 = arith.subi %80, %22 : index
              %82 = arith.addi %81, %0 : index
              %83 = arith.addi %82, %3 : index
              %84 = arith.addi %83, %c-1 : index
              %85 = arith.cmpi sge, %84, %c0 : index
              %86 = arith.addi %79, %54 : index
              %87 = arith.cmpi sge, %86, %c0 : index
              %88 = arith.andi %85, %87 : i1
              %89 = arith.andi %88, %67 : i1
              %90 = arith.andi %89, %72 : i1
              %91 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
              %92 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
              %93 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
              emitc.if %90 {
                %94 = arith.addi %64, %78 : i32
                %95 = arith.addi %79, %40 : index
                %96 = arith.addi %95, %32 : index
                %97 = arith.addi %96, %22 : index
                %98 = arith.subi %97, %0 : index
                %99 = arith.addi %98, %73 : index
                %100 = memref.load %arg0[%99] : memref<?xf32>
                %101 = arith.cmpf ogt, %100, %arg20 : f32
                %102 = arith.select %101, %100, %arg20 : f32
                emitc.assign %100 : f32 to %91 : f32
                emitc.assign %94 : i32 to %92 : i32
                emitc.assign %102 : f32 to %93 : f32
              } else {
                emitc.assign %arg18 : f32 to %91 : f32
                emitc.assign %arg19 : i32 to %92 : i32
                emitc.assign %arg20 : f32 to %93 : f32
              }
              scf.yield %91, %92, %93 : f32, i32, f32
            }
            scf.yield %74#0, %74#1, %74#2 : f32, i32, f32
          }
          %56 = arith.addi %43, %35 : index
          %57 = arith.addi %56, %50 : index
          %58 = arith.addi %57, %27 : index
          memref.store %55#2, %arg1[%58] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("./Ascend_kernels/gen_cuda_kernels/level_1_prlblem_42_sample_0_Max_Pooling_2D.cu":58:5): error: 'llvm.mlir.undef' op unable to find printer for op
[ict-debug] driver.cc: After emitc::translateToCpp:

