warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z32__device_stub__matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.muli %1, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %arg4 : i32 to index
    %9 = arith.subi %8, %2 : index
    %10 = arith.subi %7, %c1 : index
    %11 = arith.addi %10, %9 : index
    %12 = arith.divui %11, %7 : index
    %13 = affine.for %arg5 = 0 to %12 iter_args(%arg6 = %cst) -> (f32) {
      %21 = affine.load %arg0[%arg5 * symbol(%7) + symbol(%6) + symbol(%2)] : memref<?xf32>
      %22 = affine.load %arg1[%arg5 * symbol(%7) + symbol(%2)] : memref<?xf32>
      %23 = arith.mulf %21, %22 : f32
      %24 = arith.addf %arg6, %23 : f32
      affine.yield %24 : f32
    }
    affine.store %13, %alloca[symbol(%2)] : memref<1xf32, 5>
    nvvm.barrier0
    %14 = gpu.block_dim  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.divui %15, %c2_i32 : i32
    %17 = math.ctlz %16 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.subi %c32, %18 : index
    %20 = arith.divui %15, %c2_i32 : i32
    affine.for %arg5 = 0 to %19 {
      %21 = arith.index_cast %arg5 : index to i32
      %22 = arith.shrui %20, %21 : i32
      %23 = arith.cmpi ult, %3, %22 : i32
      scf.if %23 {
        %24 = arith.addi %3, %22 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = memref.load %alloca[%25] : memref<1xf32, 5>
        %27 = affine.load %alloca[symbol(%2)] : memref<1xf32, 5>
        %28 = arith.addf %27, %26 : f32
        affine.store %28, %alloca[symbol(%2)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %4 {
      %21 = affine.load %alloca[0] : memref<1xf32, 5>
      affine.store %21, %arg2[symbol(%0)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.muli %1, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %arg4 : i32 to index
    %9 = arith.subi %8, %2 : index
    %10 = arith.subi %7, %c1 : index
    %11 = arith.addi %10, %9 : index
    %12 = arith.divui %11, %7 : index
    %13 = affine.for %arg5 = 0 to %12 iter_args(%arg6 = %cst) -> (f32) {
      %19 = affine.load %arg0[%arg5 * symbol(%7) + symbol(%6) + symbol(%2)] : memref<?xf32>
      %20 = affine.load %arg1[%arg5 * symbol(%7) + symbol(%2)] : memref<?xf32>
      %21 = arith.mulf %19, %20 : f32
      %22 = arith.addf %arg6, %21 : f32
      affine.yield %22 : f32
    }
    affine.store %13, %alloca[symbol(%2)] : memref<1xf32, 5>
    nvvm.barrier0
    %14 = arith.index_cast %7 : index to i32
    %15 = arith.divui %14, %c2_i32 : i32
    %16 = math.ctlz %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.subi %c32, %17 : index
    affine.for %arg5 = 0 to %18 {
      %19 = arith.index_cast %arg5 : index to i32
      %20 = arith.shrui %15, %19 : i32
      %21 = arith.cmpi ult, %3, %20 : i32
      scf.if %21 {
        %22 = arith.addi %3, %20 : i32
        %23 = arith.index_cast %22 : i32 to index
        %24 = memref.load %alloca[%23] : memref<1xf32, 5>
        %25 = affine.load %alloca[symbol(%2)] : memref<1xf32, 5>
        %26 = arith.addf %25, %24 : f32
        affine.store %26, %alloca[symbol(%2)] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %4 {
      %19 = affine.load %alloca[0] : memref<1xf32, 5>
      affine.store %19, %arg2[symbol(%0)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.cmpi eq, %3, %c0_i32 : i32
    %5 = arith.muli %1, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %arg4 : i32 to index
    %9 = arith.subi %8, %2 : index
    %10 = arith.subi %7, %c1 : index
    %11 = arith.addi %10, %9 : index
    %12 = arith.divui %11, %7 : index
    %13 = scf.for %arg5 = %c0 to %12 step %c1 iter_args(%arg6 = %cst) -> (f32) {
      %19 = arith.muli %arg5, %7 : index
      %20 = arith.addi %19, %6 : index
      %21 = arith.addi %20, %2 : index
      %22 = memref.load %arg0[%21] : memref<?xf32>
      %23 = arith.addi %19, %2 : index
      %24 = memref.load %arg1[%23] : memref<?xf32>
      %25 = arith.mulf %22, %24 : f32
      %26 = arith.addf %arg6, %25 : f32
      scf.yield %26 : f32
    }
    memref.store %13, %alloca[%2] : memref<1xf32, 5>
    nvvm.barrier0
    %14 = arith.index_cast %7 : index to i32
    %15 = arith.divui %14, %c2_i32 : i32
    %16 = math.ctlz %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.subi %c32, %17 : index
    scf.for %arg5 = %c0 to %18 step %c1 {
      %19 = arith.index_cast %arg5 : index to i32
      %20 = arith.shrui %15, %19 : i32
      %21 = arith.cmpi ult, %3, %20 : i32
      scf.if %21 {
        %22 = arith.addi %3, %20 : i32
        %23 = arith.index_cast %22 : i32 to index
        %24 = memref.load %alloca[%23] : memref<1xf32, 5>
        %25 = memref.load %alloca[%2] : memref<1xf32, 5>
        %26 = arith.addf %25, %24 : f32
        memref.store %26, %alloca[%2] : memref<1xf32, 5>
      }
      nvvm.barrier0
    }
    scf.if %4 {
      %19 = memref.load %alloca[%c0] : memref<1xf32, 5>
      memref.store %19, %arg2[%0] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.index_cast %arg5 : index to i32
      %3 = arith.cmpi eq, %2, %c0_i32 : i32
      %4 = arith.muli %1, %arg4 : i32
      %5 = arith.index_cast %4 : i32 to index
      %6 = gpu.block_dim  x
      %7 = arith.index_cast %arg4 : i32 to index
      %8 = arith.subi %7, %arg5 : index
      %9 = arith.subi %6, %c1_1 : index
      %10 = arith.addi %9, %8 : index
      %11 = arith.divui %10, %6 : index
      %12 = scf.for %arg6 = %c0_0 to %11 step %c1_1 iter_args(%arg7 = %cst) -> (f32) {
        %18 = arith.muli %arg6, %6 : index
        %19 = arith.addi %18, %5 : index
        %20 = arith.addi %19, %arg5 : index
        %21 = memref.load %arg0[%20] : memref<?xf32>
        %22 = arith.addi %18, %arg5 : index
        %23 = memref.load %arg1[%22] : memref<?xf32>
        %24 = arith.mulf %21, %23 : f32
        %25 = arith.addf %arg7, %24 : f32
        scf.yield %25 : f32
      }
      memref.store %12, %alloca[%arg5] : memref<1xf32, 5>
      "polygeist.barrier"(%arg5) : (index) -> ()
      %13 = arith.index_cast %6 : index to i32
      %14 = arith.divui %13, %c2_i32 : i32
      %15 = math.ctlz %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.subi %c32_2, %16 : index
      scf.for %arg6 = %c0_0 to %17 step %c1_1 {
        %18 = arith.index_cast %arg6 : index to i32
        %19 = arith.shrui %14, %18 : i32
        %20 = arith.cmpi ult, %2, %19 : i32
        scf.if %20 {
          %21 = arith.addi %2, %19 : i32
          %22 = arith.index_cast %21 : i32 to index
          %23 = memref.load %alloca[%22] : memref<1xf32, 5>
          %24 = memref.load %alloca[%arg5] : memref<1xf32, 5>
          %25 = arith.addf %24, %23 : f32
          memref.store %25, %alloca[%arg5] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg5) : (index) -> ()
      }
      scf.if %3 {
        %18 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
        memref.store %18, %arg2[%0] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %c1_1 = arith.constant 1 : index
      %c32_2 = arith.constant 32 : index
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.index_cast %arg5 : index to i32
      %3 = arith.cmpi eq, %2, %c0_i32 : i32
      %4 = arith.muli %1, %arg4 : i32
      %5 = arith.index_cast %4 : i32 to index
      %6 = gpu.block_dim  x
      %7 = arith.index_cast %arg4 : i32 to index
      %8 = arith.subi %7, %arg5 : index
      %9 = arith.subi %6, %c1_1 : index
      %10 = arith.addi %9, %8 : index
      %11 = arith.divui %10, %6 : index
      %12 = scf.for %arg6 = %c0_0 to %11 step %c1_1 iter_args(%arg7 = %cst) -> (f32) {
        %18 = arith.muli %arg6, %6 : index
        %19 = arith.addi %18, %5 : index
        %20 = arith.addi %19, %arg5 : index
        %21 = memref.load %arg0[%20] : memref<?xf32>
        %22 = arith.addi %18, %arg5 : index
        %23 = memref.load %arg1[%22] : memref<?xf32>
        %24 = arith.mulf %21, %23 : f32
        %25 = arith.addf %arg7, %24 : f32
        scf.yield %25 : f32
      }
      memref.store %12, %alloca[%arg5] : memref<1xf32, 5>
      "polygeist.barrier"(%arg5) : (index) -> ()
      %13 = arith.index_cast %6 : index to i32
      %14 = arith.divui %13, %c2_i32 : i32
      %15 = math.ctlz %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.subi %c32_2, %16 : index
      scf.for %arg6 = %c0_0 to %17 step %c1_1 {
        %18 = arith.index_cast %arg6 : index to i32
        %19 = arith.shrui %14, %18 : i32
        %20 = arith.cmpi ult, %2, %19 : i32
        scf.if %20 {
          %21 = arith.addi %2, %19 : i32
          %22 = arith.index_cast %21 : i32 to index
          %23 = memref.load %alloca[%22] : memref<1xf32, 5>
          %24 = memref.load %alloca[%arg5] : memref<1xf32, 5>
          %25 = arith.addf %24, %23 : f32
          memref.store %25, %alloca[%arg5] : memref<1xf32, 5>
        }
        "polygeist.barrier"(%arg5) : (index) -> ()
      }
      scf.if %3 {
        %18 = memref.load %alloca[%c0_0] : memref<1xf32, 5>
        memref.store %18, %arg2[%0] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.muli %1, %arg4 : i32
    %3 = arith.index_cast %2 : i32 to index
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %arg4 : i32 to index
    %6 = arith.subi %4, %c1 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %15 = arith.subi %5, %arg5 : index
      %16 = arith.addi %6, %15 : index
      %17 = arith.divui %16, %4 : index
      %18 = scf.for %arg6 = %c0 to %17 step %c1 iter_args(%arg7 = %cst) -> (f32) {
        %19 = arith.muli %arg6, %4 : index
        %20 = arith.addi %19, %3 : index
        %21 = arith.addi %20, %arg5 : index
        %22 = memref.load %arg0[%21] : memref<?xf32>
        %23 = arith.addi %19, %arg5 : index
        %24 = memref.load %arg1[%23] : memref<?xf32>
        %25 = arith.mulf %22, %24 : f32
        %26 = arith.addf %arg7, %25 : f32
        scf.yield %26 : f32
      }
      memref.store %18, %alloca[%arg5] : memref<1xf32, 5>
      scf.yield
    }
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.divui %8, %c2_i32 : i32
    %10 = math.ctlz %9 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.subi %c32, %11 : index
    scf.for %arg5 = %c0 to %12 step %c1 {
      %15 = arith.index_cast %arg5 : index to i32
      %16 = arith.shrui %9, %15 : i32
      scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
        %17 = arith.index_cast %arg6 : index to i32
        %18 = arith.cmpi ult, %17, %16 : i32
        scf.if %18 {
          %19 = arith.addi %17, %16 : i32
          %20 = arith.index_cast %19 : i32 to index
          %21 = memref.load %alloca[%20] : memref<1xf32, 5>
          %22 = memref.load %alloca[%arg6] : memref<1xf32, 5>
          %23 = arith.addf %22, %21 : f32
          memref.store %23, %alloca[%arg6] : memref<1xf32, 5>
        }
        scf.yield
      }
    }
    %13 = gpu.block_id  x
    %14 = memref.load %alloca[%c0] : memref<1xf32, 5>
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %15 = arith.index_cast %arg5 : index to i32
      %16 = arith.cmpi eq, %15, %c0_i32 : i32
      scf.if %16 {
        memref.store %14, %arg2[%13] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = arith.index_cast %2 : i32 to index
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %arg4 : i32 to index
      %6 = arith.subi %4, %c1 : index
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %13 = arith.subi %5, %arg5 : index
        %14 = arith.addi %6, %13 : index
        %15 = arith.divui %14, %4 : index
        %16 = scf.for %arg6 = %c0 to %15 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %17 = arith.muli %arg6, %4 : index
          %18 = arith.addi %17, %3 : index
          %19 = arith.addi %18, %arg5 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = arith.addi %17, %arg5 : index
          %22 = memref.load %arg1[%21] : memref<?xf32>
          %23 = arith.mulf %20, %22 : f32
          %24 = arith.addf %arg7, %23 : f32
          scf.yield %24 : f32
        }
        memref.store %16, %alloca[%arg5] : memref<1xf32, 5>
        scf.yield
      }
      %7 = arith.index_cast %4 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      %9 = math.ctlz %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c32, %10 : index
      scf.for %arg5 = %c0 to %11 step %c1 {
        %13 = arith.index_cast %arg5 : index to i32
        %14 = arith.shrui %8, %13 : i32
        scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
          %15 = arith.index_cast %arg6 : index to i32
          %16 = arith.cmpi ult, %15, %14 : i32
          scf.if %16 {
            %17 = arith.addi %15, %14 : i32
            %18 = arith.index_cast %17 : i32 to index
            %19 = memref.load %alloca[%18] : memref<1xf32, 5>
            %20 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %21 = arith.addf %20, %19 : f32
            memref.store %21, %alloca[%arg6] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %13 = arith.index_cast %arg5 : index to i32
        %14 = arith.cmpi eq, %13, %c0_i32 : i32
        scf.if %14 {
          memref.store %12, %arg2[%0] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.muli %1, %arg4 : i32
      %3 = arith.index_cast %2 : i32 to index
      %c32_0 = arith.constant 32 : index
      %4 = arith.index_cast %arg4 : i32 to index
      %5 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %12 = arith.subi %4, %arg5 : index
        %13 = arith.addi %5, %12 : index
        %14 = arith.divui %13, %c32_0 : index
        %15 = scf.for %arg6 = %c0 to %14 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %16 = arith.muli %arg6, %c32_0 : index
          %17 = arith.addi %16, %3 : index
          %18 = arith.addi %17, %arg5 : index
          %19 = memref.load %arg0[%18] : memref<?xf32>
          %20 = arith.addi %16, %arg5 : index
          %21 = memref.load %arg1[%20] : memref<?xf32>
          %22 = arith.mulf %19, %21 : f32
          %23 = arith.addf %arg7, %22 : f32
          scf.yield %23 : f32
        }
        memref.store %15, %alloca[%arg5] : memref<1xf32, 5>
      }
      %6 = arith.index_cast %c32_0 : index to i32
      %7 = arith.divui %6, %c2_i32 : i32
      %8 = math.ctlz %7 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = arith.subi %c32, %9 : index
      scf.for %arg5 = %c0 to %10 step %c1 {
        %12 = arith.index_cast %arg5 : index to i32
        %13 = arith.shrui %7, %12 : i32
        %c1_3 = arith.constant 1 : index
        scf.for %arg6 = %c0 to %c32 step %c1_3 {
          %14 = arith.index_cast %arg6 : index to i32
          %15 = arith.cmpi ult, %14, %13 : i32
          scf.if %15 {
            %16 = arith.addi %14, %13 : i32
            %17 = arith.index_cast %16 : i32 to index
            %18 = memref.load %alloca[%17] : memref<1xf32, 5>
            %19 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %20 = arith.addf %19, %18 : f32
            memref.store %20, %alloca[%arg6] : memref<1xf32, 5>
          }
        }
      }
      %11 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %c1_2 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_2 {
        %12 = arith.index_cast %arg5 : index to i32
        %13 = arith.cmpi eq, %12, %c0_i32 : i32
        scf.if %13 {
          memref.store %11, %arg2[%0] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<1xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<1xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %arg4 : i32
      %4 = arith.index_cast %3 : i32 to index
      %c32_0 = arith.constant 32 : index
      %5 = arith.index_cast %arg4 : i32 to index
      %6 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %13 = arith.subi %5, %arg5 : index
        %14 = arith.addi %6, %13 : index
        %15 = arith.divui %14, %c32_0 : index
        %16 = scf.for %arg6 = %c0 to %15 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %17 = arith.muli %arg6, %c32_0 : index
          %18 = arith.addi %17, %4 : index
          %19 = arith.addi %18, %arg5 : index
          %20 = memref.load %arg0[%19] : memref<?xf32>
          %21 = arith.addi %17, %arg5 : index
          %22 = memref.load %arg1[%21] : memref<?xf32>
          %23 = arith.mulf %20, %22 : f32
          %24 = arith.addf %arg7, %23 : f32
          scf.yield %24 : f32
        }
        memref.store %16, %alloca[%arg5] : memref<1xf32, 5>
      }
      %7 = arith.index_cast %c32_0 : index to i32
      %8 = arith.divui %7, %c2_i32 : i32
      %9 = math.ctlz %8 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.subi %c32, %10 : index
      scf.for %arg5 = %c0 to %11 step %c1 {
        %13 = arith.index_cast %arg5 : index to i32
        %14 = arith.shrui %8, %13 : i32
        %c1_3 = arith.constant 1 : index
        scf.for %arg6 = %c0 to %c32 step %c1_3 {
          %15 = arith.index_cast %arg6 : index to i32
          %16 = arith.cmpi ult, %15, %14 : i32
          scf.if %16 {
            %17 = arith.addi %15, %14 : i32
            %18 = arith.index_cast %17 : i32 to index
            %19 = memref.load %alloca[%18] : memref<1xf32, 5>
            %20 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %21 = arith.addf %20, %19 : f32
            memref.store %21, %alloca[%arg6] : memref<1xf32, 5>
          }
        }
      }
      %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %c1_2 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_2 {
        %13 = arith.index_cast %arg5 : index to i32
        %14 = arith.cmpi eq, %13, %c0_i32 : i32
        scf.if %14 {
          memref.store %12, %arg2[%1] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %5 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%14 = arith.index_cast %13 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%23 = arith.index_cast %arg6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%27 = arith.index_cast %26 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = arith.index_cast %arg5 : index to i32
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = emitc.cast %5 : i32 to index
      %c32_0 = arith.constant 32 : index
      %7 = emitc.cast %arg4 : i32 to index
      %8 = arith.subi %c32_0, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %14 = arith.subi %7, %arg5 : index
        %15 = arith.addi %8, %14 : index
        %16 = arith.divui %15, %c32_0 : index
        %17 = scf.for %arg6 = %c0 to %16 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %18 = arith.muli %arg6, %c32_0 : index
          %19 = arith.addi %18, %6 : index
          %20 = arith.addi %19, %arg5 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.addi %18, %arg5 : index
          %23 = memref.load %arg1[%22] : memref<?xf32>
          %24 = emitc.mul %21, %23 : (f32, f32) -> f32
          %25 = emitc.add %arg7, %24 : (f32, f32) -> f32
          scf.yield %25 : f32
        }
        memref.store %17, %1[%arg5] : memref<1xf32, 5>
      }
      %c32_i32 = arith.constant 32 : i32
      %9 = arith.divui %c32_i32, %c2_i32 : i32
      %10 = math.ctlz %9 : i32
      %11 = emitc.cast %10 : i32 to index
      %12 = arith.subi %c32, %11 : index
      scf.for %arg5 = %c0 to %12 step %c1 {
        %14 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %15 = emitc.cast %14 : i64 to i32
        %16 = arith.shrui %9, %15 : i32
        %c1_3 = arith.constant 1 : index
        scf.for %arg6 = %c0 to %c32 step %c1_3 {
          %17 = builtin.unrealized_conversion_cast %arg6 : index to i64
          %18 = emitc.cast %17 : i64 to i32
          %19 = arith.cmpi ult, %18, %16 : i32
          scf.if %19 {
            %20 = arith.addi %18, %16 : i32
            %21 = emitc.cast %20 : i32 to index
            %22 = memref.load %1[%21] : memref<1xf32, 5>
            %23 = memref.load %1[%arg6] : memref<1xf32, 5>
            %24 = emitc.add %23, %22 : (f32, f32) -> f32
            memref.store %24, %1[%arg6] : memref<1xf32, 5>
          }
        }
      }
      %13 = memref.load %1[%c0] : memref<1xf32, 5>
      %c1_2 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_2 {
        %14 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %15 = emitc.cast %14 : i64 to i32
        %16 = arith.cmpi eq, %15, %c0_i32 : i32
        scf.if %16 {
          memref.store %13, %arg2[%3] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c31 = arith.constant 31 : index
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = emitc.cast %5 : i32 to index
      %7 = emitc.cast %arg4 : i32 to index
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %11 = arith.subi %7, %arg5 : index
        %12 = arith.addi %11, %c31 : index
        %13 = arith.divui %12, %c32 : index
        %14 = scf.for %arg6 = %c0 to %13 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %15 = arith.muli %arg6, %c32 : index
          %16 = arith.addi %15, %6 : index
          %17 = arith.addi %16, %arg5 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = arith.addi %15, %arg5 : index
          %20 = memref.load %arg1[%19] : memref<?xf32>
          %21 = emitc.mul %18, %20 : (f32, f32) -> f32
          %22 = emitc.add %arg7, %21 : (f32, f32) -> f32
          scf.yield %22 : f32
        }
        memref.store %14, %1[%arg5] : memref<1xf32, 5>
      }
      %8 = emitc.cast %c27_i32 : i32 to index
      %9 = arith.subi %c32, %8 : index
      scf.for %arg5 = %c0 to %9 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.shrui %c16_i32, %12 : i32
        scf.for %arg6 = %c0 to %c32 step %c1 {
          %14 = builtin.unrealized_conversion_cast %arg6 : index to i64
          %15 = emitc.cast %14 : i64 to i32
          %16 = arith.cmpi ult, %15, %13 : i32
          scf.if %16 {
            %17 = arith.addi %15, %13 : i32
            %18 = emitc.cast %17 : i32 to index
            %19 = memref.load %1[%18] : memref<1xf32, 5>
            %20 = memref.load %1[%arg6] : memref<1xf32, 5>
            %21 = emitc.add %20, %19 : (f32, f32) -> f32
            memref.store %21, %1[%arg6] : memref<1xf32, 5>
          }
        }
      }
      %10 = memref.load %1[%c0] : memref<1xf32, 5>
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.cmpi eq, %12, %c0_i32 : i32
        scf.if %13 {
          memref.store %10, %arg2[%3] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17matvec_mul_kernelPKfS0_Pfii_0 {
    gpu.func @_Z17matvec_mul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c31 = arith.constant 31 : index
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i32 = arith.constant 0 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = emitc.cast %5 : i32 to index
      %7 = emitc.cast %arg4 : i32 to index
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %11 = arith.subi %7, %arg5 : index
        %12 = arith.addi %11, %c31 : index
        %13 = arith.divui %12, %c32 : index
        %14 = scf.for %arg6 = %c0 to %13 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %15 = arith.muli %arg6, %c32 : index
          %16 = arith.addi %15, %6 : index
          %17 = arith.addi %16, %arg5 : index
          %18 = memref.load %arg0[%17] : memref<?xf32>
          %19 = arith.addi %15, %arg5 : index
          %20 = memref.load %arg1[%19] : memref<?xf32>
          %21 = emitc.mul %18, %20 : (f32, f32) -> f32
          %22 = emitc.add %arg7, %21 : (f32, f32) -> f32
          scf.yield %22 : f32
        }
        memref.store %14, %1[%arg5] : memref<1xf32, 5>
      }
      %8 = emitc.cast %c27_i32 : i32 to index
      %9 = arith.subi %c32, %8 : index
      scf.for %arg5 = %c0 to %9 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.shrui %c16_i32, %12 : i32
        scf.for %arg6 = %c0 to %c32 step %c1 {
          %14 = builtin.unrealized_conversion_cast %arg6 : index to i64
          %15 = emitc.cast %14 : i64 to i32
          %16 = arith.cmpi ult, %15, %13 : i32
          emitc.if %16 {
            %17 = arith.addi %15, %13 : i32
            %18 = emitc.cast %17 : i32 to index
            %19 = memref.load %1[%18] : memref<1xf32, 5>
            %20 = memref.load %1[%arg6] : memref<1xf32, 5>
            %21 = emitc.add %20, %19 : (f32, f32) -> f32
            memref.store %21, %1[%arg6] : memref<1xf32, 5>
          }
        }
      }
      %10 = memref.load %1[%c0] : memref<1xf32, 5>
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %11 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %12 = emitc.cast %11 : i64 to i32
        %13 = arith.cmpi eq, %12, %c0_i32 : i32
        emitc.if %13 {
          memref.store %10, %arg2[%3] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

