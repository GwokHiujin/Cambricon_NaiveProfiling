#include <bang.h>
__mlu_global__ void matvec_mul_kernel(float* v1, float* v2, float* v3, int32_t v4, int32_t v5) {
  size_t c31_6 = 31;
  size_t c5_7 = 5;
  int32_t c16_8 = 16;
  float v9 = (float)0.0e+00;
  int32_t c0_10 = 0;
  size_t c0_11 = 0;
  size_t c1_12 = 1;
  size_t c32_13 = 32;
  __nram__ int8_t v14[32];
  float* v15 = (float*)v14;
  int64_t v16 = taskIdX;
  size_t v17 = (size_t) v16;
  int32_t v18 = (int32_t) v17;
  int32_t v19 = (v18) * (v5);
  size_t v20 = (size_t) v19;
  size_t v21 = (size_t) v5;
  for (size_t v22 = c0_11; v22 < c32_13; v22 += c1_12) {
    size_t v23 = (v21) - (v22);
    size_t v24 = (v23) + (c31_6);
    size_t v25 = (v24) / (c32_13);
    float v26;
    float v27 = v9;
    for (size_t v28 = c0_11; v28 < v25; v28 += c1_12) {
      size_t v29 = (v28) * (c32_13);
      size_t v30 = (v29) + (v20);
      size_t v31 = (v30) + (v22);
      float v32 = v1[v31];
      size_t v33 = (v29) + (v22);
      float v34 = v2[v33];
      float v35 = v32 * v34;
      float v36 = v27 + v35;
      v27 = v36;
    }
    v26 = v27;;
    v15[v22] = v26;
  }
  for (size_t v37 = c0_11; v37 < c5_7; v37 += c1_12) {
    int32_t v38 = (int32_t) v37;
    int32_t v39 = (c16_8) >> (v38);
    for (size_t v40 = c0_11; v40 < c32_13; v40 += c1_12) {
      int32_t v41 = (int32_t) v40;
      bool v42 = v41 < v39;
      if (v42) {
        int32_t v43 = (v41) + (v39);
        size_t v44 = (size_t) v43;
        float v45 = v15[v44];
        float v46 = v15[v40];
        float v47 = v46 + v45;
        v15[v40] = v47;
      };
    };
  }
  float v48 = v15[c0_11];
  for (size_t v49 = c0_11; v49 < c32_13; v49 += c1_12) {
    int32_t v50 = (int32_t) v49;
    bool v51 = v50 == c0_10;
    if (v51) {
      v3[v17] = v48;
    };
  }
  return;
}




