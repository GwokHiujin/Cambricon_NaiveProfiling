warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z39__device_stub__product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z24product_reduction_kernelPKfPfiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %3, %5 : i32
    %7 = gpu.thread_id  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.addi %6, %8 : i32
    %10 = arith.cmpi eq, %arg5, %c1_i32 : i32
    %11 = arith.divsi %9, %arg4 : i32
    %12 = arith.muli %11, %arg3 : i32
    %13 = arith.muli %12, %arg4 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.muli %11, %arg4 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.remsi %9, %arg4 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.index_cast %17 : i32 to index
    %20 = arith.cmpi slt, %11, %arg2 : i32
    %21 = arith.cmpi slt, %17, %arg4 : i32
    %22 = arith.andi %20, %21 : i1
    %23 = arith.andi %10, %22 : i1
    scf.if %23 {
      %24 = affine.for %arg6 = 0 to %1 iter_args(%arg7 = %cst) -> (f32) {
        %25 = affine.load %arg0[%arg6 * symbol(%0) + symbol(%14) + symbol(%18)] : memref<?xf32>
        %26 = arith.mulf %arg7, %25 : f32
        affine.yield %26 : f32
      }
      affine.store %24, %arg1[symbol(%16) + symbol(%19)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %3, %5 : i32
    %7 = gpu.thread_id  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.addi %6, %8 : i32
    %10 = arith.cmpi eq, %arg5, %c1_i32 : i32
    %11 = arith.divsi %9, %arg4 : i32
    %12 = arith.muli %11, %arg3 : i32
    %13 = arith.muli %12, %arg4 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.muli %11, %arg4 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.remsi %9, %arg4 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.cmpi slt, %11, %arg2 : i32
    %20 = arith.cmpi slt, %17, %arg4 : i32
    %21 = arith.andi %19, %20 : i1
    %22 = arith.andi %10, %21 : i1
    scf.if %22 {
      %23 = affine.for %arg6 = 0 to %1 iter_args(%arg7 = %cst) -> (f32) {
        %24 = affine.load %arg0[%arg6 * symbol(%0) + symbol(%14) + symbol(%18)] : memref<?xf32>
        %25 = arith.mulf %arg7, %24 : f32
        affine.yield %25 : f32
      }
      affine.store %23, %arg1[symbol(%16) + symbol(%18)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 1.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %3, %5 : i32
    %7 = gpu.thread_id  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.addi %6, %8 : i32
    %10 = arith.cmpi eq, %arg5, %c1_i32 : i32
    %11 = arith.divsi %9, %arg4 : i32
    %12 = arith.muli %11, %arg3 : i32
    %13 = arith.muli %12, %arg4 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.muli %11, %arg4 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.remsi %9, %arg4 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.cmpi slt, %11, %arg2 : i32
    %20 = arith.cmpi slt, %17, %arg4 : i32
    %21 = arith.andi %19, %20 : i1
    %22 = arith.andi %10, %21 : i1
    scf.if %22 {
      %23 = scf.for %arg6 = %c0 to %1 step %c1 iter_args(%arg7 = %cst) -> (f32) {
        %25 = arith.muli %arg6, %0 : index
        %26 = arith.addi %25, %14 : index
        %27 = arith.addi %26, %18 : index
        %28 = memref.load %arg0[%27] : memref<?xf32>
        %29 = arith.mulf %arg7, %28 : f32
        scf.yield %29 : f32
      }
      %24 = arith.addi %16, %18 : index
      memref.store %23, %arg1[%24] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant 1.000000e+00 : f32
      %c1_i32 = arith.constant 1 : i32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.index_cast %arg6 : index to i32
      %8 = arith.addi %6, %7 : i32
      %9 = arith.cmpi eq, %arg5, %c1_i32 : i32
      %10 = arith.divsi %8, %arg4 : i32
      %11 = arith.muli %10, %arg3 : i32
      %12 = arith.muli %11, %arg4 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = arith.muli %10, %arg4 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.remsi %8, %arg4 : i32
      %17 = arith.index_cast %16 : i32 to index
      %18 = arith.cmpi slt, %10, %arg2 : i32
      %19 = arith.cmpi slt, %16, %arg4 : i32
      %20 = arith.andi %18, %19 : i1
      %21 = arith.andi %9, %20 : i1
      scf.if %21 {
        %22 = scf.for %arg7 = %c0_1 to %1 step %c1_0 iter_args(%arg8 = %cst) -> (f32) {
          %24 = arith.muli %arg7, %0 : index
          %25 = arith.addi %24, %13 : index
          %26 = arith.addi %25, %17 : index
          %27 = memref.load %arg0[%26] : memref<?xf32>
          %28 = arith.mulf %arg8, %27 : f32
          scf.yield %28 : f32
        }
        %23 = arith.addi %15, %17 : index
        memref.store %22, %arg1[%23] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant 1.000000e+00 : f32
      %c1_i32 = arith.constant 1 : i32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.index_cast %arg6 : index to i32
      %8 = arith.addi %6, %7 : i32
      %9 = arith.cmpi eq, %arg5, %c1_i32 : i32
      %10 = arith.divsi %8, %arg4 : i32
      %11 = arith.muli %10, %arg3 : i32
      %12 = arith.muli %11, %arg4 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = arith.muli %10, %arg4 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.remsi %8, %arg4 : i32
      %17 = arith.index_cast %16 : i32 to index
      %18 = arith.cmpi slt, %10, %arg2 : i32
      %19 = arith.cmpi slt, %16, %arg4 : i32
      %20 = arith.andi %18, %19 : i1
      %21 = arith.andi %9, %20 : i1
      scf.if %21 {
        %22 = scf.for %arg7 = %c0_1 to %1 step %c1_0 iter_args(%arg8 = %cst) -> (f32) {
          %24 = arith.muli %arg7, %0 : index
          %25 = arith.addi %24, %13 : index
          %26 = arith.addi %25, %17 : index
          %27 = memref.load %arg0[%26] : memref<?xf32>
          %28 = arith.mulf %arg8, %27 : f32
          scf.yield %28 : f32
        }
        %23 = arith.addi %15, %17 : index
        memref.store %22, %arg1[%23] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant 1.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.block_dim  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %3, %5 : i32
    %7 = arith.cmpi eq, %arg5, %c1_i32 : i32
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %8 = arith.index_cast %arg6 : index to i32
      %9 = arith.addi %6, %8 : i32
      %10 = arith.divsi %9, %arg4 : i32
      %11 = arith.muli %10, %arg3 : i32
      %12 = arith.muli %11, %arg4 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = arith.muli %10, %arg4 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = arith.remsi %9, %arg4 : i32
      %17 = arith.index_cast %16 : i32 to index
      %18 = arith.cmpi slt, %10, %arg2 : i32
      %19 = arith.cmpi slt, %16, %arg4 : i32
      %20 = arith.andi %18, %19 : i1
      %21 = arith.andi %7, %20 : i1
      scf.if %21 {
        %22 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
          %24 = arith.muli %arg7, %0 : index
          %25 = arith.addi %24, %13 : index
          %26 = arith.addi %25, %17 : index
          %27 = memref.load %arg0[%26] : memref<?xf32>
          %28 = arith.mulf %arg8, %27 : f32
          scf.yield %28 : f32
        }
        %23 = arith.addi %15, %17 : index
        memref.store %22, %arg1[%23] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.cmpi eq, %arg5, %c1_i32 : i32
      scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
        %8 = arith.index_cast %arg6 : index to i32
        %9 = arith.addi %6, %8 : i32
        %10 = arith.divsi %9, %arg4 : i32
        %11 = arith.muli %10, %arg3 : i32
        %12 = arith.muli %11, %arg4 : i32
        %13 = arith.index_cast %12 : i32 to index
        %14 = arith.muli %10, %arg4 : i32
        %15 = arith.index_cast %14 : i32 to index
        %16 = arith.remsi %9, %arg4 : i32
        %17 = arith.index_cast %16 : i32 to index
        %18 = arith.cmpi slt, %10, %arg2 : i32
        %19 = arith.cmpi slt, %16, %arg4 : i32
        %20 = arith.andi %18, %19 : i1
        %21 = arith.andi %7, %20 : i1
        scf.if %21 {
          %22 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %24 = arith.muli %arg7, %0 : index
            %25 = arith.addi %24, %13 : index
            %26 = arith.addi %25, %17 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = arith.mulf %arg8, %27 : f32
            scf.yield %28 : f32
          }
          %23 = arith.addi %15, %17 : index
          memref.store %22, %arg1[%23] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %c32_0 = arith.constant 32 : index
      %4 = arith.index_cast %c32_0 : index to i32
      %5 = arith.muli %3, %4 : i32
      %6 = arith.cmpi eq, %arg5, %c1_i32 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg6 = %c0 to %c32 step %c1_1 {
        %7 = arith.index_cast %arg6 : index to i32
        %8 = arith.addi %5, %7 : i32
        %9 = arith.divsi %8, %arg4 : i32
        %10 = arith.muli %9, %arg3 : i32
        %11 = arith.muli %10, %arg4 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.muli %9, %arg4 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.remsi %8, %arg4 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.cmpi slt, %9, %arg2 : i32
        %18 = arith.cmpi slt, %15, %arg4 : i32
        %19 = arith.andi %17, %18 : i1
        %20 = arith.andi %6, %19 : i1
        scf.if %20 {
          %21 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %23 = arith.muli %arg7, %0 : index
            %24 = arith.addi %23, %12 : index
            %25 = arith.addi %24, %16 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.mulf %arg8, %26 : f32
            scf.yield %27 : f32
          }
          %22 = arith.addi %14, %16 : index
          memref.store %21, %arg1[%22] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%2 = gpu.block_id  x
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %3 = arith.index_cast %2 : i64 to index
      %4 = builtin.unrealized_conversion_cast %2 : i64 to index
      %5 = arith.index_cast %3 : index to i32
      %c32_0 = arith.constant 32 : index
      %6 = arith.index_cast %c32_0 : index to i32
      %7 = arith.muli %5, %6 : i32
      %8 = arith.cmpi eq, %arg5, %c1_i32 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg6 = %c0 to %c32 step %c1_1 {
        %9 = arith.index_cast %arg6 : index to i32
        %10 = arith.addi %7, %9 : i32
        %11 = arith.divsi %10, %arg4 : i32
        %12 = arith.muli %11, %arg3 : i32
        %13 = arith.muli %12, %arg4 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.muli %11, %arg4 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.remsi %10, %arg4 : i32
        %18 = arith.index_cast %17 : i32 to index
        %19 = arith.cmpi slt, %11, %arg2 : i32
        %20 = arith.cmpi slt, %17, %arg4 : i32
        %21 = arith.andi %19, %20 : i1
        %22 = arith.andi %8, %21 : i1
        scf.if %22 {
          %23 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %25 = arith.muli %arg7, %0 : index
            %26 = arith.addi %25, %14 : index
            %27 = arith.addi %26, %18 : index
            %28 = memref.load %arg0[%27] : memref<?xf32>
            %29 = emitc.mul %arg8, %28 : (f32, f32) -> f32
            scf.yield %29 : f32
          }
          %24 = arith.addi %16, %18 : index
          memref.store %23, %arg1[%24] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c32_i32 = arith.constant 32 : i32
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %3 = arith.index_cast %2 : i64 to index
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.cmpi eq, %arg5, %c1_i32 : i32
      scf.for %arg6 = %c0 to %c32 step %c1 {
        %7 = arith.index_cast %arg6 : index to i32
        %8 = arith.addi %5, %7 : i32
        %9 = arith.divsi %8, %arg4 : i32
        %10 = arith.muli %9, %arg3 : i32
        %11 = arith.muli %10, %arg4 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.muli %9, %arg4 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.remsi %8, %arg4 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.cmpi slt, %9, %arg2 : i32
        %18 = arith.cmpi slt, %15, %arg4 : i32
        %19 = arith.andi %17, %18 : i1
        %20 = arith.andi %6, %19 : i1
        scf.if %20 {
          %21 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %23 = arith.muli %arg7, %0 : index
            %24 = arith.addi %23, %12 : index
            %25 = arith.addi %24, %16 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = emitc.mul %arg8, %26 : (f32, f32) -> f32
            scf.yield %27 : f32
          }
          %22 = arith.addi %14, %16 : index
          memref.store %21, %arg1[%22] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c32_i32 = arith.constant 32 : i32
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %3 = arith.index_cast %2 : i64 to index
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.cmpi eq, %arg5, %c1_i32 : i32
      scf.for %arg6 = %c0 to %c32 step %c1 {
        %7 = arith.index_cast %arg6 : index to i32
        %8 = arith.addi %5, %7 : i32
        %9 = arith.divsi %8, %arg4 : i32
        %10 = arith.muli %9, %arg3 : i32
        %11 = arith.muli %10, %arg4 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.muli %9, %arg4 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.remsi %8, %arg4 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.cmpi slt, %9, %arg2 : i32
        %18 = arith.cmpi slt, %15, %arg4 : i32
        %19 = arith.andi %17, %18 : i1
        %20 = arith.andi %6, %19 : i1
        emitc.if %20 {
          %21 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %23 = arith.muli %arg7, %0 : index
            %24 = arith.addi %23, %12 : index
            %25 = arith.addi %24, %16 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = emitc.mul %arg8, %26 : (f32, f32) -> f32
            scf.yield %27 : f32
          }
          %22 = arith.addi %14, %16 : index
          memref.store %21, %arg1[%22] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24product_reduction_kernelPKfPfiiii_0 {
    gpu.func @_Z24product_reduction_kernelPKfPfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32) {
      %c32_i32 = arith.constant 32 : i32
      %c1_i32 = arith.constant 1 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %3 = arith.index_cast %2 : i64 to index
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %4, %c32_i32 : i32
      %6 = arith.cmpi eq, %arg5, %c1_i32 : i32
      scf.for %arg6 = %c0 to %c32 step %c1 {
        %7 = arith.index_cast %arg6 : index to i32
        %8 = arith.addi %5, %7 : i32
        %9 = arith.divsi %8, %arg4 : i32
        %10 = arith.muli %9, %arg3 : i32
        %11 = arith.muli %10, %arg4 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.muli %9, %arg4 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.remsi %8, %arg4 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.cmpi slt, %9, %arg2 : i32
        %18 = arith.cmpi slt, %15, %arg4 : i32
        %19 = arith.andi %17, %18 : i1
        %20 = arith.andi %6, %19 : i1
        emitc.if %20 {
          %21 = scf.for %arg7 = %c0 to %1 step %c1 iter_args(%arg8 = %cst) -> (f32) {
            %23 = arith.muli %arg7, %0 : index
            %24 = arith.addi %23, %12 : index
            %25 = arith.addi %24, %16 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = emitc.mul %arg8, %26 : (f32, f32) -> f32
            scf.yield %27 : f32
          }
          %22 = arith.addi %14, %16 : index
          memref.store %21, %arg1[%22] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

