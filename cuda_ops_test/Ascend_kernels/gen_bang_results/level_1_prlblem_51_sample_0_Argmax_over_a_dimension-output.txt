warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z33__device_stub__argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z18argmax_dim1_kernelPKfPliii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xi64>, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i64 = arith.constant 0 : i64
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg3 : i32
    %5 = arith.muli %4, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg4 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_id  y
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = arith.addi %10, %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.index_cast %16 : i32 to index
    %19 = arith.cmpi slt, %16, %arg4 : i32
    scf.if %19 {
      %20:2 = affine.for %arg5 = 0 to %1 iter_args(%arg6 = %c0_i64, %arg7 = %cst) -> (i64, f32) {
        %21 = arith.index_cast %arg5 : index to i32
        %22 = affine.load %arg0[%arg5 * symbol(%0) + symbol(%6) + symbol(%17)] : memref<?xf32>
        %23 = arith.cmpf ogt, %22, %arg7 : f32
        %24 = arith.select %23, %22, %arg7 : f32
        %25 = scf.if %23 -> (i64) {
          %26 = arith.extsi %21 : i32 to i64
          scf.yield %26 : i64
        } else {
          scf.yield %arg6 : i64
        }
        affine.yield %25, %24 : i64, f32
      }
      affine.store %20#0, %arg1[symbol(%8) + symbol(%18)] : memref<?xi64>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i64 = arith.constant 0 : i64
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg3 : i32
    %5 = arith.muli %4, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg4 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_id  y
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = arith.addi %10, %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.cmpi slt, %16, %arg4 : i32
    scf.if %18 {
      %19:2 = affine.for %arg5 = 0 to %1 iter_args(%arg6 = %c0_i64, %arg7 = %cst) -> (i64, f32) {
        %20 = arith.index_cast %arg5 : index to i32
        %21 = affine.load %arg0[%arg5 * symbol(%0) + symbol(%6) + symbol(%17)] : memref<?xf32>
        %22 = arith.cmpf ogt, %21, %arg7 : f32
        %23 = arith.select %22, %21, %arg7 : f32
        %24 = scf.if %22 -> (i64) {
          %25 = arith.extsi %20 : i32 to i64
          scf.yield %25 : i64
        } else {
          scf.yield %arg6 : i64
        }
        affine.yield %24, %23 : i64, f32
      }
      affine.store %19#0, %arg1[symbol(%8) + symbol(%17)] : memref<?xi64>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c0_i64 = arith.constant 0 : i64
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg3 : i32
    %5 = arith.muli %4, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg4 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_id  y
    %12 = arith.index_cast %11 : index to i32
    %13 = gpu.block_dim  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %12, %14 : i32
    %16 = arith.addi %10, %15 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.cmpi slt, %16, %arg4 : i32
    scf.if %18 {
      %19:2 = scf.for %arg5 = %c0 to %1 step %c1 iter_args(%arg6 = %c0_i64, %arg7 = %cst) -> (i64, f32) {
        %21 = arith.index_cast %arg5 : index to i32
        %22 = arith.muli %arg5, %0 : index
        %23 = arith.addi %22, %6 : index
        %24 = arith.addi %23, %17 : index
        %25 = memref.load %arg0[%24] : memref<?xf32>
        %26 = arith.cmpf ogt, %25, %arg7 : f32
        %27 = arith.select %26, %25, %arg7 : f32
        %28 = scf.if %26 -> (i64) {
          %29 = arith.extsi %21 : i32 to i64
          scf.yield %29 : i64
        } else {
          scf.yield %arg6 : i64
        }
        scf.yield %28, %27 : i64, f32
      }
      %20 = arith.addi %8, %17 : index
      memref.store %19#0, %arg1[%20] : memref<?xi64>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %c0_i64 = arith.constant 0 : i64
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.muli %3, %arg4 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = arith.index_cast %arg5 : index to i32
      %10 = gpu.block_id  y
      %11 = arith.index_cast %10 : index to i32
      %12 = gpu.block_dim  x
      %13 = arith.index_cast %12 : index to i32
      %14 = arith.muli %11, %13 : i32
      %15 = arith.addi %9, %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.cmpi slt, %15, %arg4 : i32
      scf.if %17 {
        %18:2 = scf.for %arg6 = %c0_1 to %1 step %c1_0 iter_args(%arg7 = %c0_i64, %arg8 = %cst) -> (i64, f32) {
          %20 = arith.index_cast %arg6 : index to i32
          %21 = arith.muli %arg6, %0 : index
          %22 = arith.addi %21, %6 : index
          %23 = arith.addi %22, %16 : index
          %24 = memref.load %arg0[%23] : memref<?xf32>
          %25 = arith.cmpf ogt, %24, %arg8 : f32
          %26 = arith.select %25, %24, %arg8 : f32
          %27 = scf.if %25 -> (i64) {
            %28 = arith.extsi %20 : i32 to i64
            scf.yield %28 : i64
          } else {
            scf.yield %arg7 : i64
          }
          scf.yield %27, %26 : i64, f32
        }
        %19 = arith.addi %8, %16 : index
        memref.store %18#0, %arg1[%19] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %c0_i64 = arith.constant 0 : i64
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.muli %3, %arg4 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = arith.index_cast %arg5 : index to i32
      %10 = gpu.block_id  y
      %11 = arith.index_cast %10 : index to i32
      %12 = gpu.block_dim  x
      %13 = arith.index_cast %12 : index to i32
      %14 = arith.muli %11, %13 : i32
      %15 = arith.addi %9, %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.cmpi slt, %15, %arg4 : i32
      scf.if %17 {
        %18:2 = scf.for %arg6 = %c0_1 to %1 step %c1_0 iter_args(%arg7 = %c0_i64, %arg8 = %cst) -> (i64, f32) {
          %20 = arith.index_cast %arg6 : index to i32
          %21 = arith.muli %arg6, %0 : index
          %22 = arith.addi %21, %6 : index
          %23 = arith.addi %22, %16 : index
          %24 = memref.load %arg0[%23] : memref<?xf32>
          %25 = arith.cmpf ogt, %24, %arg8 : f32
          %26 = arith.select %25, %24, %arg8 : f32
          %27 = scf.if %25 -> (i64) {
            %28 = arith.extsi %20 : i32 to i64
            scf.yield %28 : i64
          } else {
            scf.yield %arg7 : i64
          }
          scf.yield %27, %26 : i64, f32
        }
        %19 = arith.addi %8, %16 : index
        memref.store %18#0, %arg1[%19] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %c0_i64 = arith.constant 0 : i64
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg3 : i32 to index
    %2 = gpu.block_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %3, %arg3 : i32
    %5 = arith.muli %4, %arg4 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %3, %arg4 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = gpu.block_id  y
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_dim  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.muli %10, %12 : i32
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %14 = arith.index_cast %arg5 : index to i32
      %15 = arith.addi %14, %13 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.cmpi slt, %15, %arg4 : i32
      scf.if %17 {
        %18:2 = scf.for %arg6 = %c0 to %1 step %c1 iter_args(%arg7 = %c0_i64, %arg8 = %cst) -> (i64, f32) {
          %20 = arith.index_cast %arg6 : index to i32
          %21 = arith.muli %arg6, %0 : index
          %22 = arith.addi %21, %6 : index
          %23 = arith.addi %22, %16 : index
          %24 = memref.load %arg0[%23] : memref<?xf32>
          %25 = arith.cmpf ogt, %24, %arg8 : f32
          %26 = arith.select %25, %24, %arg8 : f32
          %27 = scf.if %25 -> (i64) {
            %28 = arith.extsi %20 : i32 to i64
            scf.yield %28 : i64
          } else {
            scf.yield %arg7 : i64
          }
          scf.yield %27, %26 : i64, f32
        }
        %19 = arith.addi %8, %16 : index
        memref.store %18#0, %arg1[%19] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18argmax_dim1_kernelPKfPliii_0 {
    gpu.func @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c0_i64 = arith.constant 0 : i64
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.muli %3, %arg4 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = gpu.block_id  y
      %10 = arith.index_cast %9 : index to i32
      %11 = gpu.block_dim  x
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %10, %12 : i32
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %14 = arith.index_cast %arg5 : index to i32
        %15 = arith.addi %14, %13 : i32
        %16 = arith.index_cast %15 : i32 to index
        %17 = arith.cmpi slt, %15, %arg4 : i32
        scf.if %17 {
          %18:2 = scf.for %arg6 = %c0 to %1 step %c1 iter_args(%arg7 = %c0_i64, %arg8 = %cst) -> (i64, f32) {
            %20 = arith.index_cast %arg6 : index to i32
            %21 = arith.muli %arg6, %0 : index
            %22 = arith.addi %21, %6 : index
            %23 = arith.addi %22, %16 : index
            %24 = memref.load %arg0[%23] : memref<?xf32>
            %25 = arith.cmpf ogt, %24, %arg8 : f32
            %26 = arith.select %25, %24, %arg8 : f32
            %27 = scf.if %25 -> (i64) {
              %28 = arith.extsi %20 : i32 to i64
              scf.yield %28 : i64
            } else {
              scf.yield %arg7 : i64
            }
            scf.yield %27, %26 : i64, f32
          }
          %19 = arith.addi %8, %16 : index
          memref.store %18#0, %arg1[%19] : memref<?xi64>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18argmax_dim1_kernelPKfPliii_0 {
    gpu.func @_Z18argmax_dim1_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c0_i64 = arith.constant 0 : i64
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg4 : i32 to index
      %1 = arith.index_cast %arg3 : i32 to index
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %3, %arg3 : i32
      %5 = arith.muli %4, %arg4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.muli %3, %arg4 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = gpu.block_id  y
      %10 = arith.index_cast %9 : index to i32
      %c32_0 = arith.constant 32 : index
      %11 = arith.index_cast %c32_0 : index to i32
      %12 = arith.muli %10, %11 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %13 = arith.index_cast %arg5 : index to i32
        %14 = arith.addi %13, %12 : i32
        %15 = arith.index_cast %14 : i32 to index
        %16 = arith.cmpi slt, %14, %arg4 : i32
        scf.if %16 {
          %17:2 = scf.for %arg6 = %c0 to %1 step %c1 iter_args(%arg7 = %c0_i64, %arg8 = %cst) -> (i64, f32) {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.muli %arg6, %0 : index
            %21 = arith.addi %20, %6 : index
            %22 = arith.addi %21, %15 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = arith.cmpf ogt, %23, %arg8 : f32
            %25 = arith.select %24, %23, %arg8 : f32
            %26 = scf.if %24 -> (i64) {
              %27 = arith.extsi %19 : i32 to i64
              scf.yield %27 : i64
            } else {
              scf.yield %arg7 : i64
            }
            scf.yield %26, %25 : i64, f32
          }
          %18 = arith.addi %8, %15 : index
          memref.store %17#0, %arg1[%18] : memref<?xi64>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %arg3 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%4 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%6 = arith.index_cast %5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%10 = arith.index_cast %9 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%13 = arith.index_cast %12 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%15 = gpu.block_id  y
[ict-error] GPUBlockIdToNPULowering: block id dimension is not x

