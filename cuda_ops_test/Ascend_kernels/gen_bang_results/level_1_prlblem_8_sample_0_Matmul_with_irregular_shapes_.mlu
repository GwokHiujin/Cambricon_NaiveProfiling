#include <bang.h>
__mlu_global__ void matmul_kernel(float* v1, float* v2, float* v3, int32_t v4, int32_t v5, int32_t v6) {
  int32_t c4294967295_7 = -1;
  bool c0_8 = false;
  float v9 = (float)0.0e+00;
  int32_t c32_10 = 32;
  size_t c18446744073709551615_11 = -1;
  size_t c18446744073709551584_12 = -32;
  size_t c0_13 = 0;
  size_t c1_14 = 1;
  size_t c32_15 = 32;
  __nram__ int8_t v16[1024];
  float* v17 = (float*)v16;
  __nram__ int8_t v18[1024];
  float* v19 = (float*)v18;
  __nram__ int8_t v20[32];
  float* v21 = (float*)v20;
  for (size_t v22 = c0_13; v22 < c32_15; v22 += c1_14) {
    v21[v22] = v9;
  }
  int32_t v23 = (v6) + (c4294967295_7);
  int32_t v24 = (v23) / (c32_10);
  size_t v25 = (size_t) v24;
  size_t v26 = (v25) + (c1_14);
  int64_t v27 = taskIdX;
  size_t v28 = (size_t) v27;
  int32_t v29 = (int32_t) v28;
  int32_t v30 = (v29) * (c32_10);
  int64_t v31 = taskIdY;
  size_t v32 = (size_t) v31;
  int32_t v33 = (int32_t) v32;
  int32_t v34 = (v33) * (c32_10);
  int32_t v35 = (v34) * (v6);
  size_t v36 = (size_t) v35;
  size_t v37 = (size_t) v34;
  size_t v38 = (size_t) v5;
  size_t v39 = (size_t) v6;
  size_t v40 = (size_t) v4;
  size_t v41 = (v40) - (v37);
  size_t v42 = (v41) + (c18446744073709551615_11);
  bool v43 = v42 >= c0_13;
  for (size_t v44 = c0_13; v44 < v26; v44 += c1_14) {
    int32_t v45 = (int32_t) v44;
    size_t v46 = (v44) * (c18446744073709551584_12);
    size_t v47 = (v46) + (v39);
    size_t v48 = (v47) + (c18446744073709551615_11);
    bool v49 = v48 >= c0_13;
    int32_t v50 = (v45) * (c32_10);
    size_t v51 = (v44) * (c32_15);
    size_t v52 = (v51) + (v36);
    size_t v53 = (v51) * (v38);
    for (size_t v54 = c0_13; v54 < c32_15; v54 += c1_14) {
      int32_t v55 = (int32_t) v54;
      int32_t v56 = (v30) + (v55);
      size_t v57 = (size_t) v56;
      bool v58;
      if (v43) {
        int32_t v59 = (v50) + (v55);
        bool v60 = v59 < v6;
        v58 = v60;
      } else {
        v58 = c0_8;
      };
      if (v58) {
        size_t v61 = (v52) + (v54);
        float v62 = v1[v61];
        v19[32*c0_13 + 1*v54 +  0] = v62;
      } else {
        v19[32*c0_13 + 1*v54 +  0] = v9;
      };
      size_t v63 = (v38) - (v57);
      size_t v64 = (v63) + (c18446744073709551615_11);
      bool v65 = v64 >= c0_13;
      bool v66 = (v49) & (v65);
      if (v66) {
        size_t v67 = (v53) + (v57);
        float v68 = v2[v67];
        v17[32*c0_13 + 1*v54 +  0] = v68;
      } else {
        v17[32*c0_13 + 1*v54 +  0] = v9;
      };
    };
    for (size_t v69 = c0_13; v69 < c32_15; v69 += c1_14) {
      float v70 = v21[v69];
      float v71;
      float v72 = v70;
      for (size_t v73 = c0_13; v73 < c32_15; v73 += c1_14) {
        float v74 = v19[32*c0_13 + 1*v73 +  0];
        float v75 = v17[32*v73 + 1*v69 +  0];
        float v76 = v74 * v75;
        float v77 = v72 + v76;
        v72 = v77;
      }
      v71 = v72;;
      v21[v69] = v71;
    };
  }
  int32_t v78 = (v34) * (v5);
  size_t v79 = (size_t) v78;
  bool v80 = v34 < v4;
  for (size_t v81 = c0_13; v81 < c32_15; v81 += c1_14) {
    int32_t v82 = (int32_t) v81;
    int32_t v83 = (v30) + (v82);
    size_t v84 = (size_t) v83;
    bool v85 = v83 < v5;
    float v86 = v21[v81];
    bool v87 = (v80) & (v85);
    if (v87) {
      size_t v88 = (v79) + (v84);
      v3[v88] = v86;
    };
  }
  return;
}




