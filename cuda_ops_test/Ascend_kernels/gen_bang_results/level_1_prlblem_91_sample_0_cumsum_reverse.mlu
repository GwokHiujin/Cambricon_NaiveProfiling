#include <bang.h>
__mlu_global__ void reverse_cumsum_kernel(float* v1, float* v2, int32_t v3, int32_t v4) {
  float v5 = (float)0.0e+00;
  size_t c18446744073709551615_6 = -1;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  size_t v10 = (size_t) v4;
  int64_t v11 = taskIdX;
  size_t v12 = (size_t) v11;
  int32_t v13 = (int32_t) v12;
  int32_t v14 = (v13) * (v4);
  size_t v15 = (size_t) v14;
  bool v16 = v13 < v3;
  for (size_t v17 = c0_7; v17 < c32_9; v17 += c1_8) {
    if (v16) {
      float v18;
      float v19 = v5;
      for (size_t v20 = c0_7; v20 < v10; v20 += c1_8) {
        size_t v21 = (v15) - (v20);
        size_t v22 = (v21) + (v10);
        size_t v23 = (v22) + (c18446744073709551615_6);
        float v24 = v1[v23];
        float v25 = v19 + v24;
        v2[v23] = v25;
        v19 = v25;
      }
      v18 = v19;;
    };
  }
  return;
}




