warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z35__device_stub__masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xi8>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i8 = arith.constant 0 : i8
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.divsi %7, %arg4 : i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.index_cast %9 : i32 to index
    %12 = arith.index_cast %9 : i32 to index
    %13 = arith.remsi %7, %arg4 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.index_cast %13 : i32 to index
    %16 = arith.cmpi slt, %8, %arg3 : i32
    %17 = arith.cmpi slt, %13, %arg4 : i32
    %18 = arith.andi %16, %17 : i1
    scf.if %18 {
      %19 = affine.for %arg5 = 0 to affine_map<()[s0] -> (s0 + 1)>()[%14] iter_args(%arg6 = %cst) -> (f32) {
        %20 = affine.load %arg1[%arg5 + symbol(%10)] : memref<?xi8>
        %21 = arith.cmpi ne, %20, %c0_i8 : i8
        %22 = scf.if %21 -> (f32) {
          %23 = affine.load %arg0[%arg5 + symbol(%11)] : memref<?xf32>
          %24 = arith.addf %arg6, %23 : f32
          scf.yield %24 : f32
        } else {
          scf.yield %arg6 : f32
        }
        affine.yield %22 : f32
      }
      affine.store %19, %arg2[symbol(%12) + symbol(%15)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i8 = arith.constant 0 : i8
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.divsi %7, %arg4 : i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.remsi %7, %arg4 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.cmpi slt, %8, %arg3 : i32
    %14 = arith.cmpi slt, %11, %arg4 : i32
    %15 = arith.andi %13, %14 : i1
    scf.if %15 {
      %16 = affine.for %arg5 = 0 to affine_map<()[s0] -> (s0 + 1)>()[%12] iter_args(%arg6 = %cst) -> (f32) {
        %17 = affine.load %arg1[%arg5 + symbol(%10)] : memref<?xi8>
        %18 = arith.cmpi ne, %17, %c0_i8 : i8
        %19 = scf.if %18 -> (f32) {
          %20 = affine.load %arg0[%arg5 + symbol(%10)] : memref<?xf32>
          %21 = arith.addf %arg6, %20 : f32
          scf.yield %21 : f32
        } else {
          scf.yield %arg6 : f32
        }
        affine.yield %19 : f32
      }
      affine.store %16, %arg2[symbol(%10) + symbol(%12)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c0_i8 = arith.constant 0 : i8
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.divsi %7, %arg4 : i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.remsi %7, %arg4 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.cmpi slt, %8, %arg3 : i32
    %14 = arith.cmpi slt, %11, %arg4 : i32
    %15 = arith.andi %13, %14 : i1
    scf.if %15 {
      %16 = arith.addi %12, %c1 : index
      %17 = scf.for %arg5 = %c0 to %16 step %c1 iter_args(%arg6 = %cst) -> (f32) {
        %19 = arith.addi %arg5, %10 : index
        %20 = memref.load %arg1[%19] : memref<?xi8>
        %21 = arith.cmpi ne, %20, %c0_i8 : i8
        %22 = scf.if %21 -> (f32) {
          %23 = memref.load %arg0[%19] : memref<?xf32>
          %24 = arith.addf %arg6, %23 : f32
          scf.yield %24 : f32
        } else {
          scf.yield %arg6 : f32
        }
        scf.yield %22 : f32
      }
      %18 = arith.addi %10, %12 : index
      memref.store %17, %arg2[%18] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %c0_i8 = arith.constant 0 : i8
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg5 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.divsi %6, %arg4 : i32
      %8 = arith.muli %7, %arg4 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = arith.remsi %6, %arg4 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.cmpi slt, %7, %arg3 : i32
      %13 = arith.cmpi slt, %10, %arg4 : i32
      %14 = arith.andi %12, %13 : i1
      scf.if %14 {
        %15 = arith.addi %11, %c1_0 : index
        %16 = scf.for %arg6 = %c0_1 to %15 step %c1_0 iter_args(%arg7 = %cst) -> (f32) {
          %18 = arith.addi %arg6, %9 : index
          %19 = memref.load %arg1[%18] : memref<?xi8>
          %20 = arith.cmpi ne, %19, %c0_i8 : i8
          %21 = scf.if %20 -> (f32) {
            %22 = memref.load %arg0[%18] : memref<?xf32>
            %23 = arith.addf %arg7, %22 : f32
            scf.yield %23 : f32
          } else {
            scf.yield %arg7 : f32
          }
          scf.yield %21 : f32
        }
        %17 = arith.addi %9, %11 : index
        memref.store %16, %arg2[%17] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %c0_i8 = arith.constant 0 : i8
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg5 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.divsi %6, %arg4 : i32
      %8 = arith.muli %7, %arg4 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = arith.remsi %6, %arg4 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.cmpi slt, %7, %arg3 : i32
      %13 = arith.cmpi slt, %10, %arg4 : i32
      %14 = arith.andi %12, %13 : i1
      scf.if %14 {
        %15 = arith.addi %11, %c1_0 : index
        %16 = scf.for %arg6 = %c0_1 to %15 step %c1_0 iter_args(%arg7 = %cst) -> (f32) {
          %18 = arith.addi %arg6, %9 : index
          %19 = memref.load %arg1[%18] : memref<?xi8>
          %20 = arith.cmpi ne, %19, %c0_i8 : i8
          %21 = scf.if %20 -> (f32) {
            %22 = memref.load %arg0[%18] : memref<?xf32>
            %23 = arith.addf %arg7, %22 : f32
            scf.yield %23 : f32
          } else {
            scf.yield %arg7 : f32
          }
          scf.yield %21 : f32
        }
        %17 = arith.addi %9, %11 : index
        memref.store %16, %arg2[%17] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0_i8 = arith.constant 0 : i8
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %5 = arith.index_cast %arg5 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.divsi %6, %arg4 : i32
      %8 = arith.muli %7, %arg4 : i32
      %9 = arith.index_cast %8 : i32 to index
      %10 = arith.remsi %6, %arg4 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.cmpi slt, %7, %arg3 : i32
      %13 = arith.cmpi slt, %10, %arg4 : i32
      %14 = arith.andi %12, %13 : i1
      scf.if %14 {
        %15 = arith.addi %11, %c1 : index
        %16 = scf.for %arg6 = %c0 to %15 step %c1 iter_args(%arg7 = %cst) -> (f32) {
          %18 = arith.addi %arg6, %9 : index
          %19 = memref.load %arg1[%18] : memref<?xi8>
          %20 = arith.cmpi ne, %19, %c0_i8 : i8
          %21 = scf.if %20 -> (f32) {
            %22 = memref.load %arg0[%18] : memref<?xf32>
            %23 = arith.addf %arg7, %22 : f32
            scf.yield %23 : f32
          } else {
            scf.yield %arg7 : f32
          }
          scf.yield %21 : f32
        }
        %17 = arith.addi %9, %11 : index
        memref.store %16, %arg2[%17] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z20masked_cumsum_kernelPKfPKbPfii_0 {
    gpu.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i8 = arith.constant 0 : i8
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %5 = arith.index_cast %arg5 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.divsi %6, %arg4 : i32
        %8 = arith.muli %7, %arg4 : i32
        %9 = arith.index_cast %8 : i32 to index
        %10 = arith.remsi %6, %arg4 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.cmpi slt, %7, %arg3 : i32
        %13 = arith.cmpi slt, %10, %arg4 : i32
        %14 = arith.andi %12, %13 : i1
        scf.if %14 {
          %15 = arith.addi %11, %c1 : index
          %16 = scf.for %arg6 = %c0 to %15 step %c1 iter_args(%arg7 = %cst) -> (f32) {
            %18 = arith.addi %arg6, %9 : index
            %19 = memref.load %arg1[%18] : memref<?xi8>
            %20 = arith.cmpi ne, %19, %c0_i8 : i8
            %21 = scf.if %20 -> (f32) {
              %22 = memref.load %arg0[%18] : memref<?xf32>
              %23 = arith.addf %arg7, %22 : f32
              scf.yield %23 : f32
            } else {
              scf.yield %arg7 : f32
            }
            scf.yield %21 : f32
          }
          %17 = arith.addi %9, %11 : index
          memref.store %16, %arg2[%17] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z20masked_cumsum_kernelPKfPKbPfii_0 {
    gpu.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i8 = arith.constant 0 : i8
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %c32_0 = arith.constant 32 : index
      %2 = arith.index_cast %c32_0 : index to i32
      %3 = arith.muli %1, %2 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %4 = arith.index_cast %arg5 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.divsi %5, %arg4 : i32
        %7 = arith.muli %6, %arg4 : i32
        %8 = arith.index_cast %7 : i32 to index
        %9 = arith.remsi %5, %arg4 : i32
        %10 = arith.index_cast %9 : i32 to index
        %11 = arith.cmpi slt, %6, %arg3 : i32
        %12 = arith.cmpi slt, %9, %arg4 : i32
        %13 = arith.andi %11, %12 : i1
        scf.if %13 {
          %14 = arith.addi %10, %c1 : index
          %15 = scf.for %arg6 = %c0 to %14 step %c1 iter_args(%arg7 = %cst) -> (f32) {
            %17 = arith.addi %arg6, %8 : index
            %18 = memref.load %arg1[%17] : memref<?xi8>
            %19 = arith.cmpi ne, %18, %c0_i8 : i8
            %20 = scf.if %19 -> (f32) {
              %21 = memref.load %arg0[%17] : memref<?xf32>
              %22 = arith.addf %arg7, %21 : f32
              scf.yield %22 : f32
            } else {
              scf.yield %arg7 : f32
            }
            scf.yield %20 : f32
          }
          %16 = arith.addi %8, %10 : index
          memref.store %15, %arg2[%16] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%0 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %1 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%7 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%12 = arith.index_cast %11 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%15 = arith.index_cast %14 : i32 to index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z20masked_cumsum_kernelPKfPKbPfii_0 {
    gpu.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i8 = arith.constant 0 : i8
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() : () -> i64
      %1 = emitc.cast %0 : i64 to i32
      %c32_0 = arith.constant 32 : index
      %c32_i32 = arith.constant 32 : i32
      %2 = arith.muli %1, %c32_i32 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_1 {
        %3 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %4 = emitc.cast %3 : i64 to i32
        %5 = arith.addi %2, %4 : i32
        %6 = arith.divsi %5, %arg4 : i32
        %7 = arith.muli %6, %arg4 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.remsi %5, %arg4 : i32
        %10 = emitc.cast %9 : i32 to index
        %11 = arith.cmpi slt, %6, %arg3 : i32
        %12 = arith.cmpi slt, %9, %arg4 : i32
        %13 = arith.andi %11, %12 : i1
        scf.if %13 {
          %14 = arith.addi %10, %c1 : index
          %15 = scf.for %arg6 = %c0 to %14 step %c1 iter_args(%arg7 = %cst) -> (f32) {
            %17 = arith.addi %arg6, %8 : index
            %18 = memref.load %arg1[%17] : memref<?xi8>
            %19 = arith.cmpi ne, %18, %c0_i8 : i8
            %20 = scf.if %19 -> (f32) {
              %21 = memref.load %arg0[%17] : memref<?xf32>
              %22 = emitc.add %arg7, %21 : (f32, f32) -> f32
              scf.yield %22 : f32
            } else {
              scf.yield %arg7 : f32
            }
            scf.yield %20 : f32
          }
          %16 = arith.addi %8, %10 : index
          memref.store %15, %arg2[%16] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z20masked_cumsum_kernelPKfPKbPfii_0 {
    gpu.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i8 = arith.constant 0 : i8
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() : () -> i64
      %1 = emitc.cast %0 : i64 to i32
      %2 = arith.muli %1, %c32_i32 : i32
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %3 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %4 = emitc.cast %3 : i64 to i32
        %5 = arith.addi %2, %4 : i32
        %6 = arith.divsi %5, %arg4 : i32
        %7 = arith.muli %6, %arg4 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.remsi %5, %arg4 : i32
        %10 = emitc.cast %9 : i32 to index
        %11 = arith.cmpi slt, %6, %arg3 : i32
        %12 = arith.cmpi slt, %9, %arg4 : i32
        %13 = arith.andi %11, %12 : i1
        scf.if %13 {
          %14 = arith.addi %10, %c1 : index
          %15 = scf.for %arg6 = %c0 to %14 step %c1 iter_args(%arg7 = %cst) -> (f32) {
            %17 = arith.addi %arg6, %8 : index
            %18 = memref.load %arg1[%17] : memref<?xi8>
            %19 = arith.cmpi ne, %18, %c0_i8 : i8
            %20 = scf.if %19 -> (f32) {
              %21 = memref.load %arg0[%17] : memref<?xf32>
              %22 = emitc.add %arg7, %21 : (f32, f32) -> f32
              scf.yield %22 : f32
            } else {
              scf.yield %arg7 : f32
            }
            scf.yield %20 : f32
          }
          %16 = arith.addi %8, %10 : index
          memref.store %15, %arg2[%16] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z20masked_cumsum_kernelPKfPKbPfii_0 {
    gpu.func @_Z20masked_cumsum_kernelPKfPKbPfii(%arg0: memref<?xf32>, %arg1: memref<?xi8>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i8 = arith.constant 0 : i8
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() : () -> i64
      %1 = emitc.cast %0 : i64 to i32
      %2 = arith.muli %1, %c32_i32 : i32
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %3 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %4 = emitc.cast %3 : i64 to i32
        %5 = arith.addi %2, %4 : i32
        %6 = arith.divsi %5, %arg4 : i32
        %7 = arith.muli %6, %arg4 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.remsi %5, %arg4 : i32
        %10 = emitc.cast %9 : i32 to index
        %11 = arith.cmpi slt, %6, %arg3 : i32
        %12 = arith.cmpi slt, %9, %arg4 : i32
        %13 = arith.andi %11, %12 : i1
        emitc.if %13 {
          %14 = arith.addi %10, %c1 : index
          %15 = scf.for %arg6 = %c0 to %14 step %c1 iter_args(%arg7 = %cst) -> (f32) {
            %17 = arith.addi %arg6, %8 : index
            %18 = memref.load %arg1[%17] : memref<?xi8>
            %19 = arith.cmpi ne, %18, %c0_i8 : i8
            %20 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
            emitc.if %19 {
              %21 = memref.load %arg0[%17] : memref<?xf32>
              %22 = emitc.add %arg7, %21 : (f32, f32) -> f32
              emitc.assign %22 : f32 to %20 : f32
            } else {
              emitc.assign %arg7 : f32 to %20 : f32
            }
            scf.yield %20 : f32
          }
          %16 = arith.addi %8, %10 : index
          memref.store %15, %arg2[%16] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("./Ascend_kernels/gen_cuda_kernels/level_1_prlblem_93_sample_0_masked_cumsum.cu":2:17): error: ICT_ERROR(): cannot emit MemRef element type: 'memref<?xi8, 1>'
[ict-debug] driver.cc: After emitc::translateToCpp:

