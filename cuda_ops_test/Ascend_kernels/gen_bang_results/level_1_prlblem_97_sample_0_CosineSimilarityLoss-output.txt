warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z44__device_stub__cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 9.99999993E-9 : f32
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.cmpi slt, %1, %arg3 : i32
    scf.if %2 {
      %3 = arith.muli %1, %arg4 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = arith.muli %1, %arg4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = gpu.thread_id  x
      %8 = gpu.block_dim  x
      %9 = arith.index_cast %arg4 : i32 to index
      %10:3 = scf.for %arg5 = %7 to %9 step %8 iter_args(%arg6 = %cst_1, %arg7 = %cst_1, %arg8 = %cst_1) -> (f32, f32, f32) {
        %51 = arith.subi %arg5, %7 : index
        %52 = arith.divui %51, %8 : index
        %53 = arith.muli %52, %8 : index
        %54 = arith.addi %7, %53 : index
        %55 = arith.addi %54, %4 : index
        %56 = memref.load %arg0[%55] : memref<?xf32>
        %57 = arith.addi %54, %6 : index
        %58 = memref.load %arg1[%57] : memref<?xf32>
        %59 = arith.mulf %56, %58 : f32
        %60 = arith.addf %arg8, %59 : f32
        %61 = arith.mulf %56, %56 : f32
        %62 = arith.addf %arg7, %61 : f32
        %63 = arith.mulf %58, %58 : f32
        %64 = arith.addf %arg6, %63 : f32
        scf.yield %64, %62, %60 : f32, f32, f32
      }
      %11 = gpu.thread_id  x
      memref.store %10#2, %alloca[%11] : memref<1xf32, 5>
      nvvm.barrier0
      %12 = gpu.block_dim  x
      %13 = arith.index_cast %12 : index to i32
      %14 = arith.divui %13, %c2_i32 : i32
      %15 = math.ctlz %14 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.subi %c32, %16 : index
      %18 = arith.divui %13, %c2_i32 : i32
      %19 = gpu.thread_id  x
      %20 = arith.index_cast %19 : index to i32
      scf.for %arg5 = %c0 to %17 step %c1 {
        %51 = arith.index_cast %arg5 : index to i32
        %52 = arith.shrui %18, %51 : i32
        %53 = arith.cmpi ult, %20, %52 : i32
        scf.if %53 {
          %54 = arith.addi %20, %52 : i32
          %55 = arith.index_cast %54 : i32 to index
          %56 = memref.load %alloca[%55] : memref<1xf32, 5>
          %57 = memref.load %alloca[%19] : memref<1xf32, 5>
          %58 = arith.addf %57, %56 : f32
          memref.store %58, %alloca[%19] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %21 = affine.load %alloca[0] : memref<1xf32, 5>
      %22 = gpu.thread_id  x
      memref.store %10#1, %alloca[%22] : memref<1xf32, 5>
      nvvm.barrier0
      %23 = gpu.block_dim  x
      %24 = arith.index_cast %23 : index to i32
      %25 = arith.divui %24, %c2_i32 : i32
      %26 = math.ctlz %25 : i32
      %27 = arith.index_cast %26 : i32 to index
      %28 = arith.subi %c32, %27 : index
      %29 = arith.divui %24, %c2_i32 : i32
      %30 = gpu.thread_id  x
      %31 = arith.index_cast %30 : index to i32
      scf.for %arg5 = %c0 to %28 step %c1 {
        %51 = arith.index_cast %arg5 : index to i32
        %52 = arith.shrui %29, %51 : i32
        %53 = arith.cmpi ult, %31, %52 : i32
        scf.if %53 {
          %54 = arith.addi %31, %52 : i32
          %55 = arith.index_cast %54 : i32 to index
          %56 = memref.load %alloca[%55] : memref<1xf32, 5>
          %57 = memref.load %alloca[%30] : memref<1xf32, 5>
          %58 = arith.addf %57, %56 : f32
          memref.store %58, %alloca[%30] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %32 = affine.load %alloca[0] : memref<1xf32, 5>
      %33 = arith.addf %32, %cst_0 : f32
      %34 = math.sqrt %33 : f32
      %35 = gpu.thread_id  x
      memref.store %10#0, %alloca[%35] : memref<1xf32, 5>
      nvvm.barrier0
      %36 = gpu.block_dim  x
      %37 = arith.index_cast %36 : index to i32
      %38 = arith.divui %37, %c2_i32 : i32
      %39 = math.ctlz %38 : i32
      %40 = arith.index_cast %39 : i32 to index
      %41 = arith.subi %c32, %40 : index
      %42 = arith.divui %37, %c2_i32 : i32
      %43 = gpu.thread_id  x
      %44 = arith.index_cast %43 : index to i32
      scf.for %arg5 = %c0 to %41 step %c1 {
        %51 = arith.index_cast %arg5 : index to i32
        %52 = arith.shrui %42, %51 : i32
        %53 = arith.cmpi ult, %44, %52 : i32
        scf.if %53 {
          %54 = arith.addi %44, %52 : i32
          %55 = arith.index_cast %54 : i32 to index
          %56 = memref.load %alloca[%55] : memref<1xf32, 5>
          %57 = memref.load %alloca[%43] : memref<1xf32, 5>
          %58 = arith.addf %57, %56 : f32
          memref.store %58, %alloca[%43] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %45 = affine.load %alloca[0] : memref<1xf32, 5>
      %46 = arith.addf %45, %cst_0 : f32
      %47 = math.sqrt %46 : f32
      %48 = gpu.thread_id  x
      %49 = arith.index_cast %48 : index to i32
      %50 = arith.cmpi eq, %49, %c0_i32 : i32
      scf.if %50 {
        %51 = arith.mulf %34, %47 : f32
        %52 = arith.addf %51, %cst_0 : f32
        %53 = arith.divf %21, %52 : f32
        %54 = arith.subf %cst, %53 : f32
        affine.store %54, %arg2[symbol(%0)] : memref<?xf32>
      }
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 9.99999993E-9 : f32
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.cmpi slt, %1, %arg3 : i32
    scf.if %2 {
      %3 = arith.muli %1, %arg4 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.thread_id  x
      %6 = gpu.block_dim  x
      %7 = arith.index_cast %arg4 : i32 to index
      %8:3 = scf.for %arg5 = %5 to %7 step %6 iter_args(%arg6 = %cst_1, %arg7 = %cst_1, %arg8 = %cst_1) -> (f32, f32, f32) {
        %23 = arith.subi %arg5, %5 : index
        %24 = arith.divui %23, %6 : index
        %25 = arith.muli %24, %6 : index
        %26 = arith.addi %5, %25 : index
        %27 = arith.addi %26, %4 : index
        %28 = memref.load %arg0[%27] : memref<?xf32>
        %29 = memref.load %arg1[%27] : memref<?xf32>
        %30 = arith.mulf %28, %29 : f32
        %31 = arith.addf %arg8, %30 : f32
        %32 = arith.mulf %28, %28 : f32
        %33 = arith.addf %arg7, %32 : f32
        %34 = arith.mulf %29, %29 : f32
        %35 = arith.addf %arg6, %34 : f32
        scf.yield %35, %33, %31 : f32, f32, f32
      }
      memref.store %8#2, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      %9 = arith.index_cast %6 : index to i32
      %10 = arith.divui %9, %c2_i32 : i32
      %11 = math.ctlz %10 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.subi %c32, %12 : index
      %14 = arith.index_cast %5 : index to i32
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %15 = affine.load %alloca[0] : memref<1xf32, 5>
      memref.store %8#1, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %16 = affine.load %alloca[0] : memref<1xf32, 5>
      %17 = arith.addf %16, %cst_0 : f32
      %18 = math.sqrt %17 : f32
      memref.store %8#0, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %19 = affine.load %alloca[0] : memref<1xf32, 5>
      %20 = arith.addf %19, %cst_0 : f32
      %21 = math.sqrt %20 : f32
      %22 = arith.cmpi eq, %14, %c0_i32 : i32
      scf.if %22 {
        %23 = arith.mulf %18, %21 : f32
        %24 = arith.addf %23, %cst_0 : f32
        %25 = arith.divf %15, %24 : f32
        %26 = arith.subf %cst, %25 : f32
        affine.store %26, %arg2[symbol(%0)] : memref<?xf32>
      }
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 9.99999993E-9 : f32
    %c0_i32 = arith.constant 0 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.cmpi slt, %1, %arg3 : i32
    scf.if %2 {
      %3 = arith.muli %1, %arg4 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.thread_id  x
      %6 = gpu.block_dim  x
      %7 = arith.index_cast %arg4 : i32 to index
      %8:3 = scf.for %arg5 = %5 to %7 step %6 iter_args(%arg6 = %cst_1, %arg7 = %cst_1, %arg8 = %cst_1) -> (f32, f32, f32) {
        %23 = arith.subi %arg5, %5 : index
        %24 = arith.divui %23, %6 : index
        %25 = arith.muli %24, %6 : index
        %26 = arith.addi %5, %25 : index
        %27 = arith.addi %26, %4 : index
        %28 = memref.load %arg0[%27] : memref<?xf32>
        %29 = memref.load %arg1[%27] : memref<?xf32>
        %30 = arith.mulf %28, %29 : f32
        %31 = arith.addf %arg8, %30 : f32
        %32 = arith.mulf %28, %28 : f32
        %33 = arith.addf %arg7, %32 : f32
        %34 = arith.mulf %29, %29 : f32
        %35 = arith.addf %arg6, %34 : f32
        scf.yield %35, %33, %31 : f32, f32, f32
      }
      memref.store %8#2, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      %9 = arith.index_cast %6 : index to i32
      %10 = arith.divui %9, %c2_i32 : i32
      %11 = math.ctlz %10 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.subi %c32, %12 : index
      %14 = arith.index_cast %5 : index to i32
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %15 = memref.load %alloca[%c0] : memref<1xf32, 5>
      memref.store %8#1, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %16 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %17 = arith.addf %16, %cst_0 : f32
      %18 = math.sqrt %17 : f32
      memref.store %8#0, %alloca[%5] : memref<1xf32, 5>
      nvvm.barrier0
      scf.for %arg5 = %c0 to %13 step %c1 {
        %23 = arith.index_cast %arg5 : index to i32
        %24 = arith.shrui %10, %23 : i32
        %25 = arith.cmpi ult, %14, %24 : i32
        scf.if %25 {
          %26 = arith.addi %14, %24 : i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %alloca[%27] : memref<1xf32, 5>
          %29 = memref.load %alloca[%5] : memref<1xf32, 5>
          %30 = arith.addf %29, %28 : f32
          memref.store %30, %alloca[%5] : memref<1xf32, 5>
        }
        nvvm.barrier0
      }
      %19 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %20 = arith.addf %19, %cst_0 : f32
      %21 = math.sqrt %20 : f32
      %22 = arith.cmpi eq, %14, %c0_i32 : i32
      scf.if %22 {
        %23 = arith.mulf %18, %21 : f32
        %24 = arith.addf %23, %cst_0 : f32
        %25 = arith.divf %15, %24 : f32
        %26 = arith.subf %cst, %25 : f32
        memref.store %26, %arg2[%0] : memref<?xf32>
      }
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c32_0 = arith.constant 32 : index
      %c0_1 = arith.constant 0 : index
      %c1_2 = arith.constant 1 : index
      %cst = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 9.99999993E-9 : f32
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst_4 = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.cmpi slt, %1, %arg3 : i32
      scf.if %2 {
        %3 = arith.muli %1, %arg4 : i32
        %4 = arith.index_cast %3 : i32 to index
        %5 = gpu.block_dim  x
        %6 = arith.index_cast %arg4 : i32 to index
        %7:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst_4, %arg8 = %cst_4, %arg9 = %cst_4) -> (f32, f32, f32) {
          %22 = arith.subi %arg6, %arg5 : index
          %23 = arith.divui %22, %5 : index
          %24 = arith.muli %23, %5 : index
          %25 = arith.addi %arg5, %24 : index
          %26 = arith.addi %25, %4 : index
          %27 = memref.load %arg0[%26] : memref<?xf32>
          %28 = memref.load %arg1[%26] : memref<?xf32>
          %29 = arith.mulf %27, %28 : f32
          %30 = arith.addf %arg9, %29 : f32
          %31 = arith.mulf %27, %27 : f32
          %32 = arith.addf %arg8, %31 : f32
          %33 = arith.mulf %28, %28 : f32
          %34 = arith.addf %arg7, %33 : f32
          scf.yield %34, %32, %30 : f32, f32, f32
        }
        memref.store %7#2, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        %8 = arith.index_cast %5 : index to i32
        %9 = arith.divui %8, %c2_i32 : i32
        %10 = math.ctlz %9 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.subi %c32_0, %11 : index
        %13 = arith.index_cast %arg5 : index to i32
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %14 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        memref.store %7#1, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %15 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        %16 = arith.addf %15, %cst_3 : f32
        %17 = math.sqrt %16 : f32
        memref.store %7#0, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %18 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        %19 = arith.addf %18, %cst_3 : f32
        %20 = math.sqrt %19 : f32
        %21 = arith.cmpi eq, %13, %c0_i32 : i32
        scf.if %21 {
          %22 = arith.mulf %17, %20 : f32
          %23 = arith.addf %22, %cst_3 : f32
          %24 = arith.divf %14, %23 : f32
          %25 = arith.subf %cst, %24 : f32
          memref.store %25, %arg2[%0] : memref<?xf32>
        }
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c32_0 = arith.constant 32 : index
      %c0_1 = arith.constant 0 : index
      %c1_2 = arith.constant 1 : index
      %cst = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 9.99999993E-9 : f32
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %cst_4 = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.cmpi slt, %1, %arg3 : i32
      scf.if %2 {
        %3 = arith.muli %1, %arg4 : i32
        %4 = arith.index_cast %3 : i32 to index
        %5 = gpu.block_dim  x
        %6 = arith.index_cast %arg4 : i32 to index
        %7:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst_4, %arg8 = %cst_4, %arg9 = %cst_4) -> (f32, f32, f32) {
          %22 = arith.subi %arg6, %arg5 : index
          %23 = arith.divui %22, %5 : index
          %24 = arith.muli %23, %5 : index
          %25 = arith.addi %arg5, %24 : index
          %26 = arith.addi %25, %4 : index
          %27 = memref.load %arg0[%26] : memref<?xf32>
          %28 = memref.load %arg1[%26] : memref<?xf32>
          %29 = arith.mulf %27, %28 : f32
          %30 = arith.addf %arg9, %29 : f32
          %31 = arith.mulf %27, %27 : f32
          %32 = arith.addf %arg8, %31 : f32
          %33 = arith.mulf %28, %28 : f32
          %34 = arith.addf %arg7, %33 : f32
          scf.yield %34, %32, %30 : f32, f32, f32
        }
        memref.store %7#2, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        %8 = arith.index_cast %5 : index to i32
        %9 = arith.divui %8, %c2_i32 : i32
        %10 = math.ctlz %9 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.subi %c32_0, %11 : index
        %13 = arith.index_cast %arg5 : index to i32
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %14 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        memref.store %7#1, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %15 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        %16 = arith.addf %15, %cst_3 : f32
        %17 = math.sqrt %16 : f32
        memref.store %7#0, %alloca[%arg5] : memref<1xf32, 5>
        "polygeist.barrier"(%arg5) : (index) -> ()
        scf.for %arg6 = %c0_1 to %12 step %c1_2 {
          %22 = arith.index_cast %arg6 : index to i32
          %23 = arith.shrui %9, %22 : i32
          %24 = arith.cmpi ult, %13, %23 : i32
          scf.if %24 {
            %25 = arith.addi %13, %23 : i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %alloca[%26] : memref<1xf32, 5>
            %28 = memref.load %alloca[%arg5] : memref<1xf32, 5>
            %29 = arith.addf %28, %27 : f32
            memref.store %29, %alloca[%arg5] : memref<1xf32, 5>
          }
          "polygeist.barrier"(%arg5) : (index) -> ()
        }
        %18 = memref.load %alloca[%c0_1] : memref<1xf32, 5>
        %19 = arith.addf %18, %cst_3 : f32
        %20 = math.sqrt %19 : f32
        %21 = arith.cmpi eq, %13, %c0_i32 : i32
        scf.if %21 {
          %22 = arith.mulf %17, %20 : f32
          %23 = arith.addf %22, %cst_3 : f32
          %24 = arith.divf %14, %23 : f32
          %25 = arith.subf %cst, %24 : f32
          memref.store %25, %arg2[%0] : memref<?xf32>
        }
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst_0 = arith.constant 9.99999993E-9 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = arith.cmpi slt, %1, %arg3 : i32
    scf.if %2 {
      %alloca_2 = memref.alloca() : memref<32xf32>
      %alloca_3 = memref.alloca() : memref<32xf32>
      %3 = arith.muli %1, %arg4 : i32
      %4 = arith.index_cast %3 : i32 to index
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %arg4 : i32 to index
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %24:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
          %25 = arith.subi %arg6, %arg5 : index
          %26 = arith.divui %25, %5 : index
          %27 = arith.muli %26, %5 : index
          %28 = arith.addi %arg5, %27 : index
          %29 = arith.addi %28, %4 : index
          %30 = memref.load %arg0[%29] : memref<?xf32>
          %31 = memref.load %arg1[%29] : memref<?xf32>
          %32 = arith.mulf %30, %31 : f32
          %33 = arith.addf %arg9, %32 : f32
          %34 = arith.mulf %30, %30 : f32
          %35 = arith.addf %arg8, %34 : f32
          %36 = arith.mulf %31, %31 : f32
          %37 = arith.addf %arg7, %36 : f32
          scf.yield %37, %35, %33 : f32, f32, f32
        }
        memref.store %24#2, %alloca[%arg5] : memref<1xf32, 5>
        scf.yield
      }
      %7 = gpu.block_dim  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.divui %8, %c2_i32 : i32
      %10 = math.ctlz %9 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.subi %c32, %11 : index
      scf.for %arg5 = %c0 to %12 step %c1 {
        %24 = arith.index_cast %arg5 : index to i32
        %25 = arith.shrui %9, %24 : i32
        scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
          %26 = arith.index_cast %arg6 : index to i32
          %27 = arith.cmpi ult, %26, %25 : i32
          scf.if %27 {
            %28 = arith.addi %26, %25 : i32
            %29 = arith.index_cast %28 : i32 to index
            %30 = memref.load %alloca[%29] : memref<1xf32, 5>
            %31 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %32 = arith.addf %31, %30 : f32
            memref.store %32, %alloca[%arg6] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %13 = arith.index_cast %arg4 : i32 to index
      %14 = arith.muli %1, %arg4 : i32
      %15 = arith.index_cast %14 : i32 to index
      %16 = memref.load %alloca[%c0] : memref<1xf32, 5>
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %24:3 = scf.for %arg6 = %arg5 to %13 step %7 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
          %25 = arith.subi %arg6, %arg5 : index
          %26 = arith.divui %25, %7 : index
          %27 = arith.muli %26, %7 : index
          %28 = arith.addi %arg5, %27 : index
          %29 = arith.addi %28, %15 : index
          %30 = memref.load %arg0[%29] : memref<?xf32>
          %31 = memref.load %arg1[%29] : memref<?xf32>
          %32 = arith.mulf %30, %31 : f32
          %33 = arith.addf %arg9, %32 : f32
          %34 = arith.mulf %30, %30 : f32
          %35 = arith.addf %arg8, %34 : f32
          %36 = arith.mulf %31, %31 : f32
          %37 = arith.addf %arg7, %36 : f32
          scf.yield %37, %35, %33 : f32, f32, f32
        }
        memref.store %16, %alloca_3[%arg5] : memref<32xf32>
        memref.store %24#1, %alloca[%arg5] : memref<1xf32, 5>
        scf.yield
      }
      scf.for %arg5 = %c0 to %12 step %c1 {
        %24 = arith.index_cast %arg5 : index to i32
        %25 = arith.shrui %9, %24 : i32
        scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
          %26 = arith.index_cast %arg6 : index to i32
          %27 = arith.cmpi ult, %26, %25 : i32
          scf.if %27 {
            %28 = arith.addi %26, %25 : i32
            %29 = arith.index_cast %28 : i32 to index
            %30 = memref.load %alloca[%29] : memref<1xf32, 5>
            %31 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %32 = arith.addf %31, %30 : f32
            memref.store %32, %alloca[%arg6] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %17 = arith.index_cast %arg4 : i32 to index
      %18 = arith.muli %1, %arg4 : i32
      %19 = arith.index_cast %18 : i32 to index
      %20 = memref.load %alloca[%c0] : memref<1xf32, 5>
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %24:3 = scf.for %arg6 = %arg5 to %17 step %7 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
          %25 = arith.subi %arg6, %arg5 : index
          %26 = arith.divui %25, %7 : index
          %27 = arith.muli %26, %7 : index
          %28 = arith.addi %arg5, %27 : index
          %29 = arith.addi %28, %19 : index
          %30 = memref.load %arg0[%29] : memref<?xf32>
          %31 = memref.load %arg1[%29] : memref<?xf32>
          %32 = arith.mulf %30, %31 : f32
          %33 = arith.addf %arg9, %32 : f32
          %34 = arith.mulf %30, %30 : f32
          %35 = arith.addf %arg8, %34 : f32
          %36 = arith.mulf %31, %31 : f32
          %37 = arith.addf %arg7, %36 : f32
          scf.yield %37, %35, %33 : f32, f32, f32
        }
        memref.store %20, %alloca_2[%arg5] : memref<32xf32>
        memref.store %24#0, %alloca[%arg5] : memref<1xf32, 5>
        scf.yield
      }
      scf.for %arg5 = %c0 to %12 step %c1 {
        %24 = arith.index_cast %arg5 : index to i32
        %25 = arith.shrui %9, %24 : i32
        scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
          %26 = arith.index_cast %arg6 : index to i32
          %27 = arith.cmpi ult, %26, %25 : i32
          scf.if %27 {
            %28 = arith.addi %26, %25 : i32
            %29 = arith.index_cast %28 : i32 to index
            %30 = memref.load %alloca[%29] : memref<1xf32, 5>
            %31 = memref.load %alloca[%arg6] : memref<1xf32, 5>
            %32 = arith.addf %31, %30 : f32
            memref.store %32, %alloca[%arg6] : memref<1xf32, 5>
          }
          scf.yield
        }
      }
      %21 = memref.load %alloca[%c0] : memref<1xf32, 5>
      %22 = arith.addf %21, %cst_0 : f32
      %23 = math.sqrt %22 : f32
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %24 = memref.load %alloca_3[%arg5] : memref<32xf32>
        %25 = memref.load %alloca_2[%arg5] : memref<32xf32>
        %26 = arith.addf %25, %cst_0 : f32
        %27 = math.sqrt %26 : f32
        %28 = arith.index_cast %arg5 : index to i32
        %29 = arith.cmpi eq, %28, %c0_i32 : i32
        scf.if %29 {
          %30 = arith.mulf %27, %23 : f32
          %31 = arith.addf %30, %cst_0 : f32
          %32 = arith.divf %24, %31 : f32
          %33 = arith.subf %cst_1, %32 : f32
          memref.store %33, %arg2[%0] : memref<?xf32>
        }
        scf.yield
      }
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.cmpi slt, %1, %arg3 : i32
      scf.if %2 {
        %alloca_2 = memref.alloca() : memref<32xf32>
        %alloca_3 = memref.alloca() : memref<32xf32>
        %3 = arith.muli %1, %arg4 : i32
        %4 = arith.index_cast %3 : i32 to index
        %5 = gpu.block_dim  x
        %6 = arith.index_cast %arg4 : i32 to index
        scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %5 : index
            %20 = arith.muli %19, %5 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %4 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %17#2, %alloca[%arg5] : memref<1xf32, 5>
          scf.yield
        }
        %7 = arith.index_cast %5 : index to i32
        %8 = arith.divui %7, %c2_i32 : i32
        %9 = math.ctlz %8 : i32
        %10 = arith.index_cast %9 : i32 to index
        %11 = arith.subi %c32, %10 : index
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
            scf.yield
          }
        }
        %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
        scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %5 : index
            %20 = arith.muli %19, %5 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %4 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %12, %alloca_3[%arg5] : memref<32xf32>
          memref.store %17#1, %alloca[%arg5] : memref<1xf32, 5>
          scf.yield
        }
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
            scf.yield
          }
        }
        %13 = memref.load %alloca[%c0] : memref<1xf32, 5>
        scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %5 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %5 : index
            %20 = arith.muli %19, %5 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %4 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %13, %alloca_2[%arg5] : memref<32xf32>
          memref.store %17#0, %alloca[%arg5] : memref<1xf32, 5>
          scf.yield
        }
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
            scf.yield
          }
        }
        %14 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %15 = arith.addf %14, %cst_0 : f32
        %16 = math.sqrt %15 : f32
        scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
          %17 = memref.load %alloca_3[%arg5] : memref<32xf32>
          %18 = memref.load %alloca_2[%arg5] : memref<32xf32>
          %19 = arith.addf %18, %cst_0 : f32
          %20 = math.sqrt %19 : f32
          %21 = arith.index_cast %arg5 : index to i32
          %22 = arith.cmpi eq, %21, %c0_i32 : i32
          scf.if %22 {
            %23 = arith.mulf %20, %16 : f32
            %24 = arith.addf %23, %cst_0 : f32
            %25 = arith.divf %17, %24 : f32
            %26 = arith.subf %cst_1, %25 : f32
            memref.store %26, %arg2[%0] : memref<?xf32>
          }
          scf.yield
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<1xf32, 5>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = arith.cmpi slt, %1, %arg3 : i32
      scf.if %2 {
        %alloca_2 = memref.alloca() : memref<32xf32>
        %alloca_3 = memref.alloca() : memref<32xf32>
        %3 = arith.muli %1, %arg4 : i32
        %4 = arith.index_cast %3 : i32 to index
        %c32_4 = arith.constant 32 : index
        %5 = arith.index_cast %arg4 : i32 to index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_5 {
          %16:3 = scf.for %arg6 = %arg5 to %5 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %17 = arith.subi %arg6, %arg5 : index
            %18 = arith.divui %17, %c32_4 : index
            %19 = arith.muli %18, %c32_4 : index
            %20 = arith.addi %arg5, %19 : index
            %21 = arith.addi %20, %4 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = memref.load %arg1[%21] : memref<?xf32>
            %24 = arith.mulf %22, %23 : f32
            %25 = arith.addf %arg9, %24 : f32
            %26 = arith.mulf %22, %22 : f32
            %27 = arith.addf %arg8, %26 : f32
            %28 = arith.mulf %23, %23 : f32
            %29 = arith.addf %arg7, %28 : f32
            scf.yield %29, %27, %25 : f32, f32, f32
          }
          memref.store %16#2, %alloca[%arg5] : memref<1xf32, 5>
        }
        %6 = arith.index_cast %c32_4 : index to i32
        %7 = arith.divui %6, %c2_i32 : i32
        %8 = math.ctlz %7 : i32
        %9 = arith.index_cast %8 : i32 to index
        %10 = arith.subi %c32, %9 : index
        scf.for %arg5 = %c0 to %10 step %c1 {
          %16 = arith.index_cast %arg5 : index to i32
          %17 = arith.shrui %7, %16 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %18 = arith.index_cast %arg6 : index to i32
            %19 = arith.cmpi ult, %18, %17 : i32
            scf.if %19 {
              %20 = arith.addi %18, %17 : i32
              %21 = arith.index_cast %20 : i32 to index
              %22 = memref.load %alloca[%21] : memref<1xf32, 5>
              %23 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %24 = arith.addf %23, %22 : f32
              memref.store %24, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %11 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_6 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_6 {
          %16:3 = scf.for %arg6 = %arg5 to %5 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %17 = arith.subi %arg6, %arg5 : index
            %18 = arith.divui %17, %c32_4 : index
            %19 = arith.muli %18, %c32_4 : index
            %20 = arith.addi %arg5, %19 : index
            %21 = arith.addi %20, %4 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = memref.load %arg1[%21] : memref<?xf32>
            %24 = arith.mulf %22, %23 : f32
            %25 = arith.addf %arg9, %24 : f32
            %26 = arith.mulf %22, %22 : f32
            %27 = arith.addf %arg8, %26 : f32
            %28 = arith.mulf %23, %23 : f32
            %29 = arith.addf %arg7, %28 : f32
            scf.yield %29, %27, %25 : f32, f32, f32
          }
          memref.store %11, %alloca_3[%arg5] : memref<32xf32>
          memref.store %16#1, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %10 step %c1 {
          %16 = arith.index_cast %arg5 : index to i32
          %17 = arith.shrui %7, %16 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %18 = arith.index_cast %arg6 : index to i32
            %19 = arith.cmpi ult, %18, %17 : i32
            scf.if %19 {
              %20 = arith.addi %18, %17 : i32
              %21 = arith.index_cast %20 : i32 to index
              %22 = memref.load %alloca[%21] : memref<1xf32, 5>
              %23 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %24 = arith.addf %23, %22 : f32
              memref.store %24, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_7 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_7 {
          %16:3 = scf.for %arg6 = %arg5 to %5 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %17 = arith.subi %arg6, %arg5 : index
            %18 = arith.divui %17, %c32_4 : index
            %19 = arith.muli %18, %c32_4 : index
            %20 = arith.addi %arg5, %19 : index
            %21 = arith.addi %20, %4 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = memref.load %arg1[%21] : memref<?xf32>
            %24 = arith.mulf %22, %23 : f32
            %25 = arith.addf %arg9, %24 : f32
            %26 = arith.mulf %22, %22 : f32
            %27 = arith.addf %arg8, %26 : f32
            %28 = arith.mulf %23, %23 : f32
            %29 = arith.addf %arg7, %28 : f32
            scf.yield %29, %27, %25 : f32, f32, f32
          }
          memref.store %12, %alloca_2[%arg5] : memref<32xf32>
          memref.store %16#0, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %10 step %c1 {
          %16 = arith.index_cast %arg5 : index to i32
          %17 = arith.shrui %7, %16 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %18 = arith.index_cast %arg6 : index to i32
            %19 = arith.cmpi ult, %18, %17 : i32
            scf.if %19 {
              %20 = arith.addi %18, %17 : i32
              %21 = arith.index_cast %20 : i32 to index
              %22 = memref.load %alloca[%21] : memref<1xf32, 5>
              %23 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %24 = arith.addf %23, %22 : f32
              memref.store %24, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %13 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %14 = arith.addf %13, %cst_0 : f32
        %15 = math.sqrt %14 : f32
        %c1_8 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_8 {
          %16 = memref.load %alloca_3[%arg5] : memref<32xf32>
          %17 = memref.load %alloca_2[%arg5] : memref<32xf32>
          %18 = arith.addf %17, %cst_0 : f32
          %19 = math.sqrt %18 : f32
          %20 = arith.index_cast %arg5 : index to i32
          %21 = arith.cmpi eq, %20, %c0_i32 : i32
          scf.if %21 {
            %22 = arith.mulf %19, %15 : f32
            %23 = arith.addf %22, %cst_0 : f32
            %24 = arith.divf %16, %23 : f32
            %25 = arith.subf %cst_1, %24 : f32
            memref.store %25, %arg2[%0] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<1xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<1xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.cmpi slt, %2, %arg3 : i32
      scf.if %3 {
        %alloca_2 = memref.alloca() : memref<32xf32, 5>
        %alloca_3 = memref.alloca() : memref<32xf32, 5>
        %4 = arith.muli %2, %arg4 : i32
        %5 = arith.index_cast %4 : i32 to index
        %c32_4 = arith.constant 32 : index
        %6 = arith.index_cast %arg4 : i32 to index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_5 {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %c32_4 : index
            %20 = arith.muli %19, %c32_4 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %5 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %17#2, %alloca[%arg5] : memref<1xf32, 5>
        }
        %7 = arith.index_cast %c32_4 : index to i32
        %8 = arith.divui %7, %c2_i32 : i32
        %9 = math.ctlz %8 : i32
        %10 = arith.index_cast %9 : i32 to index
        %11 = arith.subi %c32, %10 : index
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %12 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_6 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_6 {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %c32_4 : index
            %20 = arith.muli %19, %c32_4 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %5 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %12, %alloca_3[%arg5] : memref<32xf32, 5>
          memref.store %17#1, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %13 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_7 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_7 {
          %17:3 = scf.for %arg6 = %arg5 to %6 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %18 = arith.subi %arg6, %arg5 : index
            %19 = arith.divui %18, %c32_4 : index
            %20 = arith.muli %19, %c32_4 : index
            %21 = arith.addi %arg5, %20 : index
            %22 = arith.addi %21, %5 : index
            %23 = memref.load %arg0[%22] : memref<?xf32>
            %24 = memref.load %arg1[%22] : memref<?xf32>
            %25 = arith.mulf %23, %24 : f32
            %26 = arith.addf %arg9, %25 : f32
            %27 = arith.mulf %23, %23 : f32
            %28 = arith.addf %arg8, %27 : f32
            %29 = arith.mulf %24, %24 : f32
            %30 = arith.addf %arg7, %29 : f32
            scf.yield %30, %28, %26 : f32, f32, f32
          }
          memref.store %13, %alloca_2[%arg5] : memref<32xf32, 5>
          memref.store %17#0, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %11 step %c1 {
          %17 = arith.index_cast %arg5 : index to i32
          %18 = arith.shrui %8, %17 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %19 = arith.index_cast %arg6 : index to i32
            %20 = arith.cmpi ult, %19, %18 : i32
            scf.if %20 {
              %21 = arith.addi %19, %18 : i32
              %22 = arith.index_cast %21 : i32 to index
              %23 = memref.load %alloca[%22] : memref<1xf32, 5>
              %24 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %25 = arith.addf %24, %23 : f32
              memref.store %25, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %14 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %15 = arith.addf %14, %cst_0 : f32
        %16 = math.sqrt %15 : f32
        %c1_8 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_8 {
          %17 = memref.load %alloca_3[%arg5] : memref<32xf32, 5>
          %18 = memref.load %alloca_2[%arg5] : memref<32xf32, 5>
          %19 = arith.addf %18, %cst_0 : f32
          %20 = math.sqrt %19 : f32
          %21 = arith.index_cast %arg5 : index to i32
          %22 = arith.cmpi eq, %21, %c0_i32 : i32
          scf.if %22 {
            %23 = arith.mulf %20, %16 : f32
            %24 = arith.addf %23, %cst_0 : f32
            %25 = arith.divf %17, %24 : f32
            %26 = arith.subf %cst_1, %25 : f32
            memref.store %26, %arg2[%1] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca_2 = memref.alloca() : memref<32xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca_2 = memref.alloca() : memref<32xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = "npu.block_id"() : () -> i64
      %2 = gpu.block_id  x
      %3 = emitc.cast %1 : i64 to i32
      %4 = arith.index_cast %2 : index to i32
      %5 = arith.cmpi slt, %4, %arg3 : i32
      scf.if %5 {
        %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %alloca_2 = memref.alloca() : memref<32xf32, 5>
        %alloca_3 = memref.alloca() : memref<32xf32, 5>
        %7 = arith.muli %4, %arg4 : i32
        %8 = arith.index_cast %7 : i32 to index
        %c32_4 = arith.constant 32 : index
        %9 = arith.index_cast %arg4 : i32 to index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_5 {
          %20:3 = scf.for %arg6 = %arg5 to %9 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32_4 : index
            %23 = arith.muli %22, %c32_4 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %8 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = arith.mulf %26, %27 : f32
            %29 = arith.addf %arg9, %28 : f32
            %30 = arith.mulf %26, %26 : f32
            %31 = arith.addf %arg8, %30 : f32
            %32 = arith.mulf %27, %27 : f32
            %33 = arith.addf %arg7, %32 : f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %20#2, %alloca[%arg5] : memref<1xf32, 5>
        }
        %10 = arith.index_cast %c32_4 : index to i32
        %11 = arith.divui %10, %c2_i32 : i32
        %12 = math.ctlz %11 : i32
        %13 = arith.index_cast %12 : i32 to index
        %14 = arith.subi %c32, %13 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = arith.index_cast %arg5 : index to i32
          %21 = arith.shrui %11, %20 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %22 = arith.index_cast %arg6 : index to i32
            %23 = arith.cmpi ult, %22, %21 : i32
            scf.if %23 {
              %24 = arith.addi %22, %21 : i32
              %25 = arith.index_cast %24 : i32 to index
              %26 = memref.load %alloca[%25] : memref<1xf32, 5>
              %27 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %28 = arith.addf %27, %26 : f32
              memref.store %28, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %15 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_6 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_6 {
          %20:3 = scf.for %arg6 = %arg5 to %9 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32_4 : index
            %23 = arith.muli %22, %c32_4 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %8 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = arith.mulf %26, %27 : f32
            %29 = arith.addf %arg9, %28 : f32
            %30 = arith.mulf %26, %26 : f32
            %31 = arith.addf %arg8, %30 : f32
            %32 = arith.mulf %27, %27 : f32
            %33 = arith.addf %arg7, %32 : f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %15, %alloca_3[%arg5] : memref<32xf32, 5>
          memref.store %20#1, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = arith.index_cast %arg5 : index to i32
          %21 = arith.shrui %11, %20 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %22 = arith.index_cast %arg6 : index to i32
            %23 = arith.cmpi ult, %22, %21 : i32
            scf.if %23 {
              %24 = arith.addi %22, %21 : i32
              %25 = arith.index_cast %24 : i32 to index
              %26 = memref.load %alloca[%25] : memref<1xf32, 5>
              %27 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %28 = arith.addf %27, %26 : f32
              memref.store %28, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %16 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_7 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_7 {
          %20:3 = scf.for %arg6 = %arg5 to %9 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32_4 : index
            %23 = arith.muli %22, %c32_4 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %8 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = arith.mulf %26, %27 : f32
            %29 = arith.addf %arg9, %28 : f32
            %30 = arith.mulf %26, %26 : f32
            %31 = arith.addf %arg8, %30 : f32
            %32 = arith.mulf %27, %27 : f32
            %33 = arith.addf %arg7, %32 : f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %16, %alloca_2[%arg5] : memref<32xf32, 5>
          memref.store %20#0, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = arith.index_cast %arg5 : index to i32
          %21 = arith.shrui %11, %20 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %22 = arith.index_cast %arg6 : index to i32
            %23 = arith.cmpi ult, %22, %21 : i32
            scf.if %23 {
              %24 = arith.addi %22, %21 : i32
              %25 = arith.index_cast %24 : i32 to index
              %26 = memref.load %alloca[%25] : memref<1xf32, 5>
              %27 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %28 = arith.addf %27, %26 : f32
              memref.store %28, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %17 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %18 = arith.addf %17, %cst_0 : f32
        %19 = math.sqrt %18 : f32
        %c1_8 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_8 {
          %20 = memref.load %alloca_3[%arg5] : memref<32xf32, 5>
          %21 = memref.load %alloca_2[%arg5] : memref<32xf32, 5>
          %22 = arith.addf %21, %cst_0 : f32
          %23 = math.sqrt %22 : f32
          %24 = arith.index_cast %arg5 : index to i32
          %25 = arith.cmpi eq, %24, %c0_i32 : i32
          scf.if %25 {
            %26 = arith.mulf %23, %19 : f32
            %27 = arith.addf %26, %cst_0 : f32
            %28 = arith.divf %20, %27 : f32
            %29 = arith.subf %cst_1, %28 : f32
            memref.store %29, %arg2[%2] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca_3 = memref.alloca() : memref<32xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%7 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca_3 = memref.alloca() : memref<32xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<1xf32, 5>
      %1 = "npu.block_id"() : () -> i64
      %2 = gpu.block_id  x
      %3 = emitc.cast %1 : i64 to i32
      %4 = arith.index_cast %2 : index to i32
      %5 = arith.cmpi slt, %4, %arg3 : i32
      scf.if %5 {
        %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %alloca_2 = memref.alloca() : memref<32xf32, 5>
        %7 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %alloca_3 = memref.alloca() : memref<32xf32, 5>
        %8 = arith.muli %4, %arg4 : i32
        %9 = arith.index_cast %8 : i32 to index
        %c32_4 = arith.constant 32 : index
        %10 = arith.index_cast %arg4 : i32 to index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_5 {
          %21:3 = scf.for %arg6 = %arg5 to %10 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %22 = arith.subi %arg6, %arg5 : index
            %23 = arith.divui %22, %c32_4 : index
            %24 = arith.muli %23, %c32_4 : index
            %25 = arith.addi %arg5, %24 : index
            %26 = arith.addi %25, %9 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = memref.load %arg1[%26] : memref<?xf32>
            %29 = arith.mulf %27, %28 : f32
            %30 = arith.addf %arg9, %29 : f32
            %31 = arith.mulf %27, %27 : f32
            %32 = arith.addf %arg8, %31 : f32
            %33 = arith.mulf %28, %28 : f32
            %34 = arith.addf %arg7, %33 : f32
            scf.yield %34, %32, %30 : f32, f32, f32
          }
          memref.store %21#2, %alloca[%arg5] : memref<1xf32, 5>
        }
        %11 = arith.index_cast %c32_4 : index to i32
        %12 = arith.divui %11, %c2_i32 : i32
        %13 = math.ctlz %12 : i32
        %14 = arith.index_cast %13 : i32 to index
        %15 = arith.subi %c32, %14 : index
        scf.for %arg5 = %c0 to %15 step %c1 {
          %21 = arith.index_cast %arg5 : index to i32
          %22 = arith.shrui %12, %21 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %23 = arith.index_cast %arg6 : index to i32
            %24 = arith.cmpi ult, %23, %22 : i32
            scf.if %24 {
              %25 = arith.addi %23, %22 : i32
              %26 = arith.index_cast %25 : i32 to index
              %27 = memref.load %alloca[%26] : memref<1xf32, 5>
              %28 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %29 = arith.addf %28, %27 : f32
              memref.store %29, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %16 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_6 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_6 {
          %21:3 = scf.for %arg6 = %arg5 to %10 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %22 = arith.subi %arg6, %arg5 : index
            %23 = arith.divui %22, %c32_4 : index
            %24 = arith.muli %23, %c32_4 : index
            %25 = arith.addi %arg5, %24 : index
            %26 = arith.addi %25, %9 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = memref.load %arg1[%26] : memref<?xf32>
            %29 = arith.mulf %27, %28 : f32
            %30 = arith.addf %arg9, %29 : f32
            %31 = arith.mulf %27, %27 : f32
            %32 = arith.addf %arg8, %31 : f32
            %33 = arith.mulf %28, %28 : f32
            %34 = arith.addf %arg7, %33 : f32
            scf.yield %34, %32, %30 : f32, f32, f32
          }
          memref.store %16, %alloca_3[%arg5] : memref<32xf32, 5>
          memref.store %21#1, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %15 step %c1 {
          %21 = arith.index_cast %arg5 : index to i32
          %22 = arith.shrui %12, %21 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %23 = arith.index_cast %arg6 : index to i32
            %24 = arith.cmpi ult, %23, %22 : i32
            scf.if %24 {
              %25 = arith.addi %23, %22 : i32
              %26 = arith.index_cast %25 : i32 to index
              %27 = memref.load %alloca[%26] : memref<1xf32, 5>
              %28 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %29 = arith.addf %28, %27 : f32
              memref.store %29, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %17 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %c1_7 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_7 {
          %21:3 = scf.for %arg6 = %arg5 to %10 step %c32_4 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %22 = arith.subi %arg6, %arg5 : index
            %23 = arith.divui %22, %c32_4 : index
            %24 = arith.muli %23, %c32_4 : index
            %25 = arith.addi %arg5, %24 : index
            %26 = arith.addi %25, %9 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = memref.load %arg1[%26] : memref<?xf32>
            %29 = arith.mulf %27, %28 : f32
            %30 = arith.addf %arg9, %29 : f32
            %31 = arith.mulf %27, %27 : f32
            %32 = arith.addf %arg8, %31 : f32
            %33 = arith.mulf %28, %28 : f32
            %34 = arith.addf %arg7, %33 : f32
            scf.yield %34, %32, %30 : f32, f32, f32
          }
          memref.store %17, %alloca_2[%arg5] : memref<32xf32, 5>
          memref.store %21#0, %alloca[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %15 step %c1 {
          %21 = arith.index_cast %arg5 : index to i32
          %22 = arith.shrui %12, %21 : i32
          %c1_9 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_9 {
            %23 = arith.index_cast %arg6 : index to i32
            %24 = arith.cmpi ult, %23, %22 : i32
            scf.if %24 {
              %25 = arith.addi %23, %22 : i32
              %26 = arith.index_cast %25 : i32 to index
              %27 = memref.load %alloca[%26] : memref<1xf32, 5>
              %28 = memref.load %alloca[%arg6] : memref<1xf32, 5>
              %29 = arith.addf %28, %27 : f32
              memref.store %29, %alloca[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %18 = memref.load %alloca[%c0] : memref<1xf32, 5>
        %19 = arith.addf %18, %cst_0 : f32
        %20 = math.sqrt %19 : f32
        %c1_8 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_8 {
          %21 = memref.load %alloca_3[%arg5] : memref<32xf32, 5>
          %22 = memref.load %alloca_2[%arg5] : memref<32xf32, 5>
          %23 = arith.addf %22, %cst_0 : f32
          %24 = math.sqrt %23 : f32
          %25 = arith.index_cast %arg5 : index to i32
          %26 = arith.cmpi eq, %25, %c0_i32 : i32
          scf.if %26 {
            %27 = arith.mulf %24, %20 : f32
            %28 = arith.addf %27, %cst_0 : f32
            %29 = arith.divf %21, %28 : f32
            %30 = arith.subf %cst_1, %29 : f32
            memref.store %30, %arg2[%2] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] CastLikeOpToNPULowering: process op: 

%9 = arith.index_cast %8 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%11 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%16 = arith.index_cast %15 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%29 = arith.index_cast %arg6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%33 = arith.index_cast %32 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%29 = arith.index_cast %arg6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%33 = arith.index_cast %32 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%29 = arith.index_cast %arg6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%33 = arith.index_cast %32 : i32 to index
[ict-debug] ArithUnaryOpToNPULowering: process op: 

%24 = math.sqrt %23 : f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ArithUnaryOpToNPULowering: process op: 

%30 = math.sqrt %29 : f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] CastLikeOpToNPULowering: process op: 

%33 = arith.index_cast %arg5 : index to i32
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c2_i32 = arith.constant 2 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.cmpi slt, %4, %arg3 : i32
      scf.if %5 {
        %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<32xf32, 5>
        %8 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %9 = builtin.unrealized_conversion_cast %8 : !llvm.ptr<6> to memref<32xf32, 5>
        %10 = arith.muli %4, %arg4 : i32
        %11 = emitc.cast %10 : i32 to index
        %c32_2 = arith.constant 32 : index
        %12 = emitc.cast %arg4 : i32 to index
        %c1_3 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_3 {
          %22:3 = scf.for %arg6 = %arg5 to %12 step %c32_2 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %23 = arith.subi %arg6, %arg5 : index
            %24 = arith.divui %23, %c32_2 : index
            %25 = arith.muli %24, %c32_2 : index
            %26 = arith.addi %arg5, %25 : index
            %27 = arith.addi %26, %11 : index
            %28 = memref.load %arg0[%27] : memref<?xf32>
            %29 = memref.load %arg1[%27] : memref<?xf32>
            %30 = emitc.mul %28, %29 : (f32, f32) -> f32
            %31 = emitc.add %arg9, %30 : (f32, f32) -> f32
            %32 = emitc.mul %28, %28 : (f32, f32) -> f32
            %33 = emitc.add %arg8, %32 : (f32, f32) -> f32
            %34 = emitc.mul %29, %29 : (f32, f32) -> f32
            %35 = emitc.add %arg7, %34 : (f32, f32) -> f32
            scf.yield %35, %33, %31 : f32, f32, f32
          }
          memref.store %22#2, %1[%arg5] : memref<1xf32, 5>
        }
        %c32_i32 = arith.constant 32 : i32
        %13 = arith.divui %c32_i32, %c2_i32 : i32
        %14 = math.ctlz %13 : i32
        %15 = emitc.cast %14 : i32 to index
        %16 = arith.subi %c32, %15 : index
        scf.for %arg5 = %c0 to %16 step %c1 {
          %22 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %23 = emitc.cast %22 : i64 to i32
          %24 = arith.shrui %13, %23 : i32
          %c1_7 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_7 {
            %25 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %26 = emitc.cast %25 : i64 to i32
            %27 = arith.cmpi ult, %26, %24 : i32
            scf.if %27 {
              %28 = arith.addi %26, %24 : i32
              %29 = emitc.cast %28 : i32 to index
              %30 = memref.load %1[%29] : memref<1xf32, 5>
              %31 = memref.load %1[%arg6] : memref<1xf32, 5>
              %32 = emitc.add %31, %30 : (f32, f32) -> f32
              memref.store %32, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %17 = memref.load %1[%c0] : memref<1xf32, 5>
        %c1_4 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_4 {
          %22:3 = scf.for %arg6 = %arg5 to %12 step %c32_2 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %23 = arith.subi %arg6, %arg5 : index
            %24 = arith.divui %23, %c32_2 : index
            %25 = arith.muli %24, %c32_2 : index
            %26 = arith.addi %arg5, %25 : index
            %27 = arith.addi %26, %11 : index
            %28 = memref.load %arg0[%27] : memref<?xf32>
            %29 = memref.load %arg1[%27] : memref<?xf32>
            %30 = emitc.mul %28, %29 : (f32, f32) -> f32
            %31 = emitc.add %arg9, %30 : (f32, f32) -> f32
            %32 = emitc.mul %28, %28 : (f32, f32) -> f32
            %33 = emitc.add %arg8, %32 : (f32, f32) -> f32
            %34 = emitc.mul %29, %29 : (f32, f32) -> f32
            %35 = emitc.add %arg7, %34 : (f32, f32) -> f32
            scf.yield %35, %33, %31 : f32, f32, f32
          }
          memref.store %17, %9[%arg5] : memref<32xf32, 5>
          memref.store %22#1, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %16 step %c1 {
          %22 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %23 = emitc.cast %22 : i64 to i32
          %24 = arith.shrui %13, %23 : i32
          %c1_7 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_7 {
            %25 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %26 = emitc.cast %25 : i64 to i32
            %27 = arith.cmpi ult, %26, %24 : i32
            scf.if %27 {
              %28 = arith.addi %26, %24 : i32
              %29 = emitc.cast %28 : i32 to index
              %30 = memref.load %1[%29] : memref<1xf32, 5>
              %31 = memref.load %1[%arg6] : memref<1xf32, 5>
              %32 = emitc.add %31, %30 : (f32, f32) -> f32
              memref.store %32, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %18 = memref.load %1[%c0] : memref<1xf32, 5>
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_5 {
          %22:3 = scf.for %arg6 = %arg5 to %12 step %c32_2 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %23 = arith.subi %arg6, %arg5 : index
            %24 = arith.divui %23, %c32_2 : index
            %25 = arith.muli %24, %c32_2 : index
            %26 = arith.addi %arg5, %25 : index
            %27 = arith.addi %26, %11 : index
            %28 = memref.load %arg0[%27] : memref<?xf32>
            %29 = memref.load %arg1[%27] : memref<?xf32>
            %30 = emitc.mul %28, %29 : (f32, f32) -> f32
            %31 = emitc.add %arg9, %30 : (f32, f32) -> f32
            %32 = emitc.mul %28, %28 : (f32, f32) -> f32
            %33 = emitc.add %arg8, %32 : (f32, f32) -> f32
            %34 = emitc.mul %29, %29 : (f32, f32) -> f32
            %35 = emitc.add %arg7, %34 : (f32, f32) -> f32
            scf.yield %35, %33, %31 : f32, f32, f32
          }
          memref.store %18, %7[%arg5] : memref<32xf32, 5>
          memref.store %22#0, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %16 step %c1 {
          %22 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %23 = emitc.cast %22 : i64 to i32
          %24 = arith.shrui %13, %23 : i32
          %c1_7 = arith.constant 1 : index
          scf.for %arg6 = %c0 to %c32 step %c1_7 {
            %25 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %26 = emitc.cast %25 : i64 to i32
            %27 = arith.cmpi ult, %26, %24 : i32
            scf.if %27 {
              %28 = arith.addi %26, %24 : i32
              %29 = emitc.cast %28 : i32 to index
              %30 = memref.load %1[%29] : memref<1xf32, 5>
              %31 = memref.load %1[%arg6] : memref<1xf32, 5>
              %32 = emitc.add %31, %30 : (f32, f32) -> f32
              memref.store %32, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %19 = memref.load %1[%c0] : memref<1xf32, 5>
        %20 = emitc.add %19, %cst_0 : (f32, f32) -> f32
        %21 = emitc.call "sqrtf"(%20) : (f32) -> f32
        %c1_6 = arith.constant 1 : index
        scf.for %arg5 = %c0 to %c32 step %c1_6 {
          %22 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %23 = memref.load %9[%arg5] : memref<32xf32, 5>
          %24 = memref.load %7[%arg5] : memref<32xf32, 5>
          %25 = emitc.add %24, %cst_0 : (f32, f32) -> f32
          %26 = emitc.call "sqrtf"(%25) : (f32) -> f32
          %27 = emitc.cast %22 : i64 to i32
          %28 = arith.cmpi eq, %27, %c0_i32 : i32
          scf.if %28 {
            %29 = emitc.mul %26, %21 : (f32, f32) -> f32
            %30 = emitc.add %29, %cst_0 : (f32, f32) -> f32
            %31 = emitc.div %23, %30 : (f32, f32) -> f32
            %32 = emitc.sub %cst_1, %31 : (f32, f32) -> f32
            memref.store %32, %arg2[%3] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.cmpi slt, %4, %arg3 : i32
      scf.if %5 {
        %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<32xf32, 5>
        %8 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %9 = builtin.unrealized_conversion_cast %8 : !llvm.ptr<6> to memref<32xf32, 5>
        %10 = arith.muli %4, %arg4 : i32
        %11 = emitc.cast %10 : i32 to index
        %12 = emitc.cast %arg4 : i32 to index
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %20#2, %1[%arg5] : memref<1xf32, 5>
        }
        %13 = emitc.cast %c27_i32 : i32 to index
        %14 = arith.subi %c32, %13 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            scf.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %15 = memref.load %1[%c0] : memref<1xf32, 5>
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %15, %9[%arg5] : memref<32xf32, 5>
          memref.store %20#1, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            scf.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %16 = memref.load %1[%c0] : memref<1xf32, 5>
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %16, %7[%arg5] : memref<32xf32, 5>
          memref.store %20#0, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            scf.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %17 = memref.load %1[%c0] : memref<1xf32, 5>
        %18 = emitc.add %17, %cst_0 : (f32, f32) -> f32
        %19 = emitc.call "sqrtf"(%18) : (f32) -> f32
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = memref.load %9[%arg5] : memref<32xf32, 5>
          %22 = memref.load %7[%arg5] : memref<32xf32, 5>
          %23 = emitc.add %22, %cst_0 : (f32, f32) -> f32
          %24 = emitc.call "sqrtf"(%23) : (f32) -> f32
          %25 = emitc.cast %20 : i64 to i32
          %26 = arith.cmpi eq, %25, %c0_i32 : i32
          scf.if %26 {
            %27 = emitc.mul %24, %19 : (f32, f32) -> f32
            %28 = emitc.add %27, %cst_0 : (f32, f32) -> f32
            %29 = emitc.div %21, %28 : (f32, f32) -> f32
            %30 = emitc.sub %cst_1, %29 : (f32, f32) -> f32
            memref.store %30, %arg2[%3] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z29cosine_similarity_loss_kernelPKfS0_Pfii_0 {
    gpu.func @_Z29cosine_similarity_loss_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) {
      %c27_i32 = arith.constant 27 : i32
      %c16_i32 = arith.constant 16 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0_i32 = arith.constant 0 : i32
      %cst_0 = arith.constant 9.99999993E-9 : f32
      %cst_1 = arith.constant 1.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<1xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.cmpi slt, %4, %arg3 : i32
      emitc.if %5 {
        %6 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %7 = builtin.unrealized_conversion_cast %6 : !llvm.ptr<6> to memref<32xf32, 5>
        %8 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %9 = builtin.unrealized_conversion_cast %8 : !llvm.ptr<6> to memref<32xf32, 5>
        %10 = arith.muli %4, %arg4 : i32
        %11 = emitc.cast %10 : i32 to index
        %12 = emitc.cast %arg4 : i32 to index
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %20#2, %1[%arg5] : memref<1xf32, 5>
        }
        %13 = emitc.cast %c27_i32 : i32 to index
        %14 = arith.subi %c32, %13 : index
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            emitc.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %15 = memref.load %1[%c0] : memref<1xf32, 5>
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %15, %9[%arg5] : memref<32xf32, 5>
          memref.store %20#1, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            emitc.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %16 = memref.load %1[%c0] : memref<1xf32, 5>
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20:3 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %cst, %arg8 = %cst, %arg9 = %cst) -> (f32, f32, f32) {
            %21 = arith.subi %arg6, %arg5 : index
            %22 = arith.divui %21, %c32 : index
            %23 = arith.muli %22, %c32 : index
            %24 = arith.addi %arg5, %23 : index
            %25 = arith.addi %24, %11 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = memref.load %arg1[%25] : memref<?xf32>
            %28 = emitc.mul %26, %27 : (f32, f32) -> f32
            %29 = emitc.add %arg9, %28 : (f32, f32) -> f32
            %30 = emitc.mul %26, %26 : (f32, f32) -> f32
            %31 = emitc.add %arg8, %30 : (f32, f32) -> f32
            %32 = emitc.mul %27, %27 : (f32, f32) -> f32
            %33 = emitc.add %arg7, %32 : (f32, f32) -> f32
            scf.yield %33, %31, %29 : f32, f32, f32
          }
          memref.store %16, %7[%arg5] : memref<32xf32, 5>
          memref.store %20#0, %1[%arg5] : memref<1xf32, 5>
        }
        scf.for %arg5 = %c0 to %14 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = emitc.cast %20 : i64 to i32
          %22 = arith.shrui %c16_i32, %21 : i32
          scf.for %arg6 = %c0 to %c32 step %c1 {
            %23 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %24 = emitc.cast %23 : i64 to i32
            %25 = arith.cmpi ult, %24, %22 : i32
            emitc.if %25 {
              %26 = arith.addi %24, %22 : i32
              %27 = emitc.cast %26 : i32 to index
              %28 = memref.load %1[%27] : memref<1xf32, 5>
              %29 = memref.load %1[%arg6] : memref<1xf32, 5>
              %30 = emitc.add %29, %28 : (f32, f32) -> f32
              memref.store %30, %1[%arg6] : memref<1xf32, 5>
            }
          }
        }
        %17 = memref.load %1[%c0] : memref<1xf32, 5>
        %18 = emitc.add %17, %cst_0 : (f32, f32) -> f32
        %19 = emitc.call "sqrtf"(%18) : (f32) -> f32
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %20 = builtin.unrealized_conversion_cast %arg5 : index to i64
          %21 = memref.load %9[%arg5] : memref<32xf32, 5>
          %22 = memref.load %7[%arg5] : memref<32xf32, 5>
          %23 = emitc.add %22, %cst_0 : (f32, f32) -> f32
          %24 = emitc.call "sqrtf"(%23) : (f32) -> f32
          %25 = emitc.cast %20 : i64 to i32
          %26 = arith.cmpi eq, %25, %c0_i32 : i32
          emitc.if %26 {
            %27 = emitc.mul %24, %19 : (f32, f32) -> f32
            %28 = emitc.add %27, %cst_0 : (f32, f32) -> f32
            %29 = emitc.div %21, %28 : (f32, f32) -> f32
            %30 = emitc.sub %cst_1, %29 : (f32, f32) -> f32
            memref.store %30, %arg2[%3] : memref<?xf32>
          }
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

