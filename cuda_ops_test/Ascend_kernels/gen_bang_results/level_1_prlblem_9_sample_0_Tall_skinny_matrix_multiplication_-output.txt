warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z40__device_stub__tall_skinny_matmul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z25tall_skinny_matmul_kernelPKfS0_Pfii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z25tall_skinny_matmul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.thread_id  y
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %4, %c16_i32 : i32
    %10 = arith.addi %9, %8 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %10, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %2, %c16_i32 : i32
    %15 = arith.addi %14, %6 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %15 : i32 to index
    %18 = arith.index_cast %arg4 : i32 to index
    %19 = arith.muli %10, %arg4 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %15, %arg3 : i32
    %22 = affine.for %arg5 = 0 to %18 step 16 iter_args(%arg6 = %cst) -> (f32) {
      %26 = arith.index_cast %arg5 : index to i32
      %27 = affine.if affine_set<()[s0, s1] : (-s0 + s1 - 1 >= 0)>()[%11, %0] -> i1 {
        %30 = arith.addi %26, %6 : i32
        %31 = arith.cmpi slt, %30, %arg4 : i32
        affine.yield %31 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %27 {
        %30 = affine.load %arg0[%arg5 + symbol(%20) + symbol(%5)] : memref<?xf32>
        affine.store %30, %alloca_0[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      }
      %28 = affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 + s1 - 1 >= 0)>(%arg5)[%7, %18] -> i1 {
        affine.yield %21 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %28 {
        %30 = affine.load %arg1[(%arg5 + symbol(%7)) * symbol(%0) + symbol(%16)] : memref<?xf32>
        affine.store %30, %alloca[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %29 = affine.for %arg7 = 0 to 16 iter_args(%arg8 = %arg6) -> (f32) {
        %30 = affine.load %alloca_0[symbol(%7), %arg7] : memref<16x16xf32, 5>
        %31 = affine.load %alloca[%arg7, symbol(%5)] : memref<16x16xf32, 5>
        %32 = arith.mulf %30, %31 : f32
        %33 = arith.addf %arg8, %32 : f32
        affine.yield %33 : f32
      }
      nvvm.barrier0
      affine.yield %29 : f32
    }
    %23 = arith.cmpi slt, %10, %arg3 : i32
    %24 = arith.cmpi slt, %15, %arg3 : i32
    %25 = arith.andi %23, %24 : i1
    scf.if %25 {
      affine.store %22, %arg2[symbol(%13) + symbol(%17)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25tall_skinny_matmul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.thread_id  y
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %4, %c16_i32 : i32
    %10 = arith.addi %9, %8 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %10, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %2, %c16_i32 : i32
    %15 = arith.addi %14, %6 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %arg4 : i32 to index
    %18 = arith.muli %10, %arg4 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.cmpi slt, %15, %arg3 : i32
    %21 = affine.for %arg5 = 0 to %17 step 16 iter_args(%arg6 = %cst) -> (f32) {
      %24 = arith.index_cast %arg5 : index to i32
      %25 = affine.if affine_set<()[s0, s1] : (s0 - s1 - 1 >= 0)>()[%0, %11] -> i1 {
        %27 = arith.addi %24, %6 : i32
        %28 = arith.cmpi slt, %27, %arg4 : i32
        affine.yield %28 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %25 {
        %27 = affine.load %arg0[%arg5 + symbol(%19) + symbol(%5)] : memref<?xf32>
        affine.store %27, %alloca_0[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      }
      affine.if affine_set<(d0)[s0, s1, s2, s3] : (-d0 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg5)[%7, %17, %16, %0] {
        %27 = affine.load %arg1[(%arg5 + symbol(%7)) * symbol(%0) + symbol(%16)] : memref<?xf32>
        affine.store %27, %alloca[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%7), symbol(%5)] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %26 = affine.for %arg7 = 0 to 16 iter_args(%arg8 = %arg6) -> (f32) {
        %27 = affine.load %alloca_0[symbol(%7), %arg7] : memref<16x16xf32, 5>
        %28 = affine.load %alloca[%arg7, symbol(%5)] : memref<16x16xf32, 5>
        %29 = arith.mulf %27, %28 : f32
        %30 = arith.addf %arg8, %29 : f32
        affine.yield %30 : f32
      }
      nvvm.barrier0
      affine.yield %26 : f32
    }
    %22 = arith.cmpi slt, %10, %arg3 : i32
    %23 = arith.andi %22, %20 : i1
    scf.if %23 {
      affine.store %21, %arg2[symbol(%13) + symbol(%16)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25tall_skinny_matmul_kernelPKfS0_Pfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c-1 = arith.constant -1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.thread_id  y
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %4, %c16_i32 : i32
    %10 = arith.addi %9, %8 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %10, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.muli %2, %c16_i32 : i32
    %15 = arith.addi %14, %6 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %arg4 : i32 to index
    %18 = arith.muli %10, %arg4 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.cmpi slt, %15, %arg3 : i32
    %21 = scf.for %arg5 = %c0 to %17 step %c16 iter_args(%arg6 = %cst) -> (f32) {
      %24 = arith.index_cast %arg5 : index to i32
      %25 = arith.subi %0, %11 : index
      %26 = arith.addi %25, %c-1 : index
      %27 = arith.cmpi sge, %26, %c0 : index
      %28 = scf.if %27 -> (i1) {
        %39 = arith.addi %24, %6 : i32
        %40 = arith.cmpi slt, %39, %arg4 : i32
        scf.yield %40 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %28 {
        %39 = arith.addi %arg5, %19 : index
        %40 = arith.addi %39, %5 : index
        %41 = memref.load %arg0[%40] : memref<?xf32>
        memref.store %41, %alloca_0[%7, %5] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca_0[%7, %5] : memref<16x16xf32, 5>
      }
      %29 = arith.muli %arg5, %c-1 : index
      %30 = arith.subi %29, %7 : index
      %31 = arith.addi %30, %17 : index
      %32 = arith.addi %31, %c-1 : index
      %33 = arith.cmpi sge, %32, %c0 : index
      %34 = arith.subi %0, %16 : index
      %35 = arith.addi %34, %c-1 : index
      %36 = arith.cmpi sge, %35, %c0 : index
      %37 = arith.andi %33, %36 : i1
      scf.if %37 {
        %39 = arith.addi %arg5, %7 : index
        %40 = arith.muli %39, %0 : index
        %41 = arith.addi %40, %16 : index
        %42 = memref.load %arg1[%41] : memref<?xf32>
        memref.store %42, %alloca[%7, %5] : memref<16x16xf32, 5>
      } else {
        memref.store %cst, %alloca[%7, %5] : memref<16x16xf32, 5>
      }
      nvvm.barrier0
      %38 = scf.for %arg7 = %c0 to %c16 step %c1 iter_args(%arg8 = %arg6) -> (f32) {
        %39 = memref.load %alloca_0[%7, %arg7] : memref<16x16xf32, 5>
        %40 = memref.load %alloca[%arg7, %5] : memref<16x16xf32, 5>
        %41 = arith.mulf %39, %40 : f32
        %42 = arith.addf %arg8, %41 : f32
        scf.yield %42 : f32
      }
      nvvm.barrier0
      scf.yield %38 : f32
    }
    %22 = arith.cmpi slt, %10, %arg3 : i32
    %23 = arith.andi %22, %20 : i1
    scf.if %23 {
      %24 = arith.addi %13, %16 : index
      memref.store %21, %arg2[%24] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

