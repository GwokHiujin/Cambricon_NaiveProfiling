warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z45__device_stub__lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32) -> ()
    return
  }
  func.func private @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.muli %8, %arg3 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.index_cast %8 : i32 to index
    %12 = arith.muli %8, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.index_cast %21 : i32 to index
    %24 = arith.index_cast %21 : i32 to index
    %25 = arith.index_cast %21 : i32 to index
    %26 = arith.cmpi slt, %8, %arg3 : i32
    %27 = arith.cmpi slt, %21, %arg3 : i32
    %28 = arith.cmpi sge, %8, %21 : i32
    %29 = arith.andi %27, %28 : i1
    %30 = arith.andi %26, %29 : i1
    scf.if %30 {
      %31 = affine.for %arg4 = %25 to affine_map<()[s0] -> (s0 + 1)>()[%11] iter_args(%arg5 = %cst) -> (f32) {
        %32 = affine.load %arg0[%arg4 + symbol(%10) + symbol(%24) - symbol(%22)] : memref<?xf32>
        %33 = affine.load %arg1[(%arg4 + symbol(%24) - symbol(%23)) * symbol(%0) + symbol(%23)] : memref<?xf32>
        %34 = arith.mulf %32, %33 : f32
        %35 = arith.addf %arg5, %34 : f32
        affine.yield %35 : f32
      }
      affine.store %31, %arg2[symbol(%13) + symbol(%25)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.muli %8, %arg3 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.index_cast %8 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  x
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %8, %arg3 : i32
    %22 = arith.cmpi slt, %19, %arg3 : i32
    %23 = arith.cmpi sge, %8, %19 : i32
    %24 = arith.andi %22, %23 : i1
    %25 = arith.andi %21, %24 : i1
    scf.if %25 {
      %26 = affine.for %arg4 = %20 to affine_map<()[s0] -> (s0 + 1)>()[%11] iter_args(%arg5 = %cst) -> (f32) {
        %27 = affine.load %arg0[%arg4 + symbol(%10)] : memref<?xf32>
        %28 = affine.load %arg1[%arg4 * symbol(%0) + symbol(%20)] : memref<?xf32>
        %29 = arith.mulf %27, %28 : f32
        %30 = arith.addf %arg5, %29 : f32
        affine.yield %30 : f32
      }
      affine.store %26, %arg2[symbol(%10) + symbol(%20)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.muli %8, %arg3 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.index_cast %8 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.block_dim  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %13, %15 : i32
    %17 = gpu.thread_id  x
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.addi %16, %18 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %8, %arg3 : i32
    %22 = arith.cmpi slt, %19, %arg3 : i32
    %23 = arith.cmpi sge, %8, %19 : i32
    %24 = arith.andi %22, %23 : i1
    %25 = arith.andi %21, %24 : i1
    scf.if %25 {
      %26 = arith.addi %11, %c1 : index
      %27 = scf.for %arg4 = %20 to %26 step %c1 iter_args(%arg5 = %cst) -> (f32) {
        %29 = arith.addi %arg4, %10 : index
        %30 = memref.load %arg0[%29] : memref<?xf32>
        %31 = arith.muli %arg4, %0 : index
        %32 = arith.addi %31, %20 : index
        %33 = memref.load %arg1[%32] : memref<?xf32>
        %34 = arith.mulf %30, %33 : f32
        %35 = arith.addf %arg5, %34 : f32
        scf.yield %35 : f32
      }
      %28 = arith.addi %10, %20 : index
      memref.store %27, %arg2[%28] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %0 = arith.divui %arg4, %c1_0 : index
      %c1_1 = arith.constant 1 : index
      %1 = arith.remui %arg4, %c1_1 : index
      %c1_2 = arith.constant 1 : index
      %cst = arith.constant 0.000000e+00 : f32
      %2 = arith.index_cast %arg3 : i32 to index
      %3 = gpu.block_id  y
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  y
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %1 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.muli %9, %arg3 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.index_cast %9 : i32 to index
      %13 = gpu.block_id  x
      %14 = arith.index_cast %13 : index to i32
      %15 = gpu.block_dim  x
      %16 = arith.index_cast %15 : index to i32
      %17 = arith.muli %14, %16 : i32
      %18 = arith.index_cast %0 : index to i32
      %19 = arith.addi %17, %18 : i32
      %20 = arith.index_cast %19 : i32 to index
      %21 = arith.cmpi slt, %9, %arg3 : i32
      %22 = arith.cmpi slt, %19, %arg3 : i32
      %23 = arith.cmpi sge, %9, %19 : i32
      %24 = arith.andi %22, %23 : i1
      %25 = arith.andi %21, %24 : i1
      scf.if %25 {
        %26 = arith.addi %12, %c1_2 : index
        %27 = scf.for %arg5 = %20 to %26 step %c1_2 iter_args(%arg6 = %cst) -> (f32) {
          %29 = arith.addi %arg5, %11 : index
          %30 = memref.load %arg0[%29] : memref<?xf32>
          %31 = arith.muli %arg5, %2 : index
          %32 = arith.addi %31, %20 : index
          %33 = memref.load %arg1[%32] : memref<?xf32>
          %34 = arith.mulf %30, %33 : f32
          %35 = arith.addf %arg6, %34 : f32
          scf.yield %35 : f32
        }
        %28 = arith.addi %11, %20 : index
        memref.store %27, %arg2[%28] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %0 = arith.divui %arg4, %c1_0 : index
      %c1_1 = arith.constant 1 : index
      %1 = arith.remui %arg4, %c1_1 : index
      %c1_2 = arith.constant 1 : index
      %cst = arith.constant 0.000000e+00 : f32
      %2 = arith.index_cast %arg3 : i32 to index
      %3 = gpu.block_id  y
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  y
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %1 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.muli %9, %arg3 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.index_cast %9 : i32 to index
      %13 = gpu.block_id  x
      %14 = arith.index_cast %13 : index to i32
      %15 = gpu.block_dim  x
      %16 = arith.index_cast %15 : index to i32
      %17 = arith.muli %14, %16 : i32
      %18 = arith.index_cast %0 : index to i32
      %19 = arith.addi %17, %18 : i32
      %20 = arith.index_cast %19 : i32 to index
      %21 = arith.cmpi slt, %9, %arg3 : i32
      %22 = arith.cmpi slt, %19, %arg3 : i32
      %23 = arith.cmpi sge, %9, %19 : i32
      %24 = arith.andi %22, %23 : i1
      %25 = arith.andi %21, %24 : i1
      scf.if %25 {
        %26 = arith.addi %12, %c1_2 : index
        %27 = scf.for %arg5 = %20 to %26 step %c1_2 iter_args(%arg6 = %cst) -> (f32) {
          %29 = arith.addi %arg5, %11 : index
          %30 = memref.load %arg0[%29] : memref<?xf32>
          %31 = arith.muli %arg5, %2 : index
          %32 = arith.addi %31, %20 : index
          %33 = memref.load %arg1[%32] : memref<?xf32>
          %34 = arith.mulf %30, %33 : f32
          %35 = arith.addf %arg6, %34 : f32
          scf.yield %35 : f32
        }
        %28 = arith.addi %11, %20 : index
        memref.store %27, %arg2[%28] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = arith.muli %5, %arg3 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.index_cast %5 : i32 to index
    %9 = gpu.block_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.block_dim  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.muli %10, %12 : i32
    %14 = arith.cmpi slt, %5, %arg3 : i32
    %15 = arith.addi %8, %c1 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %16 = arith.index_cast %arg4 : index to i32
      %17 = arith.addi %13, %16 : i32
      %18 = arith.index_cast %17 : i32 to index
      %19 = arith.cmpi slt, %17, %arg3 : i32
      %20 = arith.cmpi sge, %5, %17 : i32
      %21 = arith.andi %19, %20 : i1
      %22 = arith.andi %14, %21 : i1
      scf.if %22 {
        %23 = scf.for %arg5 = %18 to %15 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %25 = arith.addi %arg5, %7 : index
          %26 = memref.load %arg0[%25] : memref<?xf32>
          %27 = arith.muli %arg5, %0 : index
          %28 = arith.addi %27, %18 : index
          %29 = memref.load %arg1[%28] : memref<?xf32>
          %30 = arith.mulf %26, %29 : f32
          %31 = arith.addf %arg6, %30 : f32
          scf.yield %31 : f32
        }
        %24 = arith.addi %7, %18 : index
        memref.store %23, %arg2[%24] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30lower_triangular_matmul_kernelPKfS0_Pfi_0 {
    gpu.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg3 : i32 to index
      %1 = gpu.block_id  y
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_dim  y
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %2, %4 : i32
      %6 = arith.muli %5, %arg3 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.index_cast %5 : i32 to index
      %9 = gpu.block_id  x
      %10 = arith.index_cast %9 : index to i32
      %11 = gpu.block_dim  x
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %10, %12 : i32
      %14 = arith.cmpi slt, %5, %arg3 : i32
      %15 = arith.addi %8, %c1 : index
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %16 = arith.index_cast %arg4 : index to i32
        %17 = arith.addi %13, %16 : i32
        %18 = arith.index_cast %17 : i32 to index
        %19 = arith.cmpi slt, %17, %arg3 : i32
        %20 = arith.cmpi sge, %5, %17 : i32
        %21 = arith.andi %19, %20 : i1
        %22 = arith.andi %14, %21 : i1
        scf.if %22 {
          %23 = scf.for %arg5 = %18 to %15 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %25 = arith.addi %arg5, %7 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.muli %arg5, %0 : index
            %28 = arith.addi %27, %18 : index
            %29 = memref.load %arg1[%28] : memref<?xf32>
            %30 = arith.mulf %26, %29 : f32
            %31 = arith.addf %arg6, %30 : f32
            scf.yield %31 : f32
          }
          %24 = arith.addi %7, %18 : index
          memref.store %23, %arg2[%24] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30lower_triangular_matmul_kernelPKfS0_Pfi_0 {
    gpu.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg3 : i32 to index
      %1 = gpu.block_id  y
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_dim  y
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %2, %4 : i32
      %6 = arith.muli %5, %arg3 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.index_cast %5 : i32 to index
      %9 = gpu.block_id  x
      %10 = arith.index_cast %9 : index to i32
      %c32_0 = arith.constant 32 : index
      %11 = arith.index_cast %c32_0 : index to i32
      %12 = arith.muli %10, %11 : i32
      %13 = arith.cmpi slt, %5, %arg3 : i32
      %14 = arith.addi %8, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %15 = arith.index_cast %arg4 : index to i32
        %16 = arith.addi %12, %15 : i32
        %17 = arith.index_cast %16 : i32 to index
        %18 = arith.cmpi slt, %16, %arg3 : i32
        %19 = arith.cmpi sge, %5, %16 : i32
        %20 = arith.andi %18, %19 : i1
        %21 = arith.andi %13, %20 : i1
        scf.if %21 {
          %22 = scf.for %arg5 = %17 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %24 = arith.addi %arg5, %7 : index
            %25 = memref.load %arg0[%24] : memref<?xf32>
            %26 = arith.muli %arg5, %0 : index
            %27 = arith.addi %26, %17 : index
            %28 = memref.load %arg1[%27] : memref<?xf32>
            %29 = arith.mulf %25, %28 : f32
            %30 = arith.addf %arg6, %29 : f32
            scf.yield %30 : f32
          }
          %23 = arith.addi %7, %17 : index
          memref.store %22, %arg2[%23] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  y
[ict-debug] GPUBlockIdToNPULowering: process op: 

%10 = gpu.block_id  x
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30lower_triangular_matmul_kernelPKfS0_Pfi_0 {
    gpu.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg3 : i32 to index
      %1 = "npu.block_id"() <{dimension = "Y"}> : () -> i64
      %2 = builtin.unrealized_conversion_cast %1 : i64 to index
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.muli %6, %arg3 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = arith.index_cast %6 : i32 to index
      %10 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %11 = builtin.unrealized_conversion_cast %10 : i64 to index
      %12 = arith.index_cast %11 : index to i32
      %c32_0 = arith.constant 32 : index
      %13 = arith.index_cast %c32_0 : index to i32
      %14 = arith.muli %12, %13 : i32
      %15 = arith.cmpi slt, %6, %arg3 : i32
      %16 = arith.addi %9, %c1 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %17 = arith.index_cast %arg4 : index to i32
        %18 = arith.addi %14, %17 : i32
        %19 = arith.index_cast %18 : i32 to index
        %20 = arith.cmpi slt, %18, %arg3 : i32
        %21 = arith.cmpi sge, %6, %18 : i32
        %22 = arith.andi %20, %21 : i1
        %23 = arith.andi %15, %22 : i1
        scf.if %23 {
          %24 = scf.for %arg5 = %19 to %16 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %26 = arith.addi %arg5, %8 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = arith.muli %arg5, %0 : index
            %29 = arith.addi %28, %19 : index
            %30 = memref.load %arg1[%29] : memref<?xf32>
            %31 = emitc.mul %27, %30 : (f32, f32) -> f32
            %32 = emitc.add %arg6, %31 : (f32, f32) -> f32
            scf.yield %32 : f32
          }
          %25 = arith.addi %8, %19 : index
          memref.store %24, %arg2[%25] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30lower_triangular_matmul_kernelPKfS0_Pfi_0 {
    gpu.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg3 : i32 to index
      %1 = "npu.block_id"() <{dimension = "Y"}> : () -> i64
      %2 = builtin.unrealized_conversion_cast %1 : i64 to index
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.muli %6, %arg3 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = arith.index_cast %6 : i32 to index
      %10 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %11 = builtin.unrealized_conversion_cast %10 : i64 to index
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = arith.cmpi slt, %6, %arg3 : i32
      %15 = arith.addi %9, %c1 : index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %16 = arith.index_cast %arg4 : index to i32
        %17 = arith.addi %13, %16 : i32
        %18 = arith.index_cast %17 : i32 to index
        %19 = arith.cmpi slt, %17, %arg3 : i32
        %20 = arith.cmpi sge, %6, %17 : i32
        %21 = arith.andi %19, %20 : i1
        %22 = arith.andi %14, %21 : i1
        scf.if %22 {
          %23 = scf.for %arg5 = %18 to %15 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %25 = arith.addi %arg5, %8 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.muli %arg5, %0 : index
            %28 = arith.addi %27, %18 : index
            %29 = memref.load %arg1[%28] : memref<?xf32>
            %30 = emitc.mul %26, %29 : (f32, f32) -> f32
            %31 = emitc.add %arg6, %30 : (f32, f32) -> f32
            scf.yield %31 : f32
          }
          %24 = arith.addi %8, %18 : index
          memref.store %23, %arg2[%24] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30lower_triangular_matmul_kernelPKfS0_Pfi_0 {
    gpu.func @_Z30lower_triangular_matmul_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg3 : i32 to index
      %1 = "npu.block_id"() <{dimension = "Y"}> : () -> i64
      %2 = builtin.unrealized_conversion_cast %1 : i64 to index
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.muli %6, %arg3 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9 = arith.index_cast %6 : i32 to index
      %10 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %11 = builtin.unrealized_conversion_cast %10 : i64 to index
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = arith.cmpi slt, %6, %arg3 : i32
      %15 = arith.addi %9, %c1 : index
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %16 = arith.index_cast %arg4 : index to i32
        %17 = arith.addi %13, %16 : i32
        %18 = arith.index_cast %17 : i32 to index
        %19 = arith.cmpi slt, %17, %arg3 : i32
        %20 = arith.cmpi sge, %6, %17 : i32
        %21 = arith.andi %19, %20 : i1
        %22 = arith.andi %14, %21 : i1
        emitc.if %22 {
          %23 = scf.for %arg5 = %18 to %15 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %25 = arith.addi %arg5, %8 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.muli %arg5, %0 : index
            %28 = arith.addi %27, %18 : index
            %29 = memref.load %arg1[%28] : memref<?xf32>
            %30 = emitc.mul %26, %29 : (f32, f32) -> f32
            %31 = emitc.add %arg6, %30 : (f32, f32) -> f32
            scf.yield %31 : f32
          }
          %24 = arith.addi %8, %18 : index
          memref.store %23, %arg2[%24] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("./Ascend_kernels/gen_cuda_kernels/level_1_prlblem_15_sample_0_Matmul_for_lower_triangular_matrices.cu":4:17): error: 'arith.index_cast' op unable to find printer for op
[ict-debug] driver.cc: After emitc::translateToCpp:

