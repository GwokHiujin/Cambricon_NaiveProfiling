warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
loc("./Ascend_kernels/gen_cuda_kernels/level_1_prlblem_45_sample_0_Average_Pooling_2D.cu":24:19): error: 'arith.maxnumf' op operand #0 must be floating-point-like, but got 'i32'
"builtin.module"() ({
  "func.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> (), sym_name = "_Z32__device_stub__avg_pool2d_kernelPKfPfiiiiiiiii", sym_visibility = "private"}> ({
  ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32):
    "func.call"(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10) <{callee = @_Z17avg_pool2d_kernelPKfPfiiiiiiiii}> : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    "func.return"() : () -> ()
  }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
  "func.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> (), sym_name = "_Z17avg_pool2d_kernelPKfPfiiiiiiiii", sym_visibility = "private"}> ({
  ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32):
    %0 = "arith.constant"() <{value = 1 : index}> : () -> index
    %1 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
    %2 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %3 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
    %4 = "arith.index_cast"(%3) : (index) -> i32
    %5 = "gpu.block_dim"() <{dimension = #gpu<dim x>}> : () -> index
    %6 = "arith.index_cast"(%5) : (index) -> i32
    %7 = "arith.muli"(%4, %6) : (i32, i32) -> i32
    %8 = "gpu.thread_id"() <{dimension = #gpu<dim x>}> : () -> index
    %9 = "arith.index_cast"(%8) : (index) -> i32
    %10 = "arith.addi"(%7, %9) : (i32, i32) -> i32
    %11 = "arith.index_cast"(%10) : (i32) -> index
    %12 = "arith.muli"(%arg2, %arg3) : (i32, i32) -> i32
    %13 = "arith.muli"(%12, %arg6) : (i32, i32) -> i32
    %14 = "arith.muli"(%13, %arg7) : (i32, i32) -> i32
    %15 = "arith.cmpi"(%10, %14) <{predicate = 2 : i64}> : (i32, i32) -> i1
    "scf.if"(%15) ({
      %16 = "arith.remsi"(%10, %arg7) : (i32, i32) -> i32
      %17 = "arith.divsi"(%10, %arg7) : (i32, i32) -> i32
      %18 = "arith.remsi"(%17, %arg6) : (i32, i32) -> i32
      %19 = "arith.muli"(%arg7, %arg6) : (i32, i32) -> i32
      %20 = "arith.divsi"(%10, %19) : (i32, i32) -> i32
      %21 = "arith.remsi"(%20, %arg3) : (i32, i32) -> i32
      %22 = "arith.muli"(%arg7, %arg6) : (i32, i32) -> i32
      %23 = "arith.muli"(%22, %arg3) : (i32, i32) -> i32
      %24 = "arith.divsi"(%10, %23) : (i32, i32) -> i32
      %25 = "arith.muli"(%18, %arg9) : (i32, i32) -> i32
      %26 = "arith.subi"(%25, %arg10) : (i32, i32) -> i32
      %27 = "arith.muli"(%16, %arg9) : (i32, i32) -> i32
      %28 = "arith.subi"(%27, %arg10) : (i32, i32) -> i32
      %29 = "arith.addi"(%26, %arg8) : (i32, i32) -> i32
      %30 = "arith.addi"(%28, %arg8) : (i32, i32) -> i32
      %31 = "arith.maxnumf"(%26, %2) <{fastmath = #arith.fastmath<none>}> : (i32, i32) -> i32
      %32 = "arith.maxnumf"(%28, %2) <{fastmath = #arith.fastmath<none>}> : (i32, i32) -> i32
      %33 = "func.call"(%29, %arg4) <{callee = @_ZL3minii}> : (i32, i32) -> i32
      %34 = "func.call"(%30, %arg5) <{callee = @_ZL3minii}> : (i32, i32) -> i32
      %35 = "arith.index_cast"(%33) : (i32) -> index
      %36 = "arith.index_cast"(%31) : (i32) -> index
      %37 = "arith.index_cast"(%31) : (i32) -> index
      %38 = "arith.index_cast"(%34) : (i32) -> index
      %39 = "arith.index_cast"(%32) : (i32) -> index
      %40 = "arith.subi"(%38, %39) : (index, index) -> index
      %41 = "arith.index_cast"(%32) : (i32) -> index
      %42 = "arith.muli"(%24, %arg3) : (i32, i32) -> i32
      %43 = "arith.addi"(%42, %21) : (i32, i32) -> i32
      %44 = "arith.muli"(%43, %arg4) : (i32, i32) -> i32
      %45:2 = "scf.for"(%36, %35, %0, %2, %1) ({
      ^bb0(%arg11: index, %arg12: i32, %arg13: f32):
        %48 = "arith.subi"(%arg11, %36) : (index, index) -> index
        %49 = "arith.addi"(%37, %48) : (index, index) -> index
        %50 = "arith.index_cast"(%49) : (index) -> i32
        %51 = "arith.index_cast"(%arg12) : (i32) -> index
        %52 = "arith.addi"(%51, %40) : (index, index) -> index
        %53 = "arith.index_cast"(%52) : (index) -> i32
        %54 = "arith.addi"(%44, %50) : (i32, i32) -> i32
        %55 = "arith.muli"(%54, %arg5) : (i32, i32) -> i32
        %56 = "scf.for"(%39, %38, %0, %arg13) ({
        ^bb0(%arg14: index, %arg15: f32):
          %57 = "arith.subi"(%arg14, %39) : (index, index) -> index
          %58 = "arith.addi"(%41, %57) : (index, index) -> index
          %59 = "arith.index_cast"(%58) : (index) -> i32
          %60 = "arith.addi"(%55, %59) : (i32, i32) -> i32
          %61 = "arith.index_cast"(%60) : (i32) -> index
          %62 = "memref.load"(%arg0, %61) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %63 = "arith.addf"(%arg15, %62) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "scf.yield"(%63) : (f32) -> ()
        }) : (index, index, index, f32) -> f32
        "scf.yield"(%53, %56) : (i32, f32) -> ()
      }) : (index, index, index, i32, f32) -> (i32, f32)
      %46 = "arith.sitofp"(%45#0) : (i32) -> f32
      %47 = "arith.divf"(%45#1, %46) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
      "affine.store"(%47, %arg1, %11) <{map = affine_map<()[s0] -> (s0)>}> : (f32, memref<?xf32>, index) -> ()
      "scf.yield"() : () -> ()
    }, {
    }) : (i1) -> ()
    "func.return"() : () -> ()
  }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
  "func.func"() <{function_type = (i32, i32) -> i32, sym_name = "_ZL3minii", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: i32):
    %0 = "func.call"(%arg0, %arg1) <{callee = @__nv_min}> : (i32, i32) -> i32
    "func.return"(%0) : (i32) -> ()
  }) {llvm.linkage = #llvm.linkage<internal>, polygeist.device_only_func = "1"} : () -> ()
  "func.func"() <{function_type = (i32, i32) -> i32, sym_name = "__nv_min", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
