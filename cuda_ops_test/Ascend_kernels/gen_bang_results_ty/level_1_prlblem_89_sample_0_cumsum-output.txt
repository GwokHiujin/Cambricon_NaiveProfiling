warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z26__device_stub__scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z11scan_kernelPKfPfii(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.divsi %7, %arg3 : i32
    %10 = arith.muli %9, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.remsi %7, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.cmpi slt, %9, %arg2 : i32
    scf.if %14 {
      %15 = affine.for %arg4 = 0 to affine_map<()[s0] -> (s0 + 1)>()[%13] iter_args(%arg5 = %cst) -> (f32) {
        %16 = affine.load %arg0[%arg4 + symbol(%11)] : memref<?xf32>
        %17 = arith.addf %arg5, %16 : f32
        affine.yield %17 : f32
      }
      affine.store %15, %arg1[symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.divsi %7, %arg3 : i32
    %10 = arith.muli %9, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.remsi %7, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.cmpi slt, %9, %arg2 : i32
    scf.if %14 {
      %15 = affine.for %arg4 = 0 to affine_map<()[s0] -> (s0 + 1)>()[%13] iter_args(%arg5 = %cst) -> (f32) {
        %16 = affine.load %arg0[%arg4 + symbol(%11)] : memref<?xf32>
        %17 = arith.addf %arg5, %16 : f32
        affine.yield %17 : f32
      }
      affine.store %15, %arg1[symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.divsi %7, %arg3 : i32
    %10 = arith.muli %9, %arg3 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.remsi %7, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.cmpi slt, %9, %arg2 : i32
    scf.if %14 {
      %15 = arith.addi %13, %c1 : index
      %16 = scf.for %arg4 = %c0 to %15 step %c1 iter_args(%arg5 = %cst) -> (f32) {
        %17 = arith.addi %arg4, %11 : index
        %18 = memref.load %arg0[%17] : memref<?xf32>
        %19 = arith.addf %arg5, %18 : f32
        scf.yield %19 : f32
      }
      memref.store %16, %arg1[%8] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.divsi %6, %arg3 : i32
      %9 = arith.muli %8, %arg3 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.remsi %6, %arg3 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.cmpi slt, %8, %arg2 : i32
      scf.if %13 {
        %14 = arith.addi %12, %c1_0 : index
        %15 = scf.for %arg5 = %c0_1 to %14 step %c1_0 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.addi %arg5, %10 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = arith.addf %arg6, %17 : f32
          scf.yield %18 : f32
        }
        memref.store %15, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.divsi %6, %arg3 : i32
      %9 = arith.muli %8, %arg3 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.remsi %6, %arg3 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.cmpi slt, %8, %arg2 : i32
      scf.if %13 {
        %14 = arith.addi %12, %c1_0 : index
        %15 = scf.for %arg5 = %c0_1 to %14 step %c1_0 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.addi %arg5, %10 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = arith.addf %arg6, %17 : f32
          scf.yield %18 : f32
        }
        memref.store %15, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.divsi %6, %arg3 : i32
      %9 = arith.muli %8, %arg3 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.remsi %6, %arg3 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.cmpi slt, %8, %arg2 : i32
      scf.if %13 {
        %14 = arith.addi %12, %c1 : index
        %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
          %16 = arith.addi %arg5, %10 : index
          %17 = memref.load %arg0[%16] : memref<?xf32>
          %18 = arith.addf %arg6, %17 : f32
          scf.yield %18 : f32
        }
        memref.store %15, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z11scan_kernelPKfPfii_0 {
    gpu.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.index_cast %6 : i32 to index
        %8 = arith.divsi %6, %arg3 : i32
        %9 = arith.muli %8, %arg3 : i32
        %10 = arith.index_cast %9 : i32 to index
        %11 = arith.remsi %6, %arg3 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.cmpi slt, %8, %arg2 : i32
        scf.if %13 {
          %14 = arith.addi %12, %c1 : index
          %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %16 = arith.addi %arg5, %10 : index
            %17 = memref.load %arg0[%16] : memref<?xf32>
            %18 = arith.addf %arg6, %17 : f32
            scf.yield %18 : f32
          }
          memref.store %15, %arg1[%7] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z11scan_kernelPKfPfii_0 {
    gpu.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %c32_0 = arith.constant 32 : index
      %2 = arith.index_cast %c32_0 : index to i32
      %3 = arith.muli %1, %2 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.divsi %5, %arg3 : i32
        %8 = arith.muli %7, %arg3 : i32
        %9 = arith.index_cast %8 : i32 to index
        %10 = arith.remsi %5, %arg3 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.cmpi slt, %7, %arg2 : i32
        scf.if %12 {
          %13 = arith.addi %11, %c1 : index
          %14 = scf.for %arg5 = %c0 to %13 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %15 = arith.addi %arg5, %9 : index
            %16 = memref.load %arg0[%15] : memref<?xf32>
            %17 = arith.addf %arg6, %16 : f32
            scf.yield %17 : f32
          }
          memref.store %14, %arg1[%6] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%0 = gpu.block_id  x
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z11scan_kernelPKfPfii_0 {
    gpu.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %1 = builtin.unrealized_conversion_cast %0 : i64 to index
      %2 = arith.index_cast %1 : index to i32
      %c32_0 = arith.constant 32 : index
      %3 = arith.index_cast %c32_0 : index to i32
      %4 = arith.muli %2, %3 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.index_cast %6 : i32 to index
        %8 = arith.divsi %6, %arg3 : i32
        %9 = arith.muli %8, %arg3 : i32
        %10 = arith.index_cast %9 : i32 to index
        %11 = arith.remsi %6, %arg3 : i32
        %12 = arith.index_cast %11 : i32 to index
        %13 = arith.cmpi slt, %8, %arg2 : i32
        scf.if %13 {
          %14 = arith.addi %12, %c1 : index
          %15 = scf.for %arg5 = %c0 to %14 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %16 = arith.addi %arg5, %10 : index
            %17 = memref.load %arg0[%16] : memref<?xf32>
            %18 = emitc.add %arg6, %17 : (f32, f32) -> f32
            scf.yield %18 : f32
          }
          memref.store %15, %arg1[%7] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z11scan_kernelPKfPfii_0 {
    gpu.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %1 = builtin.unrealized_conversion_cast %0 : i64 to index
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c32_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.divsi %5, %arg3 : i32
        %8 = arith.muli %7, %arg3 : i32
        %9 = arith.index_cast %8 : i32 to index
        %10 = arith.remsi %5, %arg3 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.cmpi slt, %7, %arg2 : i32
        scf.if %12 {
          %13 = arith.addi %11, %c1 : index
          %14 = scf.for %arg5 = %c0 to %13 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %15 = arith.addi %arg5, %9 : index
            %16 = memref.load %arg0[%15] : memref<?xf32>
            %17 = emitc.add %arg6, %16 : (f32, f32) -> f32
            scf.yield %17 : f32
          }
          memref.store %14, %arg1[%6] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z11scan_kernelPKfPfii_0 {
    gpu.func @_Z11scan_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.block_id"() <{dimension = "X"}> : () -> i64
      %1 = builtin.unrealized_conversion_cast %0 : i64 to index
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c32_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.divsi %5, %arg3 : i32
        %8 = arith.muli %7, %arg3 : i32
        %9 = arith.index_cast %8 : i32 to index
        %10 = arith.remsi %5, %arg3 : i32
        %11 = arith.index_cast %10 : i32 to index
        %12 = arith.cmpi slt, %7, %arg2 : i32
        emitc.if %12 {
          %13 = arith.addi %11, %c1 : index
          %14 = scf.for %arg5 = %c0 to %13 step %c1 iter_args(%arg6 = %cst) -> (f32) {
            %15 = arith.addi %arg5, %9 : index
            %16 = memref.load %arg0[%15] : memref<?xf32>
            %17 = emitc.add %arg6, %16 : (f32, f32) -> f32
            scf.yield %17 : f32
          }
          memref.store %14, %arg1[%6] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("./Ascend_kernels/gen_cuda_kernels/level_1_prlblem_89_sample_0_cumsum.cu":4:15): error: 'arith.index_cast' op unable to find printer for op
[ict-debug] driver.cc: After emitc::translateToCpp:

