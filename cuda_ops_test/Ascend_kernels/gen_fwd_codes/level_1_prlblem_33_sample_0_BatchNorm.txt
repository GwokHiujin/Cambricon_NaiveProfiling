
std::vector<torch::Tensor> batch_norm_cuda(
    torch::Tensor input,
    torch::Tensor gamma,
    torch::Tensor beta,
    torch::Tensor running_mean,
    torch::Tensor running_var,
    float epsilon
) {
    auto output = torch::zeros_like(input);
    
    int batch_size = input.size(0);
    int channels = input.size(1); 
    int height = input.size(2);
    int width = input.size(3);
    
    int size = batch_size * channels * height * width;
    const int threads = 256;
    const int blocks = (size + threads - 1) / threads;
    
    batch_norm_kernel<<<blocks, threads>>>(
        input.data_ptr<float>(),
        gamma.data_ptr<float>(),
        beta.data_ptr<float>(),
        running_mean.data_ptr<float>(),
        running_var.data_ptr<float>(),
        output.data_ptr<float>(),
        batch_size,
        channels, 
        height,
        width,
        epsilon
    );
    
    return {output};
}
