torch::Tensor instance_norm_forward(
    torch::Tensor x, torch::Tensor gamma, torch::Tensor beta, double epsilon) {
    x = x.contiguous();
    gamma = gamma.contiguous();
    beta = beta.contiguous();

    int N = x.size(0);
    int C = x.size(1);
    int H = x.size(2);
    int W = x.size(3);

    auto y = torch::empty_like(x);

    auto mean = torch::empty({N, C}, x.options());
    auto var = torch::empty({N, C}, x.options());

    dim3 blockDim(256);
    dim3 gridDim(N, C);

    int shared_mem_size = 2 * blockDim.x * sizeof(float);

    compute_mean_var_kernel<<<gridDim, blockDim, shared_mem_size>>>(
        x.data_ptr<float>(),
        mean.data_ptr<float>(),
        var.data_ptr<float>(),
        N, C, H, W
    );

    int total_elements = N * C * H * W;
    int threads = 256;
    int blocks = (total_elements + threads - 1) / threads;

    instance_norm_kernel<<<blocks, threads>>>(
        x.data_ptr<float>(),
        mean.data_ptr<float>(),
        var.data_ptr<float>(),
        gamma.data_ptr<float>(),
        beta.data_ptr<float>(),
        y.data_ptr<float>(),
        (float)epsilon,
        N, C, H, W
    );

    return y;
}
