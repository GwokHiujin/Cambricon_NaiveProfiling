torch::Tensor frobenius_norm_cuda(torch::Tensor input) {
    auto size = input.numel();
    auto output = torch::empty_like(input);
    
    const int block_size = 256;
    const int num_blocks = (size + block_size - 1) / block_size;
    
    auto partial_sums = torch::empty({num_blocks}, input.options());
    
    square_sum_kernel<<<num_blocks, block_size, block_size * sizeof(float)>>>(
        input.data_ptr<float>(),
        partial_sums.data_ptr<float>(),
        size
    );
    
    float norm = std::sqrt(partial_sums.sum().item<float>());
    
    frobenius_norm_kernel<<<num_blocks, block_size>>>(
        input.data_ptr<float>(),
        output.data_ptr<float>(),
        norm,
        size
    );
    
    return {output};
}
