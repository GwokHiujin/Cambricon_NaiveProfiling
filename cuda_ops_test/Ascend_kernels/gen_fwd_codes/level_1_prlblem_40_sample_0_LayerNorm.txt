


torch::Tensor layer_norm_cuda(torch::Tensor input, torch::Tensor weight, torch::Tensor bias) {
    auto batch_size = input.size(0);
    auto features = input.size(1);
    auto dim1 = input.size(2);
    auto dim2 = input.size(3);
    auto output = torch::zeros_like(input);
    auto mean = torch::zeros(features, input.device());
    auto inv_var = torch::zeros(features, input.device());

    const int block_size = 256;
    const int num_blocks = (features + block_size - 1) / block_size;

    compute_mean_kernel<<<num_blocks, block_size>>>(input.data_ptr<float>(), mean.data_ptr<float>(), batch_size, features, dim1, dim2);
    compute_inv_var_kernel<<<num_blocks, block_size>>>(input.data_ptr<float>(), mean.data_ptr<float>(), inv_var.data_ptr<float>(), batch_size, features, dim1, dim2);

    const int output_block_size = 256;
    const int output_num_blocks = (batch_size * features * dim1 * dim2 + output_block_size - 1) / output_block_size;

    layer_norm_kernel<<<output_num_blocks, output_block_size>>>(input.data_ptr<float>(), weight.data_ptr<float>(), bias.data_ptr<float>(), output.data_ptr<float>(), mean.data_ptr<float>(), inv_var.data_ptr<float>(), batch_size, features, dim1, dim2);

    return output;
}
