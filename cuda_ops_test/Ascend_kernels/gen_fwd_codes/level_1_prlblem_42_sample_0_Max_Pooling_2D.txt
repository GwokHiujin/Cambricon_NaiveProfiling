torch::Tensor max_pool2d_cuda(torch::Tensor x, int kernel_size, int stride, int padding, int dilation) {
     // Get input dimensions
     int batch_size = x.size(0);
     int channels = x.size(1);
     int input_height = x.size(2);
     int input_width = x.size(3);

     // Compute output dimensions
     int output_height = (input_height + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1;
     int output_width  = (input_width  + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1;

     // Create output tensor
     auto options = torch::TensorOptions().dtype(x.dtype()).device(x.device());
     auto output = torch::empty({batch_size, channels, output_height, output_width}, options);

     // Launch CUDA kernel
     // Compute total number of threads
     int total_threads = batch_size * channels * output_height * output_width;
     const int threads_per_block = 256;
     int blocks = (total_threads + threads_per_block - 1) / threads_per_block;
     max_pool2d_cuda_kernel<<<blocks, threads_per_block>>> (
         x.data_ptr<float>(),
         output.data_ptr<float>(),
         batch_size,
         channels,
         input_height,
         input_width,
         output_height,
         output_width,
         kernel_size,
         stride,
         padding,
         dilation
     );
     return output;
}
