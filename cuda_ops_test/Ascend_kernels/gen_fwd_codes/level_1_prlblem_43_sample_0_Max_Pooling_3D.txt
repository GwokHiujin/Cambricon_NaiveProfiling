torch::Tensor maxpool3d_cuda(
    torch::Tensor input,
    int kernel_size,
    int stride,
    int padding,
    int dilation
) {
    const int batch_size = input.size(0);
    const int channels = input.size(1);
    const int dim1 = input.size(2);
    const int dim2 = input.size(3);
    const int dim3 = input.size(4);
    
    const int out_dim1 = (dim1 + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1;
    const int out_dim2 = (dim2 + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1;
    const int out_dim3 = (dim3 + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1;

    auto output = torch::zeros({batch_size, channels, out_dim1, out_dim2, out_dim3}, 
                             input.options());

    const int total_elements = batch_size * channels * out_dim1 * out_dim2 * out_dim3;
    const int threads = 256;
    const int blocks = (total_elements + threads - 1) / threads;

    maxpool3d_kernel<<<blocks, threads>>>(
        input.data_ptr<float>(),
        output.data_ptr<float>(),
        batch_size,
        channels,
        dim1,
        dim2,
        dim3,
        kernel_size,
        stride,
        padding, 
        dilation,
        out_dim1,
        out_dim2,
        out_dim3
    );

    return output;
}
