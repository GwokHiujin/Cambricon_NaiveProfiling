torch::Tensor max_reduction_cuda(torch::Tensor x, int dim) {
    auto sizes = x.sizes();
    int dim_size = sizes[dim];
    int stride = 1;
    for (int i = dim + 1; i < sizes.size(); ++i) {
        stride *= sizes[i];
    }
    int num_elements = x.numel() / dim_size;

    auto out_sizes = sizes.vec();
    out_sizes.erase(out_sizes.begin() + dim);
    auto out = torch::empty(out_sizes, x.options());

    const int block_size = 256;
    const int num_blocks = (num_elements + block_size - 1) / block_size;

    max_reduction_kernel<<<num_blocks, block_size>>>(x.data_ptr<float>(), out.data_ptr<float>(), dim_size, stride, num_elements);

    return out;
}
