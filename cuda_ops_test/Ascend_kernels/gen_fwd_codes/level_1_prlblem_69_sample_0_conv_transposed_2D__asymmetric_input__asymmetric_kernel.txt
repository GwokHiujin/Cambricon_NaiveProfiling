torch::Tensor conv_transpose2d_cuda(
    torch::Tensor input,
    torch::Tensor weight,
    std::tuple<int, int> stride,
    std::tuple<int, int> padding,
    std::tuple<int, int> output_padding,
    std::tuple<int, int> dilation,
    int groups
) {
    const int batch_size = input.size(0);
    const int in_channels = input.size(1);
    const int height_in = input.size(2);
    const int width_in = input.size(3);
    
    const int out_channels = weight.size(1) * groups;
    const int kernel_h = weight.size(2);
    const int kernel_w = weight.size(3);
    
    const auto [stride_h, stride_w] = stride;
    const auto [padding_h, padding_w] = padding;
    const auto [out_padding_h, out_padding_w] = output_padding;
    const auto [dilation_h, dilation_w] = dilation;
    
    const int height_out = (height_in - 1) * stride_h - 2 * padding_h + 
                          dilation_h * (kernel_h - 1) + out_padding_h + 1;
    const int width_out = (width_in - 1) * stride_w - 2 * padding_w + 
                         dilation_w * (kernel_w - 1) + out_padding_w + 1;
    
    auto output = torch::zeros({batch_size, out_channels, height_out, width_out}, 
                             input.options());
    
    const dim3 blocks(width_out, height_out, batch_size * out_channels);
    const dim3 threads(1);
    
    conv_transpose2d_kernel<<<blocks, threads>>>(
        input.data_ptr<float>(),
        weight.data_ptr<float>(),
        output.data_ptr<float>(),
        batch_size,
        in_channels,
        out_channels,
        height_in,
        width_in, 
        height_out,
        width_out,
        kernel_h,
        kernel_w,
        stride_h,
        stride_w,
        padding_h,
        padding_w,
        out_padding_h,
        out_padding_w,
        dilation_h,
        dilation_w,
        groups
    );
    
    return output;
}
