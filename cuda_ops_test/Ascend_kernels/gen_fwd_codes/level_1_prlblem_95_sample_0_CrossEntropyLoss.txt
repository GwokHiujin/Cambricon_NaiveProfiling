
torch::Tensor cross_entropy_cuda(torch::Tensor predictions, torch::Tensor targets) {
    // predictions: [batch_size, num_classes]
    // targets: [batch_size]

    int batch_size = predictions.size(0);
    int num_classes = predictions.size(1);

    auto losses = torch::empty({batch_size}, predictions.options());

    // Launch kernel
    const int threads = 128;
    const int blocks = (batch_size + threads - 1) / threads;

    cross_entropy_kernel<<<blocks, threads>>>(
        predictions.data_ptr<float>(),
        targets.data_ptr<int64_t>(),
        losses.data_ptr<float>(),
        batch_size,
        num_classes);

    // Wait for the kernel to finish
    cudaDeviceSynchronize();

    // Return mean loss
    return losses.mean();
}
