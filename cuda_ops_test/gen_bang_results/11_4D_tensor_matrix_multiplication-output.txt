warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __nvvm_ldg_f
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z28__device_stub__einsum_kernelPKfS0_Pfiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z13einsum_kernelPKfS0_Pfiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z13einsum_kernelPKfS0_Pfiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %0 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.thread_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_id  z
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.divui %6, %arg4 : i32
    %8 = arith.muli %7, %arg4 : i32
    %9 = arith.muli %8, %arg5 : i32
    %10 = arith.muli %9, %arg7 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  z
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.remui %13, %arg4 : i32
    %15 = arith.muli %14, %arg5 : i32
    %16 = arith.muli %15, %arg7 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = gpu.block_id  y
    %19 = arith.index_cast %18 : index to i32
    %20 = gpu.block_dim  y
    %21 = arith.index_cast %20 : index to i32
    %22 = arith.muli %19, %21 : i32
    %23 = gpu.block_id  x
    %24 = arith.index_cast %23 : index to i32
    %25 = gpu.block_dim  x
    %26 = arith.index_cast %25 : index to i32
    %27 = arith.muli %24, %26 : i32
    %28 = arith.addi %22, %4 : i32
    %29 = arith.index_cast %28 : i32 to index
    %30 = arith.muli %28, %arg7 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.addi %27, %2 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.index_cast %arg6 : i32 to index
    %35 = arith.muli %7, %arg4 : i32
    %36 = arith.muli %35, %arg5 : i32
    %37 = arith.muli %36, %arg6 : i32
    %38 = arith.muli %14, %arg5 : i32
    %39 = arith.muli %38, %arg6 : i32
    %40 = arith.addi %37, %39 : i32
    %41 = arith.muli %28, %arg6 : i32
    %42 = arith.addi %40, %41 : i32
    %43 = arith.cmpi slt, %32, %arg7 : i32
    %44 = affine.for %arg8 = 0 to %34 step 32 iter_args(%arg9 = %cst) -> (f32) {
      %48 = arith.index_cast %arg8 : index to i32
      %49 = arith.addi %48, %2 : i32
      %50 = affine.if affine_set<()[s0, s1] : (-s0 + s1 - 1 >= 0)>()[%29, %0] -> i1 {
        %54 = arith.cmpi slt, %49, %arg6 : i32
        affine.yield %54 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %50 {
        %54 = arith.addi %42, %49 : i32
        %55 = arith.index_cast %54 : i32 to index
        %56 = "polygeist.subindex"(%arg0, %55) : (memref<?xf32>, index) -> memref<?xf32>
        %57 = func.call @_Z5__ldgPKf(%56) : (memref<?xf32>) -> f32
        affine.store %57, %alloca_0[symbol(%3), symbol(%1)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%3), symbol(%1)] : memref<32x32xf32, 5>
      }
      %51 = arith.addi %48, %4 : i32
      %52 = affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 + s1 - 1 >= 0)>(%arg8)[%3, %34] -> i1 {
        affine.yield %43 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %52 {
        %54 = arith.muli %51, %arg7 : i32
        %55 = arith.addi %54, %32 : i32
        %56 = arith.index_cast %55 : i32 to index
        %57 = "polygeist.subindex"(%arg1, %56) : (memref<?xf32>, index) -> memref<?xf32>
        %58 = func.call @_Z5__ldgPKf(%57) : (memref<?xf32>) -> f32
        affine.store %58, %alloca[symbol(%3), symbol(%1)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%3), symbol(%1)] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %53 = affine.for %arg10 = 0 to 32 iter_args(%arg11 = %arg9) -> (f32) {
        %54 = affine.load %alloca_0[symbol(%3), %arg10] : memref<32x32xf32, 5>
        %55 = affine.load %alloca[%arg10, symbol(%1)] : memref<32x32xf32, 5>
        %56 = arith.mulf %54, %55 : f32
        %57 = arith.addf %arg11, %56 : f32
        affine.yield %57 : f32
      }
      nvvm.barrier0
      affine.yield %53 : f32
    }
    %45 = arith.cmpi slt, %28, %arg5 : i32
    %46 = arith.cmpi slt, %32, %arg7 : i32
    %47 = arith.andi %45, %46 : i1
    scf.if %47 {
      affine.store %44, %arg2[symbol(%11) + symbol(%17) + symbol(%31) + symbol(%33)] : memref<?xf32>
    }
    return
  }
  func.func private @_Z5__ldgPKf(%arg0: memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = call @__nvvm_ldg_f(%arg0) : (memref<?xf32>) -> f32
    return %0 : f32
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13einsum_kernelPKfS0_Pfiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %false = arith.constant false
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.thread_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  z
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.divui %7, %arg4 : i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg5 : i32
    %11 = arith.muli %10, %arg7 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.remui %7, %arg4 : i32
    %14 = arith.muli %13, %arg5 : i32
    %15 = arith.muli %14, %arg7 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = gpu.block_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = gpu.block_dim  y
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.muli %18, %20 : i32
    %22 = gpu.block_id  x
    %23 = arith.index_cast %22 : index to i32
    %24 = gpu.block_dim  x
    %25 = arith.index_cast %24 : index to i32
    %26 = arith.muli %23, %25 : i32
    %27 = arith.addi %21, %5 : i32
    %28 = arith.index_cast %27 : i32 to index
    %29 = arith.muli %27, %arg7 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.addi %26, %3 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.index_cast %arg6 : i32 to index
    %34 = arith.muli %10, %arg6 : i32
    %35 = arith.muli %14, %arg6 : i32
    %36 = arith.addi %34, %35 : i32
    %37 = arith.muli %27, %arg6 : i32
    %38 = arith.addi %36, %37 : i32
    %39 = arith.cmpi slt, %31, %arg7 : i32
    %40 = affine.for %arg8 = 0 to %33 step 32 iter_args(%arg9 = %cst) -> (f32) {
      %43 = arith.index_cast %arg8 : index to i32
      %44 = arith.addi %43, %3 : i32
      %45 = affine.if affine_set<()[s0, s1] : (s0 - s1 - 1 >= 0)>()[%1, %28] -> i1 {
        %48 = arith.cmpi slt, %44, %arg6 : i32
        affine.yield %48 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %45 {
        %48 = arith.addi %38, %44 : i32
        %49 = arith.index_cast %48 : i32 to index
        %50 = "polygeist.subindex"(%arg0, %49) : (memref<?xf32>, index) -> memref<?xf32>
        %51 = func.call @__nvvm_ldg_f(%50) : (memref<?xf32>) -> f32
        affine.store %51, %alloca_0[symbol(%4), symbol(%2)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%4), symbol(%2)] : memref<32x32xf32, 5>
      }
      %46 = arith.addi %43, %5 : i32
      affine.if affine_set<(d0)[s0, s1, s2, s3] : (-d0 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg8)[%4, %33, %32, %0] {
        %48 = arith.muli %46, %arg7 : i32
        %49 = arith.addi %48, %31 : i32
        %50 = arith.index_cast %49 : i32 to index
        %51 = "polygeist.subindex"(%arg1, %50) : (memref<?xf32>, index) -> memref<?xf32>
        %52 = func.call @__nvvm_ldg_f(%51) : (memref<?xf32>) -> f32
        affine.store %52, %alloca[symbol(%4), symbol(%2)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%4), symbol(%2)] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %47 = affine.for %arg10 = 0 to 32 iter_args(%arg11 = %arg9) -> (f32) {
        %48 = affine.load %alloca_0[symbol(%4), %arg10] : memref<32x32xf32, 5>
        %49 = affine.load %alloca[%arg10, symbol(%2)] : memref<32x32xf32, 5>
        %50 = arith.mulf %48, %49 : f32
        %51 = arith.addf %arg11, %50 : f32
        affine.yield %51 : f32
      }
      nvvm.barrier0
      affine.yield %47 : f32
    }
    %41 = arith.cmpi slt, %27, %arg5 : i32
    %42 = arith.andi %41, %39 : i1
    scf.if %42 {
      affine.store %40, %arg2[symbol(%12) + symbol(%16) + symbol(%30) + symbol(%32)] : memref<?xf32>
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13einsum_kernelPKfS0_Pfiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c-1 = arith.constant -1 : index
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %false = arith.constant false
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg7 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %2 = gpu.thread_id  x
    %3 = arith.index_cast %2 : index to i32
    %4 = gpu.thread_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  z
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.divui %7, %arg4 : i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg5 : i32
    %11 = arith.muli %10, %arg7 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.remui %7, %arg4 : i32
    %14 = arith.muli %13, %arg5 : i32
    %15 = arith.muli %14, %arg7 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = gpu.block_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = gpu.block_dim  y
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.muli %18, %20 : i32
    %22 = gpu.block_id  x
    %23 = arith.index_cast %22 : index to i32
    %24 = gpu.block_dim  x
    %25 = arith.index_cast %24 : index to i32
    %26 = arith.muli %23, %25 : i32
    %27 = arith.addi %21, %5 : i32
    %28 = arith.index_cast %27 : i32 to index
    %29 = arith.muli %27, %arg7 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.addi %26, %3 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.index_cast %arg6 : i32 to index
    %34 = arith.muli %10, %arg6 : i32
    %35 = arith.muli %14, %arg6 : i32
    %36 = arith.addi %34, %35 : i32
    %37 = arith.muli %27, %arg6 : i32
    %38 = arith.addi %36, %37 : i32
    %39 = arith.cmpi slt, %31, %arg7 : i32
    %40 = scf.for %arg8 = %c0 to %33 step %c32 iter_args(%arg9 = %cst) -> (f32) {
      %43 = arith.index_cast %arg8 : index to i32
      %44 = arith.addi %43, %3 : i32
      %45 = arith.subi %1, %28 : index
      %46 = arith.addi %45, %c-1 : index
      %47 = arith.cmpi sge, %46, %c0 : index
      %48 = scf.if %47 -> (i1) {
        %60 = arith.cmpi slt, %44, %arg6 : i32
        scf.yield %60 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %48 {
        %60 = arith.addi %38, %44 : i32
        %61 = arith.index_cast %60 : i32 to index
        %62 = "polygeist.subindex"(%arg0, %61) : (memref<?xf32>, index) -> memref<?xf32>
        %63 = func.call @__nvvm_ldg_f(%62) : (memref<?xf32>) -> f32
        memref.store %63, %alloca_0[%4, %2] : memref<32x32xf32, 5>
      } else {
        memref.store %cst, %alloca_0[%4, %2] : memref<32x32xf32, 5>
      }
      %49 = arith.addi %43, %5 : i32
      %50 = arith.muli %arg8, %c-1 : index
      %51 = arith.subi %50, %4 : index
      %52 = arith.addi %51, %33 : index
      %53 = arith.addi %52, %c-1 : index
      %54 = arith.cmpi sge, %53, %c0 : index
      %55 = arith.subi %0, %32 : index
      %56 = arith.addi %55, %c-1 : index
      %57 = arith.cmpi sge, %56, %c0 : index
      %58 = arith.andi %54, %57 : i1
      scf.if %58 {
        %60 = arith.muli %49, %arg7 : i32
        %61 = arith.addi %60, %31 : i32
        %62 = arith.index_cast %61 : i32 to index
        %63 = "polygeist.subindex"(%arg1, %62) : (memref<?xf32>, index) -> memref<?xf32>
        %64 = func.call @__nvvm_ldg_f(%63) : (memref<?xf32>) -> f32
        memref.store %64, %alloca[%4, %2] : memref<32x32xf32, 5>
      } else {
        memref.store %cst, %alloca[%4, %2] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %59 = scf.for %arg10 = %c0 to %c32 step %c1 iter_args(%arg11 = %arg9) -> (f32) {
        %60 = memref.load %alloca_0[%4, %arg10] : memref<32x32xf32, 5>
        %61 = memref.load %alloca[%arg10, %2] : memref<32x32xf32, 5>
        %62 = arith.mulf %60, %61 : f32
        %63 = arith.addf %arg11, %62 : f32
        scf.yield %63 : f32
      }
      nvvm.barrier0
      scf.yield %59 : f32
    }
    %41 = arith.cmpi slt, %27, %arg5 : i32
    %42 = arith.andi %41, %39 : i1
    scf.if %42 {
      %43 = arith.addi %12, %16 : index
      %44 = arith.addi %43, %30 : index
      %45 = arith.addi %44, %32 : index
      memref.store %40, %arg2[%45] : memref<?xf32>
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

