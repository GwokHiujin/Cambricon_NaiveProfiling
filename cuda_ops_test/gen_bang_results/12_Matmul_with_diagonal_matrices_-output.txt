warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z40__device_stub__hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()
    return
  }
  func.func private @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c4_i32 = arith.constant 4 : i32
    %c0_i8 = arith.constant 0 : i8
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
    scf.if %0 {
      %1 = gpu.thread_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.addi %2, %7 : i32
      %9 = gpu.block_dim  x
      %10 = arith.index_cast %9 : index to i32
      %11 = gpu.grid_dim  x
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %10, %12 : i32
      %14 = arith.muli %arg3, %arg4 : i64
      %15 = arith.trunci %14 : i64 to i32
      %16 = arith.divsi %15, %c4_i32 : i32
      %17 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %18 = "polygeist.pointer2memref"(%17) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %19 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %21 = arith.index_cast %16 : i32 to index
      %22 = arith.index_cast %8 : i32 to index
      %23 = arith.index_cast %13 : i32 to index
      %24 = arith.index_cast %13 : i32 to index
      %25 = arith.index_cast %8 : i32 to index
      %26 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %27 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %28 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %29 = llvm.getelementptr %28[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %30 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %31 = llvm.getelementptr %30[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %32 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %33 = llvm.getelementptr %32[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %34 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %35 = llvm.getelementptr %34[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %36 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %37 = llvm.getelementptr %36[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %38 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %39 = llvm.getelementptr %38[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      scf.for %arg6 = %22 to %21 step %23 {
        %40 = arith.subi %arg6, %22 : index
        %41 = arith.divui %40, %23 : index
        %42 = arith.muli %41, %24 : index
        %43 = arith.addi %25, %42 : index
        %44 = arith.index_cast %43 : index to i32
        %45 = arith.muli %44, %c4_i32 : i32
        %46 = arith.extsi %45 : i32 to i64
        %47 = arith.divsi %46, %arg4 : i64
        %48 = arith.trunci %47 : i64 to i32
        %49 = arith.index_cast %48 : i32 to index
        %50 = memref.load %arg0[%49] : memref<?xf32>
        %51 = "polygeist.subindex"(%18, %43) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_1, %51) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %52 = llvm.load %27 : !llvm.ptr -> f32
        %53 = arith.mulf %50, %52 : f32
        llvm.store %53, %26 : f32, !llvm.ptr
        %54 = llvm.load %31 : !llvm.ptr -> f32
        %55 = arith.mulf %50, %54 : f32
        llvm.store %55, %29 : f32, !llvm.ptr
        %56 = llvm.load %35 : !llvm.ptr -> f32
        %57 = arith.mulf %50, %56 : f32
        llvm.store %57, %33 : f32, !llvm.ptr
        %58 = llvm.load %39 : !llvm.ptr -> f32
        %59 = arith.mulf %50, %58 : f32
        llvm.store %59, %37 : f32, !llvm.ptr
        %60 = "polygeist.subindex"(%20, %43) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %61 = func.call @_ZN6float4aSERKS_(%60, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
    } else {
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.extsi %2 : i32 to i64
      %4 = arith.cmpi slt, %3, %arg3 : i64
      scf.if %4 {
        %5 = memref.load %arg0[%1] : memref<?xf32>
        %6 = gpu.block_dim  x
        %7 = arith.index_cast %6 : index to i32
        %8 = arith.extui %7 : i32 to i64
        %9 = arith.divsi %arg4, %8 : i64
        %10 = arith.muli %9, %8 : i64
        %11 = arith.trunci %10 : i64 to i32
        %12 = gpu.thread_id  x
        %13 = arith.muli %3, %arg4 : i64
        %14 = gpu.block_dim  x
        %15 = arith.index_cast %11 : i32 to index
        scf.for %arg6 = %12 to %15 step %14 {
          %24 = arith.subi %arg6, %12 : index
          %25 = arith.divui %24, %14 : index
          %26 = arith.muli %25, %14 : index
          %27 = arith.addi %12, %26 : index
          %28 = arith.index_cast %27 : index to i32
          %29 = arith.extsi %28 : i32 to i64
          %30 = arith.addi %13, %29 : i64
          %31 = arith.trunci %30 : i64 to i32
          %32 = arith.index_cast %31 : i32 to index
          %33 = memref.load %arg1[%32] : memref<?xf32>
          %34 = arith.mulf %5, %33 : f32
          memref.store %34, %arg2[%32] : memref<?xf32>
        }
        %16 = gpu.thread_id  x
        %17 = arith.index_cast %16 : index to i32
        %18 = arith.addi %11, %17 : i32
        %19 = arith.muli %3, %arg4 : i64
        %20 = gpu.block_dim  x
        %21 = arith.index_cast %arg4 : i64 to index
        %22 = arith.index_cast %18 : i32 to index
        %23 = arith.index_cast %18 : i32 to index
        scf.for %arg6 = %22 to %21 step %20 {
          %24 = arith.subi %arg6, %22 : index
          %25 = arith.divui %24, %20 : index
          %26 = arith.muli %25, %20 : index
          %27 = arith.addi %23, %26 : index
          %28 = arith.index_cast %27 : index to i32
          %29 = arith.extsi %28 : i32 to i64
          %30 = arith.addi %19, %29 : i64
          %31 = arith.trunci %30 : i64 to i32
          %32 = arith.index_cast %31 : i32 to index
          %33 = memref.load %arg1[%32] : memref<?xf32>
          %34 = arith.mulf %5, %33 : f32
          memref.store %34, %arg2[%32] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %4 = llvm.getelementptr %3[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %6 = llvm.getelementptr %5[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    llvm.store %7, %4 : f32, !llvm.ptr
    %8 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %9 = llvm.getelementptr %8[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %11 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %12 = llvm.load %11 : !llvm.ptr -> f32
    llvm.store %12, %9 : f32, !llvm.ptr
    %13 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %14 = llvm.getelementptr %13[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %16 = llvm.getelementptr %15[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %17 = llvm.load %16 : !llvm.ptr -> f32
    llvm.store %17, %14 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c4_i32 = arith.constant 4 : i32
    %c0_i8 = arith.constant 0 : i8
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
    scf.if %0 {
      %1 = gpu.thread_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.addi %2, %7 : i32
      %9 = gpu.grid_dim  x
      %10 = arith.index_cast %9 : index to i32
      %11 = arith.muli %6, %10 : i32
      %12 = arith.muli %arg3, %arg4 : i64
      %13 = arith.trunci %12 : i64 to i32
      %14 = arith.divsi %13, %c4_i32 : i32
      %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %16 = "polygeist.pointer2memref"(%15) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %17 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %18 = "polygeist.pointer2memref"(%17) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %19 = arith.index_cast %14 : i32 to index
      %20 = arith.index_cast %8 : i32 to index
      %21 = arith.index_cast %11 : i32 to index
      %22 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %23 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %25 = llvm.getelementptr %23[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.getelementptr %23[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %29 = llvm.getelementptr %23[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      scf.for %arg6 = %20 to %19 step %21 {
        %30 = arith.subi %arg6, %20 : index
        %31 = arith.divui %30, %21 : index
        %32 = arith.muli %31, %21 : index
        %33 = arith.addi %20, %32 : index
        %34 = arith.index_cast %33 : index to i32
        %35 = arith.muli %34, %c4_i32 : i32
        %36 = arith.extsi %35 : i32 to i64
        %37 = arith.divsi %36, %arg4 : i64
        %38 = arith.trunci %37 : i64 to i32
        %39 = arith.index_cast %38 : i32 to index
        %40 = memref.load %arg0[%39] : memref<?xf32>
        %41 = "polygeist.subindex"(%16, %33) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_1, %41) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %42 = llvm.load %23 : !llvm.ptr -> f32
        %43 = arith.mulf %40, %42 : f32
        llvm.store %43, %22 : f32, !llvm.ptr
        %44 = llvm.load %25 : !llvm.ptr -> f32
        %45 = arith.mulf %40, %44 : f32
        llvm.store %45, %24 : f32, !llvm.ptr
        %46 = llvm.load %27 : !llvm.ptr -> f32
        %47 = arith.mulf %40, %46 : f32
        llvm.store %47, %26 : f32, !llvm.ptr
        %48 = llvm.load %29 : !llvm.ptr -> f32
        %49 = arith.mulf %40, %48 : f32
        llvm.store %49, %28 : f32, !llvm.ptr
        %50 = "polygeist.subindex"(%18, %33) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %51 = func.call @_ZN6float4aSERKS_(%50, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
    } else {
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.extsi %2 : i32 to i64
      %4 = arith.cmpi slt, %3, %arg3 : i64
      scf.if %4 {
        %5 = memref.load %arg0[%1] : memref<?xf32>
        %6 = gpu.block_dim  x
        %7 = arith.index_cast %6 : index to i32
        %8 = arith.extui %7 : i32 to i64
        %9 = arith.divsi %arg4, %8 : i64
        %10 = arith.muli %9, %8 : i64
        %11 = arith.trunci %10 : i64 to i32
        %12 = gpu.thread_id  x
        %13 = arith.muli %3, %arg4 : i64
        %14 = arith.index_cast %11 : i32 to index
        scf.for %arg6 = %12 to %14 step %6 {
          %19 = arith.subi %arg6, %12 : index
          %20 = arith.divui %19, %6 : index
          %21 = arith.muli %20, %6 : index
          %22 = arith.addi %12, %21 : index
          %23 = arith.index_cast %22 : index to i32
          %24 = arith.extsi %23 : i32 to i64
          %25 = arith.addi %13, %24 : i64
          %26 = arith.trunci %25 : i64 to i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %arg1[%27] : memref<?xf32>
          %29 = arith.mulf %5, %28 : f32
          memref.store %29, %arg2[%27] : memref<?xf32>
        }
        %15 = arith.index_cast %12 : index to i32
        %16 = arith.addi %11, %15 : i32
        %17 = arith.index_cast %arg4 : i64 to index
        %18 = arith.index_cast %16 : i32 to index
        scf.for %arg6 = %18 to %17 step %6 {
          %19 = arith.subi %arg6, %18 : index
          %20 = arith.divui %19, %6 : index
          %21 = arith.muli %20, %6 : index
          %22 = arith.addi %18, %21 : index
          %23 = arith.index_cast %22 : index to i32
          %24 = arith.extsi %23 : i32 to i64
          %25 = arith.addi %13, %24 : i64
          %26 = arith.trunci %25 : i64 to i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %arg1[%27] : memref<?xf32>
          %29 = arith.mulf %5, %28 : f32
          memref.store %29, %arg2[%27] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c4_i32 = arith.constant 4 : i32
    %c0_i8 = arith.constant 0 : i8
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
    scf.if %0 {
      %1 = gpu.thread_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.addi %2, %7 : i32
      %9 = gpu.grid_dim  x
      %10 = arith.index_cast %9 : index to i32
      %11 = arith.muli %6, %10 : i32
      %12 = arith.muli %arg3, %arg4 : i64
      %13 = arith.trunci %12 : i64 to i32
      %14 = arith.divsi %13, %c4_i32 : i32
      %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %16 = "polygeist.pointer2memref"(%15) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %17 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %18 = "polygeist.pointer2memref"(%17) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %19 = arith.index_cast %14 : i32 to index
      %20 = arith.index_cast %8 : i32 to index
      %21 = arith.index_cast %11 : i32 to index
      %22 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %23 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %25 = llvm.getelementptr %23[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.getelementptr %23[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %29 = llvm.getelementptr %23[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      scf.for %arg6 = %20 to %19 step %21 {
        %30 = arith.subi %arg6, %20 : index
        %31 = arith.divui %30, %21 : index
        %32 = arith.muli %31, %21 : index
        %33 = arith.addi %20, %32 : index
        %34 = arith.index_cast %33 : index to i32
        %35 = arith.muli %34, %c4_i32 : i32
        %36 = arith.extsi %35 : i32 to i64
        %37 = arith.divsi %36, %arg4 : i64
        %38 = arith.trunci %37 : i64 to i32
        %39 = arith.index_cast %38 : i32 to index
        %40 = memref.load %arg0[%39] : memref<?xf32>
        %41 = "polygeist.subindex"(%16, %33) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_1, %41) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %42 = llvm.load %23 : !llvm.ptr -> f32
        %43 = arith.mulf %40, %42 : f32
        llvm.store %43, %22 : f32, !llvm.ptr
        %44 = llvm.load %25 : !llvm.ptr -> f32
        %45 = arith.mulf %40, %44 : f32
        llvm.store %45, %24 : f32, !llvm.ptr
        %46 = llvm.load %27 : !llvm.ptr -> f32
        %47 = arith.mulf %40, %46 : f32
        llvm.store %47, %26 : f32, !llvm.ptr
        %48 = llvm.load %29 : !llvm.ptr -> f32
        %49 = arith.mulf %40, %48 : f32
        llvm.store %49, %28 : f32, !llvm.ptr
        %50 = "polygeist.subindex"(%18, %33) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %51 = func.call @_ZN6float4aSERKS_(%50, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
    } else {
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.extsi %2 : i32 to i64
      %4 = arith.cmpi slt, %3, %arg3 : i64
      scf.if %4 {
        %5 = memref.load %arg0[%1] : memref<?xf32>
        %6 = gpu.block_dim  x
        %7 = arith.index_cast %6 : index to i32
        %8 = arith.extui %7 : i32 to i64
        %9 = arith.divsi %arg4, %8 : i64
        %10 = arith.muli %9, %8 : i64
        %11 = arith.trunci %10 : i64 to i32
        %12 = gpu.thread_id  x
        %13 = arith.muli %3, %arg4 : i64
        %14 = arith.index_cast %11 : i32 to index
        scf.for %arg6 = %12 to %14 step %6 {
          %19 = arith.subi %arg6, %12 : index
          %20 = arith.divui %19, %6 : index
          %21 = arith.muli %20, %6 : index
          %22 = arith.addi %12, %21 : index
          %23 = arith.index_cast %22 : index to i32
          %24 = arith.extsi %23 : i32 to i64
          %25 = arith.addi %13, %24 : i64
          %26 = arith.trunci %25 : i64 to i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %arg1[%27] : memref<?xf32>
          %29 = arith.mulf %5, %28 : f32
          memref.store %29, %arg2[%27] : memref<?xf32>
        }
        %15 = arith.index_cast %12 : index to i32
        %16 = arith.addi %11, %15 : i32
        %17 = arith.index_cast %arg4 : i64 to index
        %18 = arith.index_cast %16 : i32 to index
        scf.for %arg6 = %18 to %17 step %6 {
          %19 = arith.subi %arg6, %18 : index
          %20 = arith.divui %19, %6 : index
          %21 = arith.muli %20, %6 : index
          %22 = arith.addi %18, %21 : index
          %23 = arith.index_cast %22 : index to i32
          %24 = arith.extsi %23 : i32 to i64
          %25 = arith.addi %13, %24 : i64
          %26 = arith.trunci %25 : i64 to i32
          %27 = arith.index_cast %26 : i32 to index
          %28 = memref.load %arg1[%27] : memref<?xf32>
          %29 = arith.mulf %5, %28 : f32
          memref.store %29, %arg2[%27] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %c4_i32 = arith.constant 4 : i32
      %c0_i8 = arith.constant 0 : i8
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
      scf.if %0 {
        %1 = arith.index_cast %arg6 : index to i32
        %2 = gpu.block_id  x
        %3 = arith.index_cast %2 : index to i32
        %4 = gpu.block_dim  x
        %5 = arith.index_cast %4 : index to i32
        %6 = arith.muli %3, %5 : i32
        %7 = arith.addi %1, %6 : i32
        %8 = gpu.grid_dim  x
        %9 = arith.index_cast %8 : index to i32
        %10 = arith.muli %5, %9 : i32
        %11 = arith.muli %arg3, %arg4 : i64
        %12 = arith.trunci %11 : i64 to i32
        %13 = arith.divsi %12, %c4_i32 : i32
        %14 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
        %15 = "polygeist.pointer2memref"(%14) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %16 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
        %17 = "polygeist.pointer2memref"(%16) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %18 = arith.index_cast %13 : i32 to index
        %19 = arith.index_cast %7 : i32 to index
        %20 = arith.index_cast %10 : i32 to index
        %21 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %22 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        scf.for %arg7 = %19 to %18 step %20 {
          %29 = arith.subi %arg7, %19 : index
          %30 = arith.divui %29, %20 : index
          %31 = arith.muli %30, %20 : index
          %32 = arith.addi %19, %31 : index
          %33 = arith.index_cast %32 : index to i32
          %34 = arith.muli %33, %c4_i32 : i32
          %35 = arith.extsi %34 : i32 to i64
          %36 = arith.divsi %35, %arg4 : i64
          %37 = arith.trunci %36 : i64 to i32
          %38 = arith.index_cast %37 : i32 to index
          %39 = memref.load %arg0[%38] : memref<?xf32>
          %40 = "polygeist.subindex"(%15, %32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast_1, %40) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %41 = llvm.load %22 : !llvm.ptr -> f32
          %42 = arith.mulf %39, %41 : f32
          llvm.store %42, %21 : f32, !llvm.ptr
          %43 = llvm.load %24 : !llvm.ptr -> f32
          %44 = arith.mulf %39, %43 : f32
          llvm.store %44, %23 : f32, !llvm.ptr
          %45 = llvm.load %26 : !llvm.ptr -> f32
          %46 = arith.mulf %39, %45 : f32
          llvm.store %46, %25 : f32, !llvm.ptr
          %47 = llvm.load %28 : !llvm.ptr -> f32
          %48 = arith.mulf %39, %47 : f32
          llvm.store %48, %27 : f32, !llvm.ptr
          %49 = "polygeist.subindex"(%17, %32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %50 = func.call @_ZN6float4aSERKS_(%49, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
      } else {
        %1 = gpu.block_id  x
        %2 = arith.index_cast %1 : index to i32
        %3 = arith.extsi %2 : i32 to i64
        %4 = arith.cmpi slt, %3, %arg3 : i64
        scf.if %4 {
          %5 = memref.load %arg0[%1] : memref<?xf32>
          %6 = gpu.block_dim  x
          %7 = arith.index_cast %6 : index to i32
          %8 = arith.extui %7 : i32 to i64
          %9 = arith.divsi %arg4, %8 : i64
          %10 = arith.muli %9, %8 : i64
          %11 = arith.trunci %10 : i64 to i32
          %12 = arith.muli %3, %arg4 : i64
          %13 = arith.index_cast %11 : i32 to index
          scf.for %arg7 = %arg6 to %13 step %6 {
            %18 = arith.subi %arg7, %arg6 : index
            %19 = arith.divui %18, %6 : index
            %20 = arith.muli %19, %6 : index
            %21 = arith.addi %arg6, %20 : index
            %22 = arith.index_cast %21 : index to i32
            %23 = arith.extsi %22 : i32 to i64
            %24 = arith.addi %12, %23 : i64
            %25 = arith.trunci %24 : i64 to i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %arg1[%26] : memref<?xf32>
            %28 = arith.mulf %5, %27 : f32
            memref.store %28, %arg2[%26] : memref<?xf32>
          }
          %14 = arith.index_cast %arg6 : index to i32
          %15 = arith.addi %11, %14 : i32
          %16 = arith.index_cast %arg4 : i64 to index
          %17 = arith.index_cast %15 : i32 to index
          scf.for %arg7 = %17 to %16 step %6 {
            %18 = arith.subi %arg7, %17 : index
            %19 = arith.divui %18, %6 : index
            %20 = arith.muli %19, %6 : index
            %21 = arith.addi %17, %20 : index
            %22 = arith.index_cast %21 : index to i32
            %23 = arith.extsi %22 : i32 to i64
            %24 = arith.addi %12, %23 : i64
            %25 = arith.trunci %24 : i64 to i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %arg1[%26] : memref<?xf32>
            %28 = arith.mulf %5, %27 : f32
            memref.store %28, %arg2[%26] : memref<?xf32>
          }
        }
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %c4_i32 = arith.constant 4 : i32
      %c0_i8 = arith.constant 0 : i8
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
      scf.if %0 {
        %1 = arith.index_cast %arg6 : index to i32
        %2 = gpu.block_id  x
        %3 = arith.index_cast %2 : index to i32
        %4 = gpu.block_dim  x
        %5 = arith.index_cast %4 : index to i32
        %6 = arith.muli %3, %5 : i32
        %7 = arith.addi %1, %6 : i32
        %8 = gpu.grid_dim  x
        %9 = arith.index_cast %8 : index to i32
        %10 = arith.muli %5, %9 : i32
        %11 = arith.muli %arg3, %arg4 : i64
        %12 = arith.trunci %11 : i64 to i32
        %13 = arith.divsi %12, %c4_i32 : i32
        %14 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
        %15 = "polygeist.pointer2memref"(%14) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %16 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
        %17 = "polygeist.pointer2memref"(%16) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %18 = arith.index_cast %13 : i32 to index
        %19 = arith.index_cast %7 : i32 to index
        %20 = arith.index_cast %10 : i32 to index
        %21 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %22 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        scf.for %arg7 = %19 to %18 step %20 {
          %29 = arith.subi %arg7, %19 : index
          %30 = arith.divui %29, %20 : index
          %31 = arith.muli %30, %20 : index
          %32 = arith.addi %19, %31 : index
          %33 = arith.index_cast %32 : index to i32
          %34 = arith.muli %33, %c4_i32 : i32
          %35 = arith.extsi %34 : i32 to i64
          %36 = arith.divsi %35, %arg4 : i64
          %37 = arith.trunci %36 : i64 to i32
          %38 = arith.index_cast %37 : i32 to index
          %39 = memref.load %arg0[%38] : memref<?xf32>
          %40 = "polygeist.subindex"(%15, %32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast_1, %40) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %41 = llvm.load %22 : !llvm.ptr -> f32
          %42 = arith.mulf %39, %41 : f32
          llvm.store %42, %21 : f32, !llvm.ptr
          %43 = llvm.load %24 : !llvm.ptr -> f32
          %44 = arith.mulf %39, %43 : f32
          llvm.store %44, %23 : f32, !llvm.ptr
          %45 = llvm.load %26 : !llvm.ptr -> f32
          %46 = arith.mulf %39, %45 : f32
          llvm.store %46, %25 : f32, !llvm.ptr
          %47 = llvm.load %28 : !llvm.ptr -> f32
          %48 = arith.mulf %39, %47 : f32
          llvm.store %48, %27 : f32, !llvm.ptr
          %49 = "polygeist.subindex"(%17, %32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %50 = func.call @_ZN6float4aSERKS_(%49, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
      } else {
        %1 = gpu.block_id  x
        %2 = arith.index_cast %1 : index to i32
        %3 = arith.extsi %2 : i32 to i64
        %4 = arith.cmpi slt, %3, %arg3 : i64
        scf.if %4 {
          %5 = memref.load %arg0[%1] : memref<?xf32>
          %6 = gpu.block_dim  x
          %7 = arith.index_cast %6 : index to i32
          %8 = arith.extui %7 : i32 to i64
          %9 = arith.divsi %arg4, %8 : i64
          %10 = arith.muli %9, %8 : i64
          %11 = arith.trunci %10 : i64 to i32
          %12 = arith.muli %3, %arg4 : i64
          %13 = arith.index_cast %11 : i32 to index
          scf.for %arg7 = %arg6 to %13 step %6 {
            %18 = arith.subi %arg7, %arg6 : index
            %19 = arith.divui %18, %6 : index
            %20 = arith.muli %19, %6 : index
            %21 = arith.addi %arg6, %20 : index
            %22 = arith.index_cast %21 : index to i32
            %23 = arith.extsi %22 : i32 to i64
            %24 = arith.addi %12, %23 : i64
            %25 = arith.trunci %24 : i64 to i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %arg1[%26] : memref<?xf32>
            %28 = arith.mulf %5, %27 : f32
            memref.store %28, %arg2[%26] : memref<?xf32>
          }
          %14 = arith.index_cast %arg6 : index to i32
          %15 = arith.addi %11, %14 : i32
          %16 = arith.index_cast %arg4 : i64 to index
          %17 = arith.index_cast %15 : i32 to index
          scf.for %arg7 = %17 to %16 step %6 {
            %18 = arith.subi %arg7, %17 : index
            %19 = arith.divui %18, %6 : index
            %20 = arith.muli %19, %6 : index
            %21 = arith.addi %17, %20 : index
            %22 = arith.index_cast %21 : index to i32
            %23 = arith.extsi %22 : i32 to i64
            %24 = arith.addi %12, %23 : i64
            %25 = arith.trunci %24 : i64 to i32
            %26 = arith.index_cast %25 : i32 to index
            %27 = memref.load %arg1[%26] : memref<?xf32>
            %28 = arith.mulf %5, %27 : f32
            memref.store %28, %arg2[%26] : memref<?xf32>
          }
        }
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i8 = arith.constant 0 : i8
    %c4_i32 = arith.constant 4 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  x
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.grid_dim  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %4, %7 : i32
    %9 = arith.muli %arg3, %arg4 : i64
    %10 = arith.trunci %9 : i64 to i32
    %11 = arith.divsi %10, %c4_i32 : i32
    %12 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %13 = "polygeist.pointer2memref"(%12) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %14 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
    %15 = "polygeist.pointer2memref"(%14) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %16 = arith.index_cast %11 : i32 to index
    %17 = arith.index_cast %8 : i32 to index
    %18 = gpu.block_id  x
    %19 = arith.index_cast %18 : index to i32
    %20 = arith.extsi %19 : i32 to i64
    %21 = arith.cmpi slt, %20, %arg3 : i64
    %22 = gpu.block_dim  x
    %23 = arith.index_cast %22 : index to i32
    %24 = arith.extui %23 : i32 to i64
    %25 = arith.divsi %arg4, %24 : i64
    %26 = arith.muli %25, %24 : i64
    %27 = arith.trunci %26 : i64 to i32
    %28 = arith.muli %20, %arg4 : i64
    %29 = arith.index_cast %27 : i32 to index
    %30 = arith.index_cast %arg4 : i64 to index
    scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      scf.if %0 {
        %31 = arith.index_cast %arg6 : index to i32
        %32 = arith.addi %31, %5 : i32
        %33 = arith.index_cast %32 : i32 to index
        %34 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %35 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %36 = llvm.getelementptr %34[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %37 = llvm.getelementptr %35[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %38 = llvm.getelementptr %34[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %39 = llvm.getelementptr %35[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %40 = llvm.getelementptr %34[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %41 = llvm.getelementptr %35[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        scf.for %arg7 = %33 to %16 step %17 {
          %42 = arith.subi %arg7, %33 : index
          %43 = arith.divui %42, %17 : index
          %44 = arith.muli %43, %17 : index
          %45 = arith.addi %33, %44 : index
          %46 = arith.index_cast %45 : index to i32
          %47 = arith.muli %46, %c4_i32 : i32
          %48 = arith.extsi %47 : i32 to i64
          %49 = arith.divsi %48, %arg4 : i64
          %50 = arith.trunci %49 : i64 to i32
          %51 = arith.index_cast %50 : i32 to index
          %52 = memref.load %arg0[%51] : memref<?xf32>
          %53 = "polygeist.subindex"(%13, %45) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast_1, %53) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %54 = llvm.load %35 : !llvm.ptr -> f32
          %55 = arith.mulf %52, %54 : f32
          llvm.store %55, %34 : f32, !llvm.ptr
          %56 = llvm.load %37 : !llvm.ptr -> f32
          %57 = arith.mulf %52, %56 : f32
          llvm.store %57, %36 : f32, !llvm.ptr
          %58 = llvm.load %39 : !llvm.ptr -> f32
          %59 = arith.mulf %52, %58 : f32
          llvm.store %59, %38 : f32, !llvm.ptr
          %60 = llvm.load %41 : !llvm.ptr -> f32
          %61 = arith.mulf %52, %60 : f32
          llvm.store %61, %40 : f32, !llvm.ptr
          %62 = "polygeist.subindex"(%15, %45) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %63 = func.call @_ZN6float4aSERKS_(%62, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
      } else {
        scf.if %21 {
          %31 = memref.load %arg0[%18] : memref<?xf32>
          scf.for %arg7 = %arg6 to %29 step %22 {
            %35 = arith.subi %arg7, %arg6 : index
            %36 = arith.divui %35, %22 : index
            %37 = arith.muli %36, %22 : index
            %38 = arith.addi %arg6, %37 : index
            %39 = arith.index_cast %38 : index to i32
            %40 = arith.extsi %39 : i32 to i64
            %41 = arith.addi %28, %40 : i64
            %42 = arith.trunci %41 : i64 to i32
            %43 = arith.index_cast %42 : i32 to index
            %44 = memref.load %arg1[%43] : memref<?xf32>
            %45 = arith.mulf %31, %44 : f32
            memref.store %45, %arg2[%43] : memref<?xf32>
          }
          %32 = arith.index_cast %arg6 : index to i32
          %33 = arith.addi %27, %32 : i32
          %34 = arith.index_cast %33 : i32 to index
          scf.for %arg7 = %34 to %30 step %22 {
            %35 = arith.subi %arg7, %34 : index
            %36 = arith.divui %35, %22 : index
            %37 = arith.muli %36, %22 : index
            %38 = arith.addi %34, %37 : index
            %39 = arith.index_cast %38 : index to i32
            %40 = arith.extsi %39 : i32 to i64
            %41 = arith.addi %28, %40 : i64
            %42 = arith.trunci %41 : i64 to i32
            %43 = arith.index_cast %42 : i32 to index
            %44 = memref.load %arg1[%43] : memref<?xf32>
            %45 = arith.mulf %31, %44 : f32
            memref.store %45, %arg2[%43] : memref<?xf32>
          }
        }
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0 {
    gpu.func @_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8) {
      %c0_i8 = arith.constant 0 : i8
      %c4_i32 = arith.constant 4 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.cmpi ne, %arg5, %c0_i8 : i8
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_dim  x
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %2, %4 : i32
      %6 = gpu.grid_dim  x
      %7 = arith.index_cast %6 : index to i32
      %8 = arith.muli %4, %7 : i32
      %9 = arith.muli %arg3, %arg4 : i64
      %10 = arith.trunci %9 : i64 to i32
      %11 = arith.divsi %10, %c4_i32 : i32
      %12 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %13 = "polygeist.pointer2memref"(%12) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %14 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %15 = "polygeist.pointer2memref"(%14) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %16 = arith.index_cast %11 : i32 to index
      %17 = arith.index_cast %8 : i32 to index
      %18 = arith.extsi %2 : i32 to i64
      %19 = arith.cmpi slt, %18, %arg3 : i64
      %20 = arith.extui %4 : i32 to i64
      %21 = arith.divsi %arg4, %20 : i64
      %22 = arith.muli %21, %20 : i64
      %23 = arith.trunci %22 : i64 to i32
      %24 = arith.muli %18, %arg4 : i64
      %25 = arith.index_cast %23 : i32 to index
      %26 = arith.index_cast %arg4 : i64 to index
      scf.parallel (%arg6) = (%c0) to (%c32) step (%c1) {
        scf.if %0 {
          %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %27 = arith.index_cast %arg6 : index to i32
          %28 = arith.addi %27, %5 : i32
          %29 = arith.index_cast %28 : i32 to index
          %30 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %31 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %32 = llvm.getelementptr %30[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %33 = llvm.getelementptr %31[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %34 = llvm.getelementptr %30[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %35 = llvm.getelementptr %31[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %36 = llvm.getelementptr %30[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %37 = llvm.getelementptr %31[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          scf.for %arg7 = %29 to %16 step %17 {
            %38 = arith.subi %arg7, %29 : index
            %39 = arith.divui %38, %17 : index
            %40 = arith.muli %39, %17 : index
            %41 = arith.addi %29, %40 : index
            %42 = arith.index_cast %41 : index to i32
            %43 = arith.muli %42, %c4_i32 : i32
            %44 = arith.extsi %43 : i32 to i64
            %45 = arith.divsi %44, %arg4 : i64
            %46 = arith.trunci %45 : i64 to i32
            %47 = arith.index_cast %46 : i32 to index
            %48 = memref.load %arg0[%47] : memref<?xf32>
            %49 = "polygeist.subindex"(%13, %41) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            func.call @_ZN6float4C1ERKS_(%cast_1, %49) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %50 = llvm.load %31 : !llvm.ptr -> f32
            %51 = arith.mulf %48, %50 : f32
            llvm.store %51, %30 : f32, !llvm.ptr
            %52 = llvm.load %33 : !llvm.ptr -> f32
            %53 = arith.mulf %48, %52 : f32
            llvm.store %53, %32 : f32, !llvm.ptr
            %54 = llvm.load %35 : !llvm.ptr -> f32
            %55 = arith.mulf %48, %54 : f32
            llvm.store %55, %34 : f32, !llvm.ptr
            %56 = llvm.load %37 : !llvm.ptr -> f32
            %57 = arith.mulf %48, %56 : f32
            llvm.store %57, %36 : f32, !llvm.ptr
            %58 = "polygeist.subindex"(%15, %41) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %59 = func.call @_ZN6float4aSERKS_(%58, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          }
        } else {
          scf.if %19 {
            %27 = memref.load %arg0[%1] : memref<?xf32>
            scf.for %arg7 = %arg6 to %25 step %3 {
              %31 = arith.subi %arg7, %arg6 : index
              %32 = arith.divui %31, %3 : index
              %33 = arith.muli %32, %3 : index
              %34 = arith.addi %arg6, %33 : index
              %35 = arith.index_cast %34 : index to i32
              %36 = arith.extsi %35 : i32 to i64
              %37 = arith.addi %24, %36 : i64
              %38 = arith.trunci %37 : i64 to i32
              %39 = arith.index_cast %38 : i32 to index
              %40 = memref.load %arg1[%39] : memref<?xf32>
              %41 = arith.mulf %27, %40 : f32
              memref.store %41, %arg2[%39] : memref<?xf32>
            }
            %28 = arith.index_cast %arg6 : index to i32
            %29 = arith.addi %23, %28 : i32
            %30 = arith.index_cast %29 : i32 to index
            scf.for %arg7 = %30 to %26 step %3 {
              %31 = arith.subi %arg7, %30 : index
              %32 = arith.divui %31, %3 : index
              %33 = arith.muli %32, %3 : index
              %34 = arith.addi %30, %33 : index
              %35 = arith.index_cast %34 : index to i32
              %36 = arith.extsi %35 : i32 to i64
              %37 = arith.addi %24, %36 : i64
              %38 = arith.trunci %37 : i64 to i32
              %39 = arith.index_cast %38 : i32 to index
              %40 = memref.load %arg1[%39] : memref<?xf32>
              %41 = arith.mulf %27, %40 : f32
              memref.store %41, %arg2[%39] : memref<?xf32>
            }
          }
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = llvm.load %0 : !llvm.ptr -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      llvm.store %1, %2 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.load %3 : !llvm.ptr -> f32
      %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %4, %5 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.load %6 : !llvm.ptr -> f32
      %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %7, %8 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.load %9 : !llvm.ptr -> f32
      %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %10, %11 : f32, !llvm.ptr
      return
    }
    func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = llvm.load %1 : !llvm.ptr -> f32
      llvm.store %2, %0 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %5 = llvm.load %4 : !llvm.ptr -> f32
      llvm.store %5, %3 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %8 = llvm.load %7 : !llvm.ptr -> f32
      llvm.store %8, %6 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %11 = llvm.load %10 : !llvm.ptr -> f32
      llvm.store %11, %9 : f32, !llvm.ptr
      return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.grid_dim with npu.block_num

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8):
      %0 = "arith.constant"() <{value = 0 : i8}> : () -> i8
      %1 = "arith.constant"() <{value = 4 : i32}> : () -> i32
      %2 = "arith.constant"() <{value = 0 : index}> : () -> index
      %3 = "arith.constant"() <{value = 1 : index}> : () -> index
      %4 = "arith.constant"() <{value = 32 : index}> : () -> index
      %5 = "arith.cmpi"(%arg5, %0) <{predicate = 1 : i64}> : (i8, i8) -> i1
      %6 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %7 = "arith.index_cast"(%6) : (index) -> i32
      %8 = "arith.constant"() <{value = 32 : index}> : () -> index
      %9 = "arith.index_cast"(%8) : (index) -> i32
      %10 = "arith.muli"(%7, %9) : (i32, i32) -> i32
      %11 = "npu.block_num"() : () -> i64
      %12 = "arith.index_cast"(%11) : (i64) -> i32
      %13 = "arith.muli"(%9, %12) : (i32, i32) -> i32
      %14 = "arith.muli"(%arg3, %arg4) : (i64, i64) -> i64
      %15 = "arith.trunci"(%14) : (i64) -> i32
      %16 = "arith.divsi"(%15, %1) : (i32, i32) -> i32
      %17 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %18 = "polygeist.pointer2memref"(%17) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %19 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %21 = "arith.index_cast"(%16) : (i32) -> index
      %22 = "arith.index_cast"(%13) : (i32) -> index
      %23 = "arith.extsi"(%7) : (i32) -> i64
      %24 = "arith.cmpi"(%23, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %25 = "arith.extui"(%9) : (i32) -> i64
      %26 = "arith.divsi"(%arg4, %25) : (i64, i64) -> i64
      %27 = "arith.muli"(%26, %25) : (i64, i64) -> i64
      %28 = "arith.trunci"(%27) : (i64) -> i32
      %29 = "arith.muli"(%23, %arg4) : (i64, i64) -> i64
      %30 = "arith.index_cast"(%28) : (i32) -> index
      %31 = "arith.index_cast"(%arg4) : (i64) -> index
      %32 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %4, %32) ({
      ^bb0(%arg6: index):
        "scf.if"(%5) ({
          %33 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %34 = "memref.cast"(%33) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %35 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %36 = "memref.cast"(%35) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %37 = "arith.index_cast"(%arg6) : (index) -> i32
          %38 = "arith.addi"(%37, %10) : (i32, i32) -> i32
          %39 = "arith.index_cast"(%38) : (i32) -> index
          %40 = "polygeist.memref2pointer"(%33) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %41 = "polygeist.memref2pointer"(%35) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %42 = "llvm.getelementptr"(%40) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %43 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %44 = "llvm.getelementptr"(%40) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %45 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %46 = "llvm.getelementptr"(%40) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %47 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          "scf.for"(%39, %21, %22) ({
          ^bb0(%arg7: index):
            %48 = "arith.subi"(%arg7, %39) : (index, index) -> index
            %49 = "arith.divui"(%48, %22) : (index, index) -> index
            %50 = "arith.muli"(%49, %22) : (index, index) -> index
            %51 = "arith.addi"(%39, %50) : (index, index) -> index
            %52 = "arith.index_cast"(%51) : (index) -> i32
            %53 = "arith.muli"(%52, %1) : (i32, i32) -> i32
            %54 = "arith.extsi"(%53) : (i32) -> i64
            %55 = "arith.divsi"(%54, %arg4) : (i64, i64) -> i64
            %56 = "arith.trunci"(%55) : (i64) -> i32
            %57 = "arith.index_cast"(%56) : (i32) -> index
            %58 = "memref.load"(%arg0, %57) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            %59 = "polygeist.subindex"(%18, %51) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "func.call"(%36, %59) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %60 = "llvm.load"(%41) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %61 = "arith.mulf"(%58, %60) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%61, %40) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %62 = "llvm.load"(%43) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %63 = "arith.mulf"(%58, %62) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%63, %42) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %64 = "llvm.load"(%45) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %65 = "arith.mulf"(%58, %64) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%65, %44) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %66 = "llvm.load"(%47) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %67 = "arith.mulf"(%58, %66) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%67, %46) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %68 = "polygeist.subindex"(%20, %51) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %69 = "func.call"(%68, %34) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }, {
          "scf.if"(%24) ({
            %33 = "memref.load"(%arg0, %6) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            "scf.for"(%arg6, %30, %8) ({
            ^bb0(%arg7: index):
              %37 = "arith.subi"(%arg7, %arg6) : (index, index) -> index
              %38 = "arith.divui"(%37, %8) : (index, index) -> index
              %39 = "arith.muli"(%38, %8) : (index, index) -> index
              %40 = "arith.addi"(%arg6, %39) : (index, index) -> index
              %41 = "arith.index_cast"(%40) : (index) -> i32
              %42 = "arith.extsi"(%41) : (i32) -> i64
              %43 = "arith.addi"(%29, %42) : (i64, i64) -> i64
              %44 = "arith.trunci"(%43) : (i64) -> i32
              %45 = "arith.index_cast"(%44) : (i32) -> index
              %46 = "memref.load"(%arg1, %45) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %47 = "arith.mulf"(%33, %46) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%47, %arg2, %45) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            %34 = "arith.index_cast"(%arg6) : (index) -> i32
            %35 = "arith.addi"(%28, %34) : (i32, i32) -> i32
            %36 = "arith.index_cast"(%35) : (i32) -> index
            "scf.for"(%36, %31, %8) ({
            ^bb0(%arg7: index):
              %37 = "arith.subi"(%arg7, %36) : (index, index) -> index
              %38 = "arith.divui"(%37, %8) : (index, index) -> index
              %39 = "arith.muli"(%38, %8) : (index, index) -> index
              %40 = "arith.addi"(%36, %39) : (index, index) -> index
              %41 = "arith.index_cast"(%40) : (index) -> i32
              %42 = "arith.extsi"(%41) : (i32) -> i64
              %43 = "arith.addi"(%29, %42) : (i64, i64) -> i64
              %44 = "arith.trunci"(%43) : (i64) -> i32
              %45 = "arith.index_cast"(%44) : (i32) -> index
              %46 = "memref.load"(%arg1, %45) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %47 = "arith.mulf"(%33, %46) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%47, %arg2, %45) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }, {
          }) : (i1) -> ()
          "scf.yield"() : () -> ()
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%6 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = "arith.index_cast"(%7) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%15 = "arith.index_cast"(%14) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = "arith.trunci"(%18) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%32 = "arith.index_cast"(%23) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%34 = "arith.index_cast"(%19) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%36 = "arith.extsi"(%11) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%39 = "arith.extui"(%14) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%43 = "arith.trunci"(%42) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%46 = "arith.index_cast"(%44) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%48 = "arith.index_cast"(%arg4) : (i64) -> index
[ict-debug] MemRefAllocaToNPULowering: process op: 

%51 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%51 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%52 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8):
      %0 = "builtin.unrealized_conversion_cast"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 0 : i8}> : () -> i8
      %3 = "arith.constant"() <{value = 4 : i32}> : () -> i32
      %4 = "arith.constant"() <{value = 0 : index}> : () -> index
      %5 = "arith.constant"() <{value = 1 : index}> : () -> index
      %6 = "arith.constant"() <{value = 32 : index}> : () -> index
      %7 = "arith.cmpi"(%arg5, %2) <{predicate = 1 : i64}> : (i8, i8) -> i1
      %8 = "npu.block_id"() : () -> i64
      %9 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %10 = "emitc.cast"(%8) : (i64) -> i32
      %11 = "arith.index_cast"(%9) : (index) -> i32
      %12 = "arith.constant"() <{value = 32 : index}> : () -> index
      %13 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %14 = "arith.index_cast"(%12) : (index) -> i32
      %15 = "arith.muli"(%11, %14) : (i32, i32) -> i32
      %16 = "npu.block_num"() : () -> i64
      %17 = "emitc.cast"(%16) : (i64) -> i32
      %18 = "arith.index_cast"(%16) : (i64) -> i32
      %19 = "arith.muli"(%14, %18) : (i32, i32) -> i32
      %20 = "arith.muli"(%arg3, %arg4) : (i64, i64) -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.trunci"(%20) : (i64) -> i32
      %23 = "arith.divsi"(%22, %3) : (i32, i32) -> i32
      %24 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %25 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %26 = "llvm.bitcast"(%24) : (!llvm.ptr) -> !llvm.ptr
      %27 = "polygeist.pointer2memref"(%25) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %28 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %29 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %30 = "llvm.bitcast"(%28) : (!llvm.ptr) -> !llvm.ptr
      %31 = "polygeist.pointer2memref"(%29) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %32 = "emitc.cast"(%23) : (i32) -> index
      %33 = "arith.index_cast"(%23) : (i32) -> index
      %34 = "emitc.cast"(%19) : (i32) -> index
      %35 = "arith.index_cast"(%19) : (i32) -> index
      %36 = "emitc.cast"(%10) : (i32) -> i64
      %37 = "arith.extsi"(%11) : (i32) -> i64
      %38 = "arith.cmpi"(%37, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %39 = "emitc.cast"(%13) : (i32) -> i64
      %40 = "arith.extui"(%14) : (i32) -> i64
      %41 = "arith.divsi"(%arg4, %40) : (i64, i64) -> i64
      %42 = "arith.muli"(%41, %40) : (i64, i64) -> i64
      %43 = "emitc.cast"(%42) : (i64) -> i32
      %44 = "arith.trunci"(%42) : (i64) -> i32
      %45 = "arith.muli"(%37, %arg4) : (i64, i64) -> i64
      %46 = "emitc.cast"(%43) : (i32) -> index
      %47 = "arith.index_cast"(%44) : (i32) -> index
      %48 = "emitc.cast"(%arg4) : (i64) -> index
      %49 = "arith.index_cast"(%arg4) : (i64) -> index
      %50 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%4, %6, %50) ({
      ^bb0(%arg6: index):
        "scf.if"(%7) ({
          %51 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %52 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %53 = "memref.cast"(%52) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %54 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %55 = "memref.cast"(%54) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %56 = "arith.index_cast"(%arg6) : (index) -> i32
          %57 = "arith.addi"(%56, %15) : (i32, i32) -> i32
          %58 = "arith.index_cast"(%57) : (i32) -> index
          %59 = "polygeist.memref2pointer"(%52) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
          %60 = "polygeist.memref2pointer"(%54) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
          %61 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %62 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %63 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %64 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %65 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %66 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          "scf.for"(%58, %33, %35) ({
          ^bb0(%arg7: index):
            %67 = "arith.subi"(%arg7, %58) : (index, index) -> index
            %68 = "arith.divui"(%67, %35) : (index, index) -> index
            %69 = "arith.muli"(%68, %35) : (index, index) -> index
            %70 = "arith.addi"(%58, %69) : (index, index) -> index
            %71 = "arith.index_cast"(%70) : (index) -> i32
            %72 = "arith.muli"(%71, %3) : (i32, i32) -> i32
            %73 = "arith.extsi"(%72) : (i32) -> i64
            %74 = "arith.divsi"(%73, %arg4) : (i64, i64) -> i64
            %75 = "arith.trunci"(%74) : (i64) -> i32
            %76 = "arith.index_cast"(%75) : (i32) -> index
            %77 = "memref.load"(%arg0, %76) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            %78 = "polygeist.subindex"(%27, %70) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "func.call"(%55, %78) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %79 = "llvm.load"(%60) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %80 = "arith.mulf"(%77, %79) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%80, %59) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %81 = "llvm.load"(%62) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %82 = "arith.mulf"(%77, %81) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%82, %61) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %83 = "llvm.load"(%64) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %84 = "arith.mulf"(%77, %83) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%84, %63) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %85 = "llvm.load"(%66) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %86 = "arith.mulf"(%77, %85) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%86, %65) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %87 = "polygeist.subindex"(%31, %70) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %88 = "func.call"(%87, %53) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }, {
          "scf.if"(%38) ({
            %51 = "memref.load"(%arg0, %9) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            "scf.for"(%arg6, %47, %12) ({
            ^bb0(%arg7: index):
              %55 = "arith.subi"(%arg7, %arg6) : (index, index) -> index
              %56 = "arith.divui"(%55, %12) : (index, index) -> index
              %57 = "arith.muli"(%56, %12) : (index, index) -> index
              %58 = "arith.addi"(%arg6, %57) : (index, index) -> index
              %59 = "arith.index_cast"(%58) : (index) -> i32
              %60 = "arith.extsi"(%59) : (i32) -> i64
              %61 = "arith.addi"(%45, %60) : (i64, i64) -> i64
              %62 = "arith.trunci"(%61) : (i64) -> i32
              %63 = "arith.index_cast"(%62) : (i32) -> index
              %64 = "memref.load"(%arg1, %63) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %65 = "arith.mulf"(%51, %64) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%65, %arg2, %63) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            %52 = "arith.index_cast"(%arg6) : (index) -> i32
            %53 = "arith.addi"(%44, %52) : (i32, i32) -> i32
            %54 = "arith.index_cast"(%53) : (i32) -> index
            "scf.for"(%54, %49, %12) ({
            ^bb0(%arg7: index):
              %55 = "arith.subi"(%arg7, %54) : (index, index) -> index
              %56 = "arith.divui"(%55, %12) : (index, index) -> index
              %57 = "arith.muli"(%56, %12) : (index, index) -> index
              %58 = "arith.addi"(%54, %57) : (index, index) -> index
              %59 = "arith.index_cast"(%58) : (index) -> i32
              %60 = "arith.extsi"(%59) : (i32) -> i64
              %61 = "arith.addi"(%45, %60) : (i64, i64) -> i64
              %62 = "arith.trunci"(%61) : (i64) -> i32
              %63 = "arith.index_cast"(%62) : (i32) -> index
              %64 = "memref.load"(%arg1, %63) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %65 = "arith.mulf"(%51, %64) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%65, %arg2, %63) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }, {
          }) : (i1) -> ()
          "scf.yield"() : () -> ()
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%54 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%54 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%55 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8):
      %0 = "builtin.unrealized_conversion_cast"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 0 : i8}> : () -> i8
      %3 = "arith.constant"() <{value = 4 : i32}> : () -> i32
      %4 = "arith.constant"() <{value = 0 : index}> : () -> index
      %5 = "arith.constant"() <{value = 1 : index}> : () -> index
      %6 = "arith.constant"() <{value = 32 : index}> : () -> index
      %7 = "arith.cmpi"(%arg5, %2) <{predicate = 1 : i64}> : (i8, i8) -> i1
      %8 = "npu.block_id"() : () -> i64
      %9 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %10 = "emitc.cast"(%8) : (i64) -> i32
      %11 = "arith.index_cast"(%9) : (index) -> i32
      %12 = "arith.constant"() <{value = 32 : index}> : () -> index
      %13 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %14 = "arith.index_cast"(%12) : (index) -> i32
      %15 = "arith.muli"(%11, %14) : (i32, i32) -> i32
      %16 = "npu.block_num"() : () -> i64
      %17 = "emitc.cast"(%16) : (i64) -> i32
      %18 = "arith.index_cast"(%16) : (i64) -> i32
      %19 = "arith.muli"(%14, %18) : (i32, i32) -> i32
      %20 = "arith.muli"(%arg3, %arg4) : (i64, i64) -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.trunci"(%20) : (i64) -> i32
      %23 = "arith.divsi"(%22, %3) : (i32, i32) -> i32
      %24 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %25 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %26 = "llvm.bitcast"(%24) : (!llvm.ptr) -> !llvm.ptr
      %27 = "polygeist.pointer2memref"(%25) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %28 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %29 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %30 = "llvm.bitcast"(%28) : (!llvm.ptr) -> !llvm.ptr
      %31 = "polygeist.pointer2memref"(%29) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %32 = "emitc.cast"(%23) : (i32) -> index
      %33 = "arith.index_cast"(%23) : (i32) -> index
      %34 = "emitc.cast"(%19) : (i32) -> index
      %35 = "arith.index_cast"(%19) : (i32) -> index
      %36 = "emitc.cast"(%10) : (i32) -> i64
      %37 = "arith.extsi"(%11) : (i32) -> i64
      %38 = "arith.cmpi"(%37, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %39 = "emitc.cast"(%13) : (i32) -> i64
      %40 = "arith.extui"(%14) : (i32) -> i64
      %41 = "arith.divsi"(%arg4, %40) : (i64, i64) -> i64
      %42 = "arith.muli"(%41, %40) : (i64, i64) -> i64
      %43 = "emitc.cast"(%42) : (i64) -> i32
      %44 = "arith.trunci"(%42) : (i64) -> i32
      %45 = "arith.muli"(%37, %arg4) : (i64, i64) -> i64
      %46 = "emitc.cast"(%43) : (i32) -> index
      %47 = "arith.index_cast"(%44) : (i32) -> index
      %48 = "emitc.cast"(%arg4) : (i64) -> index
      %49 = "arith.index_cast"(%arg4) : (i64) -> index
      %50 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%4, %6, %50) ({
      ^bb0(%arg6: index):
        "scf.if"(%7) ({
          %51 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %52 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %53 = "memref.cast"(%52) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %54 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %55 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %56 = "memref.cast"(%55) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %57 = "arith.index_cast"(%arg6) : (index) -> i32
          %58 = "arith.addi"(%57, %15) : (i32, i32) -> i32
          %59 = "arith.index_cast"(%58) : (i32) -> index
          %60 = "polygeist.memref2pointer"(%52) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
          %61 = "polygeist.memref2pointer"(%55) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
          %62 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %63 = "llvm.getelementptr"(%61) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %64 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %65 = "llvm.getelementptr"(%61) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %66 = "llvm.getelementptr"(%60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %67 = "llvm.getelementptr"(%61) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          "scf.for"(%59, %33, %35) ({
          ^bb0(%arg7: index):
            %68 = "arith.subi"(%arg7, %59) : (index, index) -> index
            %69 = "arith.divui"(%68, %35) : (index, index) -> index
            %70 = "arith.muli"(%69, %35) : (index, index) -> index
            %71 = "arith.addi"(%59, %70) : (index, index) -> index
            %72 = "arith.index_cast"(%71) : (index) -> i32
            %73 = "arith.muli"(%72, %3) : (i32, i32) -> i32
            %74 = "arith.extsi"(%73) : (i32) -> i64
            %75 = "arith.divsi"(%74, %arg4) : (i64, i64) -> i64
            %76 = "arith.trunci"(%75) : (i64) -> i32
            %77 = "arith.index_cast"(%76) : (i32) -> index
            %78 = "memref.load"(%arg0, %77) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            %79 = "polygeist.subindex"(%27, %71) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "func.call"(%56, %79) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %80 = "llvm.load"(%61) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %81 = "arith.mulf"(%78, %80) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%81, %60) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %82 = "llvm.load"(%63) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %83 = "arith.mulf"(%78, %82) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%83, %62) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %84 = "llvm.load"(%65) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %85 = "arith.mulf"(%78, %84) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%85, %64) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %86 = "llvm.load"(%67) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %87 = "arith.mulf"(%78, %86) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "llvm.store"(%87, %66) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %88 = "polygeist.subindex"(%31, %71) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %89 = "func.call"(%88, %53) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }, {
          "scf.if"(%38) ({
            %51 = "memref.load"(%arg0, %9) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            "scf.for"(%arg6, %47, %12) ({
            ^bb0(%arg7: index):
              %55 = "arith.subi"(%arg7, %arg6) : (index, index) -> index
              %56 = "arith.divui"(%55, %12) : (index, index) -> index
              %57 = "arith.muli"(%56, %12) : (index, index) -> index
              %58 = "arith.addi"(%arg6, %57) : (index, index) -> index
              %59 = "arith.index_cast"(%58) : (index) -> i32
              %60 = "arith.extsi"(%59) : (i32) -> i64
              %61 = "arith.addi"(%45, %60) : (i64, i64) -> i64
              %62 = "arith.trunci"(%61) : (i64) -> i32
              %63 = "arith.index_cast"(%62) : (i32) -> index
              %64 = "memref.load"(%arg1, %63) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %65 = "arith.mulf"(%51, %64) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%65, %arg2, %63) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            %52 = "arith.index_cast"(%arg6) : (index) -> i32
            %53 = "arith.addi"(%44, %52) : (i32, i32) -> i32
            %54 = "arith.index_cast"(%53) : (i32) -> index
            "scf.for"(%54, %49, %12) ({
            ^bb0(%arg7: index):
              %55 = "arith.subi"(%arg7, %54) : (index, index) -> index
              %56 = "arith.divui"(%55, %12) : (index, index) -> index
              %57 = "arith.muli"(%56, %12) : (index, index) -> index
              %58 = "arith.addi"(%54, %57) : (index, index) -> index
              %59 = "arith.index_cast"(%58) : (index) -> i32
              %60 = "arith.extsi"(%59) : (i32) -> i64
              %61 = "arith.addi"(%45, %60) : (i64, i64) -> i64
              %62 = "arith.trunci"(%61) : (i64) -> i32
              %63 = "arith.index_cast"(%62) : (i32) -> index
              %64 = "memref.load"(%arg1, %63) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %65 = "arith.mulf"(%51, %64) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
              "memref.store"(%65, %arg2, %63) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }, {
          }) : (i1) -> ()
          "scf.yield"() : () -> ()
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] CastLikeOpToNPULowering: process op: 

%58 = "arith.index_cast"(%arg6) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%61 = "arith.index_cast"(%60) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%80 = "arith.index_cast"(%78) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%83 = "arith.extsi"(%82) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%86 = "arith.trunci"(%85) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%88 = "arith.index_cast"(%87) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%61 = "arith.index_cast"(%59) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%63 = "arith.extsi"(%62) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%66 = "arith.trunci"(%65) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%68 = "arith.index_cast"(%67) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%53 = "arith.index_cast"(%arg6) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%56 = "arith.index_cast"(%55) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%63 = "arith.index_cast"(%61) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%65 = "arith.extsi"(%64) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%68 = "arith.trunci"(%67) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%70 = "arith.index_cast"(%69) : (i32) -> index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 0 : i8}> : () -> i8
      %3 = "arith.constant"() <{value = 4 : i32}> : () -> i32
      %4 = "arith.constant"() <{value = 0 : index}> : () -> index
      %5 = "arith.constant"() <{value = 1 : index}> : () -> index
      %6 = "arith.constant"() <{value = 32 : index}> : () -> index
      %7 = "arith.cmpi"(%arg5, %2) <{predicate = 1 : i64}> : (i8, i8) -> i1
      %8 = "npu.block_id"() : () -> i64
      %9 = "builtin.unrealized_conversion_cast"(%8) : (i64) -> index
      %10 = "emitc.cast"(%8) : (i64) -> i32
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %13 = "arith.muli"(%10, %12) : (i32, i32) -> i32
      %14 = "npu.block_num"() : () -> i64
      %15 = "emitc.cast"(%14) : (i64) -> i32
      %16 = "arith.muli"(%12, %15) : (i32, i32) -> i32
      %17 = "arith.muli"(%arg3, %arg4) : (i64, i64) -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.divsi"(%18, %3) : (i32, i32) -> i32
      %20 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %21 = "llvm.bitcast"(%20) : (!llvm.ptr) -> !llvm.ptr
      %22 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %23 = "llvm.bitcast"(%22) : (!llvm.ptr) -> !llvm.ptr
      %24 = "emitc.cast"(%19) : (i32) -> index
      %25 = "emitc.cast"(%16) : (i32) -> index
      %26 = "emitc.cast"(%10) : (i32) -> i64
      %27 = "arith.cmpi"(%26, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %28 = "emitc.cast"(%12) : (i32) -> i64
      %29 = "arith.divsi"(%arg4, %28) : (i64, i64) -> i64
      %30 = "arith.muli"(%29, %28) : (i64, i64) -> i64
      %31 = "emitc.cast"(%30) : (i64) -> i32
      %32 = "arith.muli"(%26, %arg4) : (i64, i64) -> i64
      %33 = "emitc.cast"(%31) : (i32) -> index
      %34 = "emitc.cast"(%arg4) : (i64) -> index
      %35 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%4, %6, %35) ({
      ^bb0(%arg6: index):
        %36 = "builtin.unrealized_conversion_cast"(%arg6) : (index) -> i64
        "scf.if"(%7) ({
          %37 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %38 = "builtin.unrealized_conversion_cast"(%37) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %39 = "memref.cast"(%38) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %40 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %41 = "builtin.unrealized_conversion_cast"(%40) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %42 = "memref.cast"(%41) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %43 = "emitc.cast"(%36) : (i64) -> i32
          %44 = "arith.addi"(%43, %13) : (i32, i32) -> i32
          %45 = "emitc.cast"(%44) : (i32) -> index
          %46 = "llvm.bitcast"(%37) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %47 = "llvm.addrspacecast"(%46) : (!llvm.ptr<5>) -> !llvm.ptr
          %48 = "llvm.bitcast"(%40) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %49 = "llvm.addrspacecast"(%48) : (!llvm.ptr<5>) -> !llvm.ptr
          %50 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %51 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %52 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %53 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %54 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %55 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          "scf.for"(%45, %24, %25) ({
          ^bb0(%arg7: index):
            %56 = "arith.subi"(%arg7, %45) : (index, index) -> index
            %57 = "arith.divui"(%56, %25) : (index, index) -> index
            %58 = "arith.muli"(%57, %25) : (index, index) -> index
            %59 = "arith.addi"(%45, %58) : (index, index) -> index
            %60 = "builtin.unrealized_conversion_cast"(%59) : (index) -> i64
            %61 = "emitc.cast"(%60) : (i64) -> i32
            %62 = "arith.muli"(%61, %3) : (i32, i32) -> i32
            %63 = "emitc.cast"(%62) : (i32) -> i64
            %64 = "arith.divsi"(%63, %arg4) : (i64, i64) -> i64
            %65 = "emitc.cast"(%64) : (i64) -> i32
            %66 = "emitc.cast"(%65) : (i32) -> index
            %67 = "memref.load"(%arg0, %66) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            %68 = "llvm.getelementptr"(%21, %60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
            %69 = "llvm.bitcast"(%68) : (!llvm.ptr) -> !llvm.ptr
            %70 = "builtin.unrealized_conversion_cast"(%69) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "func.call"(%42, %70) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %71 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %72 = "emitc.mul"(%67, %71) : (f32, f32) -> f32
            "llvm.store"(%72, %47) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %73 = "llvm.load"(%51) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %74 = "emitc.mul"(%67, %73) : (f32, f32) -> f32
            "llvm.store"(%74, %50) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %75 = "llvm.load"(%53) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %76 = "emitc.mul"(%67, %75) : (f32, f32) -> f32
            "llvm.store"(%76, %52) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %77 = "llvm.load"(%55) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %78 = "emitc.mul"(%67, %77) : (f32, f32) -> f32
            "llvm.store"(%78, %54) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %79 = "llvm.getelementptr"(%23, %60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
            %80 = "llvm.bitcast"(%79) : (!llvm.ptr) -> !llvm.ptr
            %81 = "builtin.unrealized_conversion_cast"(%80) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %82 = "func.call"(%81, %39) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }, {
          "scf.if"(%27) ({
            %37 = "memref.load"(%arg0, %9) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            "scf.for"(%arg6, %33, %11) ({
            ^bb0(%arg7: index):
              %41 = "arith.subi"(%arg7, %arg6) : (index, index) -> index
              %42 = "arith.divui"(%41, %11) : (index, index) -> index
              %43 = "arith.muli"(%42, %11) : (index, index) -> index
              %44 = "arith.addi"(%arg6, %43) : (index, index) -> index
              %45 = "builtin.unrealized_conversion_cast"(%44) : (index) -> i64
              %46 = "emitc.cast"(%45) : (i64) -> i32
              %47 = "emitc.cast"(%46) : (i32) -> i64
              %48 = "arith.addi"(%32, %47) : (i64, i64) -> i64
              %49 = "emitc.cast"(%48) : (i64) -> i32
              %50 = "emitc.cast"(%49) : (i32) -> index
              %51 = "memref.load"(%arg1, %50) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %52 = "emitc.mul"(%37, %51) : (f32, f32) -> f32
              "memref.store"(%52, %arg2, %50) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            %38 = "emitc.cast"(%36) : (i64) -> i32
            %39 = "arith.addi"(%31, %38) : (i32, i32) -> i32
            %40 = "emitc.cast"(%39) : (i32) -> index
            "scf.for"(%40, %34, %11) ({
            ^bb0(%arg7: index):
              %41 = "arith.subi"(%arg7, %40) : (index, index) -> index
              %42 = "arith.divui"(%41, %11) : (index, index) -> index
              %43 = "arith.muli"(%42, %11) : (index, index) -> index
              %44 = "arith.addi"(%40, %43) : (index, index) -> index
              %45 = "builtin.unrealized_conversion_cast"(%44) : (index) -> i64
              %46 = "emitc.cast"(%45) : (i64) -> i32
              %47 = "emitc.cast"(%46) : (i32) -> i64
              %48 = "arith.addi"(%32, %47) : (i64, i64) -> i64
              %49 = "emitc.cast"(%48) : (i64) -> i32
              %50 = "emitc.cast"(%49) : (i32) -> index
              %51 = "memref.load"(%arg1, %50) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %52 = "emitc.mul"(%37, %51) : (f32, f32) -> f32
              "memref.store"(%52, %arg2, %50) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }, {
          }) : (i1) -> ()
          "scf.yield"() : () -> ()
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

loc("./cuda_ops/12_Matmul_with_diagonal_matrices_.cu":29:13): error: 'memref.cast' op operand type 'memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>' and result type 'memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>' are cast incompatible
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, memref<?xf32>, i64, i64, i8) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i64, %arg4: i64, %arg5: i8):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 0 : i8}> : () -> i8
      %3 = "arith.constant"() <{value = 4 : i32}> : () -> i32
      %4 = "arith.constant"() <{value = 0 : index}> : () -> index
      %5 = "arith.constant"() <{value = 1 : index}> : () -> index
      %6 = "arith.constant"() <{value = 32 : index}> : () -> index
      %7 = "arith.cmpi"(%arg5, %2) <{predicate = 1 : i64}> : (i8, i8) -> i1
      %8 = "npu.block_id"() : () -> i64
      %9 = "builtin.unrealized_conversion_cast"(%8) : (i64) -> index
      %10 = "emitc.cast"(%8) : (i64) -> i32
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %13 = "arith.muli"(%10, %12) : (i32, i32) -> i32
      %14 = "npu.block_num"() : () -> i64
      %15 = "emitc.cast"(%14) : (i64) -> i32
      %16 = "arith.muli"(%12, %15) : (i32, i32) -> i32
      %17 = "arith.muli"(%arg3, %arg4) : (i64, i64) -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.divsi"(%18, %3) : (i32, i32) -> i32
      %20 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %21 = "llvm.bitcast"(%20) : (!llvm.ptr) -> !llvm.ptr
      %22 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %23 = "llvm.bitcast"(%22) : (!llvm.ptr) -> !llvm.ptr
      %24 = "emitc.cast"(%19) : (i32) -> index
      %25 = "emitc.cast"(%16) : (i32) -> index
      %26 = "emitc.cast"(%10) : (i32) -> i64
      %27 = "arith.cmpi"(%26, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %28 = "emitc.cast"(%12) : (i32) -> i64
      %29 = "arith.divsi"(%arg4, %28) : (i64, i64) -> i64
      %30 = "arith.muli"(%29, %28) : (i64, i64) -> i64
      %31 = "emitc.cast"(%30) : (i64) -> i32
      %32 = "arith.muli"(%26, %arg4) : (i64, i64) -> i64
      %33 = "emitc.cast"(%31) : (i32) -> index
      %34 = "emitc.cast"(%arg4) : (i64) -> index
      %35 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%4, %6, %35) ({
      ^bb0(%arg6: index):
        %36 = "builtin.unrealized_conversion_cast"(%arg6) : (index) -> i64
        "scf.if"(%7) ({
          %37 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %38 = "builtin.unrealized_conversion_cast"(%37) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %39 = "memref.cast"(%38) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %40 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
          %41 = "builtin.unrealized_conversion_cast"(%40) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
          %42 = "memref.cast"(%41) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %43 = "emitc.cast"(%36) : (i64) -> i32
          %44 = "arith.addi"(%43, %13) : (i32, i32) -> i32
          %45 = "emitc.cast"(%44) : (i32) -> index
          %46 = "llvm.bitcast"(%37) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %47 = "llvm.addrspacecast"(%46) : (!llvm.ptr<5>) -> !llvm.ptr
          %48 = "llvm.bitcast"(%40) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %49 = "llvm.addrspacecast"(%48) : (!llvm.ptr<5>) -> !llvm.ptr
          %50 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %51 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %52 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %53 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %54 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %55 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          "scf.for"(%45, %24, %25) ({
          ^bb0(%arg7: index):
            %56 = "arith.subi"(%arg7, %45) : (index, index) -> index
            %57 = "arith.divui"(%56, %25) : (index, index) -> index
            %58 = "arith.muli"(%57, %25) : (index, index) -> index
            %59 = "arith.addi"(%45, %58) : (index, index) -> index
            %60 = "builtin.unrealized_conversion_cast"(%59) : (index) -> i64
            %61 = "emitc.cast"(%60) : (i64) -> i32
            %62 = "arith.muli"(%61, %3) : (i32, i32) -> i32
            %63 = "emitc.cast"(%62) : (i32) -> i64
            %64 = "arith.divsi"(%63, %arg4) : (i64, i64) -> i64
            %65 = "emitc.cast"(%64) : (i64) -> i32
            %66 = "emitc.cast"(%65) : (i32) -> index
            %67 = "memref.load"(%arg0, %66) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            %68 = "llvm.getelementptr"(%21, %60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
            %69 = "llvm.bitcast"(%68) : (!llvm.ptr) -> !llvm.ptr
            %70 = "builtin.unrealized_conversion_cast"(%69) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "func.call"(%42, %70) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
            %71 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %72 = "emitc.mul"(%67, %71) : (f32, f32) -> f32
            "llvm.store"(%72, %47) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %73 = "llvm.load"(%51) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %74 = "emitc.mul"(%67, %73) : (f32, f32) -> f32
            "llvm.store"(%74, %50) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %75 = "llvm.load"(%53) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %76 = "emitc.mul"(%67, %75) : (f32, f32) -> f32
            "llvm.store"(%76, %52) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %77 = "llvm.load"(%55) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
            %78 = "emitc.mul"(%67, %77) : (f32, f32) -> f32
            "llvm.store"(%78, %54) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
            %79 = "llvm.getelementptr"(%23, %60) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
            %80 = "llvm.bitcast"(%79) : (!llvm.ptr) -> !llvm.ptr
            %81 = "builtin.unrealized_conversion_cast"(%80) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            %82 = "func.call"(%81, %39) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }, {
          "scf.if"(%27) ({
            %37 = "memref.load"(%arg0, %9) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
            "scf.for"(%arg6, %33, %11) ({
            ^bb0(%arg7: index):
              %41 = "arith.subi"(%arg7, %arg6) : (index, index) -> index
              %42 = "arith.divui"(%41, %11) : (index, index) -> index
              %43 = "arith.muli"(%42, %11) : (index, index) -> index
              %44 = "arith.addi"(%arg6, %43) : (index, index) -> index
              %45 = "builtin.unrealized_conversion_cast"(%44) : (index) -> i64
              %46 = "emitc.cast"(%45) : (i64) -> i32
              %47 = "emitc.cast"(%46) : (i32) -> i64
              %48 = "arith.addi"(%32, %47) : (i64, i64) -> i64
              %49 = "emitc.cast"(%48) : (i64) -> i32
              %50 = "emitc.cast"(%49) : (i32) -> index
              %51 = "memref.load"(%arg1, %50) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %52 = "emitc.mul"(%37, %51) : (f32, f32) -> f32
              "memref.store"(%52, %arg2, %50) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            %38 = "emitc.cast"(%36) : (i64) -> i32
            %39 = "arith.addi"(%31, %38) : (i32, i32) -> i32
            %40 = "emitc.cast"(%39) : (i32) -> index
            "scf.for"(%40, %34, %11) ({
            ^bb0(%arg7: index):
              %41 = "arith.subi"(%arg7, %40) : (index, index) -> index
              %42 = "arith.divui"(%41, %11) : (index, index) -> index
              %43 = "arith.muli"(%42, %11) : (index, index) -> index
              %44 = "arith.addi"(%40, %43) : (index, index) -> index
              %45 = "builtin.unrealized_conversion_cast"(%44) : (index) -> i64
              %46 = "emitc.cast"(%45) : (i64) -> i32
              %47 = "emitc.cast"(%46) : (i32) -> i64
              %48 = "arith.addi"(%32, %47) : (i64, i64) -> i64
              %49 = "emitc.cast"(%48) : (i64) -> i32
              %50 = "emitc.cast"(%49) : (i32) -> index
              %51 = "memref.load"(%arg1, %50) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
              %52 = "emitc.mul"(%37, %51) : (f32, f32) -> f32
              "memref.store"(%52, %arg2, %50) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }, {
          }) : (i1) -> ()
          "scf.yield"() : () -> ()
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z25hybrid_diag_matmul_kernelPKfS0_Pfllb_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
