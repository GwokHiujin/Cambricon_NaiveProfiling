warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z62__device_stub__coalesced_memory_access_upper_triangular_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z47coalesced_memory_access_upper_triangular_kernelPKfS0_Pfi(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32) -> ()
    return
  }
  func.func private @_Z47coalesced_memory_access_upper_triangular_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c32_i32 = arith.constant 32 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<32x33xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x33xf32, 5>
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.divsi %8, %c32_i32 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %8, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.index_cast %21 : i32 to index
    %24 = arith.cmpi slt, %8, %arg3 : i32
    %25 = arith.cmpi slt, %21, %arg3 : i32
    %26 = arith.cmpi sle, %8, %21 : i32
    %27 = arith.andi %25, %26 : i1
    %28 = arith.andi %24, %27 : i1
    scf.if %28 {
      %29 = arith.muli %10, %c32_i32 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.index_cast %29 : i32 to index
      %32 = gpu.thread_id  x
      %33 = arith.index_cast %32 : index to i32
      %34 = gpu.thread_id  y
      %35 = arith.index_cast %34 : index to i32
      %36 = gpu.thread_id  y
      %37 = gpu.thread_id  x
      %38 = gpu.thread_id  y
      %39 = gpu.thread_id  x
      %40 = arith.index_cast %39 : index to i32
      %41 = arith.muli %8, %arg3 : i32
      %42 = gpu.thread_id  y
      %43 = gpu.thread_id  x
      %44 = gpu.thread_id  x
      %45 = gpu.thread_id  x
      %46 = affine.for %arg4 = affine_map<()[s0] -> (s0 * 32)>()[%11] to affine_map<()[s0] -> (s0 + 1)>()[%22] step 32 iter_args(%arg5 = %cst) -> (f32) {
        %48 = arith.subi %arg4, %30 : index
        %49 = arith.addi %31, %48 : index
        %50 = arith.index_cast %49 : index to i32
        %51 = arith.addi %50, %33 : i32
        %52 = arith.cmpi ult, %51, %arg3 : i32
        %53 = arith.andi %24, %52 : i1
        %54 = scf.if %53 -> (i1) {
          %59 = arith.cmpi ule, %8, %51 : i32
          scf.yield %59 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %54 {
          %59 = arith.addi %41, %50 : i32
          %60 = arith.addi %59, %40 : i32
          %61 = arith.index_cast %60 : i32 to index
          %62 = memref.load %arg0[%61] : memref<?xf32>
          memref.store %62, %alloca_0[%38, %39] : memref<32x33xf32, 5>
        } else {
          memref.store %cst, %alloca_0[%42, %43] : memref<32x33xf32, 5>
        }
        %55 = arith.addi %50, %35 : i32
        %56 = arith.cmpi ult, %55, %arg3 : i32
        %57 = arith.andi %56, %25 : i1
        scf.if %57 {
          %59 = arith.muli %55, %arg3 : i32
          %60 = arith.addi %59, %21 : i32
          %61 = arith.index_cast %60 : i32 to index
          %62 = memref.load %arg1[%61] : memref<?xf32>
          memref.store %62, %alloca[%34, %44] : memref<32x33xf32, 5>
        } else {
          memref.store %cst, %alloca[%34, %45] : memref<32x33xf32, 5>
        }
        nvvm.barrier0
        %58 = affine.for %arg6 = 0 to 32 iter_args(%arg7 = %arg5) -> (f32) {
          %59 = affine.if affine_set<(d0, d1)[s0, s1, s2] : (d0 + d1 - s0 >= 0, -d0 - d1 + s1 >= 0, -d0 - d1 + s2 - 1 >= 0)>(%arg6, %arg4)[%9, %22, %0] -> f32 {
            %60 = memref.load %alloca_0[%36, %arg6] : memref<32x33xf32, 5>
            %61 = memref.load %alloca[%arg6, %37] : memref<32x33xf32, 5>
            %62 = arith.mulf %60, %61 : f32
            %63 = arith.addf %arg7, %62 : f32
            affine.yield %63 : f32
          } else {
            affine.yield %arg7 : f32
          }
          affine.yield %59 : f32
        }
        nvvm.barrier0
        affine.yield %58 : f32
      }
      %47 = arith.andi %24, %25 : i1
      scf.if %47 {
        affine.store %46, %arg2[symbol(%13) + symbol(%23)] : memref<?xf32>
      }
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z47coalesced_memory_access_upper_triangular_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32_i32 = arith.constant 32 : i32
    %false = arith.constant false
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<32x33xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x33xf32, 5>
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.divsi %8, %c32_i32 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %8, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.cmpi slt, %8, %arg3 : i32
    %24 = arith.cmpi slt, %21, %arg3 : i32
    %25 = arith.cmpi sle, %8, %21 : i32
    %26 = arith.andi %24, %25 : i1
    %27 = arith.andi %23, %26 : i1
    scf.if %27 {
      %28 = affine.for %arg4 = affine_map<()[s0] -> (s0 * 32)>()[%11] to affine_map<()[s0] -> (s0 + 1)>()[%22] step 32 iter_args(%arg5 = %cst) -> (f32) {
        %30 = arith.index_cast %arg4 : index to i32
        %31 = arith.addi %30, %20 : i32
        %32 = arith.cmpi ult, %31, %arg3 : i32
        %33 = arith.andi %23, %32 : i1
        %34 = scf.if %33 -> (i1) {
          %39 = arith.cmpi ule, %8, %31 : i32
          scf.yield %39 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %34 {
          %39 = affine.load %arg0[%arg4 + symbol(%13) + symbol(%19)] : memref<?xf32>
          affine.store %39, %alloca_0[symbol(%6), symbol(%19)] : memref<32x33xf32, 5>
        } else {
          affine.store %cst, %alloca_0[symbol(%6), symbol(%19)] : memref<32x33xf32, 5>
        }
        %35 = arith.addi %30, %7 : i32
        %36 = arith.cmpi ult, %35, %arg3 : i32
        %37 = arith.andi %36, %24 : i1
        scf.if %37 {
          %39 = affine.load %arg1[(%arg4 + symbol(%6)) * symbol(%0) + symbol(%22)] : memref<?xf32>
          affine.store %39, %alloca[symbol(%6), symbol(%19)] : memref<32x33xf32, 5>
        } else {
          affine.store %cst, %alloca[symbol(%6), symbol(%19)] : memref<32x33xf32, 5>
        }
        nvvm.barrier0
        %38 = affine.for %arg6 = 0 to 32 iter_args(%arg7 = %arg5) -> (f32) {
          %39 = affine.if affine_set<(d0, d1)[s0, s1, s2] : (-d0 - d1 + s0 - 1 >= 0, d0 + d1 - s1 >= 0, -d0 - d1 + s2 >= 0)>(%arg6, %arg4)[%0, %9, %22] -> f32 {
            %40 = affine.load %alloca_0[symbol(%6), %arg6] : memref<32x33xf32, 5>
            %41 = affine.load %alloca[%arg6, symbol(%19)] : memref<32x33xf32, 5>
            %42 = arith.mulf %40, %41 : f32
            %43 = arith.addf %arg7, %42 : f32
            affine.yield %43 : f32
          } else {
            affine.yield %arg7 : f32
          }
          affine.yield %39 : f32
        }
        nvvm.barrier0
        affine.yield %38 : f32
      }
      %29 = arith.andi %23, %24 : i1
      scf.if %29 {
        affine.store %28, %arg2[symbol(%13) + symbol(%22)] : memref<?xf32>
      }
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z47coalesced_memory_access_upper_triangular_kernelPKfS0_Pfi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %c32_i32 = arith.constant 32 : i32
    %false = arith.constant false
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg3 : i32 to index
    %alloca = memref.alloca() : memref<32x33xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x33xf32, 5>
    %1 = gpu.block_id  y
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.divsi %8, %c32_i32 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %8, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  x
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.cmpi slt, %8, %arg3 : i32
    %24 = arith.cmpi slt, %21, %arg3 : i32
    %25 = arith.cmpi sle, %8, %21 : i32
    %26 = arith.andi %24, %25 : i1
    %27 = arith.andi %23, %26 : i1
    scf.if %27 {
      %28 = arith.muli %11, %c32 : index
      %29 = arith.addi %22, %c1 : index
      %30 = scf.for %arg4 = %28 to %29 step %c32 iter_args(%arg5 = %cst) -> (f32) {
        %32 = arith.index_cast %arg4 : index to i32
        %33 = arith.addi %32, %20 : i32
        %34 = arith.cmpi ult, %33, %arg3 : i32
        %35 = arith.andi %23, %34 : i1
        %36 = scf.if %35 -> (i1) {
          %41 = arith.cmpi ule, %8, %33 : i32
          scf.yield %41 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %36 {
          %41 = arith.addi %arg4, %13 : index
          %42 = arith.addi %41, %19 : index
          %43 = memref.load %arg0[%42] : memref<?xf32>
          memref.store %43, %alloca_0[%6, %19] : memref<32x33xf32, 5>
        } else {
          memref.store %cst, %alloca_0[%6, %19] : memref<32x33xf32, 5>
        }
        %37 = arith.addi %32, %7 : i32
        %38 = arith.cmpi ult, %37, %arg3 : i32
        %39 = arith.andi %38, %24 : i1
        scf.if %39 {
          %41 = arith.addi %arg4, %6 : index
          %42 = arith.muli %41, %0 : index
          %43 = arith.addi %42, %22 : index
          %44 = memref.load %arg1[%43] : memref<?xf32>
          memref.store %44, %alloca[%6, %19] : memref<32x33xf32, 5>
        } else {
          memref.store %cst, %alloca[%6, %19] : memref<32x33xf32, 5>
        }
        nvvm.barrier0
        %40 = scf.for %arg6 = %c0 to %c32 step %c1 iter_args(%arg7 = %arg5) -> (f32) {
          %41 = arith.muli %arg6, %c-1 : index
          %42 = arith.subi %41, %arg4 : index
          %43 = arith.addi %42, %0 : index
          %44 = arith.addi %43, %c-1 : index
          %45 = arith.cmpi sge, %44, %c0 : index
          %46 = arith.addi %arg6, %arg4 : index
          %47 = arith.subi %46, %9 : index
          %48 = arith.cmpi sge, %47, %c0 : index
          %49 = arith.andi %45, %48 : i1
          %50 = arith.addi %42, %22 : index
          %51 = arith.cmpi sge, %50, %c0 : index
          %52 = arith.andi %49, %51 : i1
          %53 = scf.if %52 -> (f32) {
            %54 = memref.load %alloca_0[%6, %arg6] : memref<32x33xf32, 5>
            %55 = memref.load %alloca[%arg6, %19] : memref<32x33xf32, 5>
            %56 = arith.mulf %54, %55 : f32
            %57 = arith.addf %arg7, %56 : f32
            scf.yield %57 : f32
          } else {
            scf.yield %arg7 : f32
          }
          scf.yield %53 : f32
        }
        nvvm.barrier0
        scf.yield %40 : f32
      }
      %31 = arith.andi %23, %24 : i1
      scf.if %31 {
        %32 = arith.addi %13, %22 : index
        memref.store %30, %arg2[%32] : memref<?xf32>
      }
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

