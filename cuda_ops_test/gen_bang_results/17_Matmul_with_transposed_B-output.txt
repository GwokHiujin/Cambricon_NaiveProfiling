warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __nvvm_ldg_f
warning: we failed to emit call to builtin function __nvvm_shfl_sync_down_f32
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z46__device_stub__warp_matmul_optimized_v2_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z31warp_matmul_optimized_v2_kernelPKfS0_Pfiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z31warp_matmul_optimized_v2_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c0_i32 = arith.constant 0 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = gpu.thread_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  y
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = arith.addi %10, %5 : i32
    %12 = arith.muli %11, %arg4 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.cmpi slt, %11, %arg3 : i32
    %17 = arith.cmpi slt, %15, %arg4 : i32
    %18 = arith.andi %16, %17 : i1
    scf.if %18 {
      %19 = arith.muli %11, %arg5 : i32
      %20 = arith.muli %15, %arg5 : i32
      %21 = affine.for %arg6 = %1 to %0 step 32 iter_args(%arg7 = %cst) -> (f32) {
        %23 = arith.index_cast %arg6 : index to i32
        %24 = arith.addi %19, %23 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = "polygeist.subindex"(%arg0, %25) : (memref<?xf32>, index) -> memref<?xf32>
        %27 = func.call @_Z5__ldgPKf(%26) : (memref<?xf32>) -> f32
        %28 = arith.addi %20, %23 : i32
        %29 = arith.index_cast %28 : i32 to index
        %30 = "polygeist.subindex"(%arg1, %29) : (memref<?xf32>, index) -> memref<?xf32>
        %31 = func.call @_Z5__ldgPKf(%30) : (memref<?xf32>) -> f32
        %32 = arith.mulf %27, %31 : f32
        %33 = arith.addf %arg7, %32 : f32
        affine.yield %33 : f32
      }
      %22:2 = scf.while (%arg6 = %c16_i32, %arg7 = %21) : (i32, f32) -> (f32, i32) {
        %23 = arith.cmpi sgt, %arg6, %c0_i32 : i32
        scf.condition(%23) %arg7, %arg6 : f32, i32
      } do {
      ^bb0(%arg6: f32, %arg7: i32):
        %23 = func.call @_Z16__shfl_down_syncjfji(%c-1_i32, %arg6, %arg7, %c32_i32) : (i32, f32, i32, i32) -> f32
        %24 = arith.addf %arg6, %23 : f32
        %25 = arith.divsi %arg7, %c2_i32 : i32
        scf.yield %25, %24 : i32, f32
      }
      scf.if %3 {
        affine.store %22#0, %arg2[symbol(%13) + symbol(%14)] : memref<?xf32>
      }
    }
    return
  }
  func.func private @_Z5__ldgPKf(%arg0: memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = call @__nvvm_ldg_f(%arg0) : (memref<?xf32>) -> f32
    return %0 : f32
  }
  func.func private @_Z16__shfl_down_syncjfji(%arg0: i32, %arg1: f32, %arg2: i32, %arg3: i32) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = arith.subi %c32_i32, %arg3 : i32
    %1 = arith.shli %0, %c8_i32 : i32
    %2 = arith.ori %1, %c31_i32 : i32
    %3 = call @__nvvm_shfl_sync_down_f32(%arg0, %arg1, %arg2, %2) : (i32, f32, i32, i32) -> f32
    return %3 : f32
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z31warp_matmul_optimized_v2_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %c0_i32 = arith.constant 0 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = gpu.thread_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  y
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = arith.addi %10, %5 : i32
    %12 = arith.muli %11, %arg4 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.cmpi slt, %11, %arg3 : i32
    %17 = arith.cmpi slt, %15, %arg4 : i32
    %18 = arith.andi %16, %17 : i1
    scf.if %18 {
      %19 = arith.muli %11, %arg5 : i32
      %20 = arith.muli %15, %arg5 : i32
      %21 = affine.for %arg6 = %1 to %0 step 32 iter_args(%arg7 = %cst) -> (f32) {
        %23 = arith.index_cast %arg6 : index to i32
        %24 = arith.addi %19, %23 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = "polygeist.subindex"(%arg0, %25) : (memref<?xf32>, index) -> memref<?xf32>
        %27 = func.call @__nvvm_ldg_f(%26) : (memref<?xf32>) -> f32
        %28 = arith.addi %20, %23 : i32
        %29 = arith.index_cast %28 : i32 to index
        %30 = "polygeist.subindex"(%arg1, %29) : (memref<?xf32>, index) -> memref<?xf32>
        %31 = func.call @__nvvm_ldg_f(%30) : (memref<?xf32>) -> f32
        %32 = arith.mulf %27, %31 : f32
        %33 = arith.addf %arg7, %32 : f32
        affine.yield %33 : f32
      }
      %22:2 = scf.while (%arg6 = %c16_i32, %arg7 = %21) : (i32, f32) -> (f32, i32) {
        %23 = arith.cmpi sgt, %arg6, %c0_i32 : i32
        scf.condition(%23) %arg7, %arg6 : f32, i32
      } do {
      ^bb0(%arg6: f32, %arg7: i32):
        %23 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
        %24 = arith.addf %arg6, %23 : f32
        %25 = arith.divsi %arg7, %c2_i32 : i32
        scf.yield %25, %24 : i32, f32
      }
      scf.if %3 {
        affine.store %22#0, %arg2[symbol(%13) + symbol(%14)] : memref<?xf32>
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z31warp_matmul_optimized_v2_kernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c31_i32 = arith.constant 31 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c16_i32 = arith.constant 16 : i32
    %c0_i32 = arith.constant 0 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c2_i32 = arith.constant 2 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.cmpi eq, %2, %c0_i32 : i32
    %4 = gpu.thread_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  y
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = arith.addi %10, %5 : i32
    %12 = arith.muli %11, %arg4 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  x
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.cmpi slt, %11, %arg3 : i32
    %17 = arith.cmpi slt, %15, %arg4 : i32
    %18 = arith.andi %16, %17 : i1
    scf.if %18 {
      %19 = arith.muli %11, %arg5 : i32
      %20 = arith.muli %15, %arg5 : i32
      %21 = scf.for %arg6 = %1 to %0 step %c32 iter_args(%arg7 = %cst) -> (f32) {
        %23 = arith.index_cast %arg6 : index to i32
        %24 = arith.addi %19, %23 : i32
        %25 = arith.index_cast %24 : i32 to index
        %26 = "polygeist.subindex"(%arg0, %25) : (memref<?xf32>, index) -> memref<?xf32>
        %27 = func.call @__nvvm_ldg_f(%26) : (memref<?xf32>) -> f32
        %28 = arith.addi %20, %23 : i32
        %29 = arith.index_cast %28 : i32 to index
        %30 = "polygeist.subindex"(%arg1, %29) : (memref<?xf32>, index) -> memref<?xf32>
        %31 = func.call @__nvvm_ldg_f(%30) : (memref<?xf32>) -> f32
        %32 = arith.mulf %27, %31 : f32
        %33 = arith.addf %arg7, %32 : f32
        scf.yield %33 : f32
      }
      %22:2 = scf.while (%arg6 = %c16_i32, %arg7 = %21) : (i32, f32) -> (f32, i32) {
        %23 = arith.cmpi sgt, %arg6, %c0_i32 : i32
        scf.condition(%23) %arg7, %arg6 : f32, i32
      } do {
      ^bb0(%arg6: f32, %arg7: i32):
        %23 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
        %24 = arith.addf %arg6, %23 : f32
        %25 = arith.divsi %arg7, %c2_i32 : i32
        scf.yield %25, %24 : i32, f32
      }
      scf.if %3 {
        %23 = arith.addi %13, %14 : index
        memref.store %22#0, %arg2[%23] : memref<?xf32>
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_shfl_sync_down_f32. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

