warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z39__device_stub__leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, f32, i32) -> ()
    return
  }
  func.func private @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = gpu.thread_id  x
    %10 = arith.cmpi slt, %7, %arg3 : i32
    scf.if %10 {
      %12 = affine.load %arg0[symbol(%8)] : memref<?xf32>
      affine.store %12, %alloca[symbol(%9)] : memref<1xf32, 5>
    } else {
      affine.store %cst, %alloca[symbol(%9)] : memref<1xf32, 5>
    }
    nvvm.barrier0
    %11 = arith.cmpi slt, %7, %arg3 : i32
    scf.if %11 {
      %12 = affine.load %alloca[symbol(%9)] : memref<1xf32, 5>
      %13 = arith.cmpf ogt, %12, %cst : f32
      %14 = scf.if %13 -> (f32) {
        scf.yield %12 : f32
      } else {
        %15 = arith.mulf %12, %arg2 : f32
        scf.yield %15 : f32
      }
      affine.store %14, %arg1[symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.cmpi slt, %7, %arg3 : i32
    scf.if %9 {
      %10 = affine.load %arg0[symbol(%8)] : memref<?xf32>
      affine.store %10, %alloca[symbol(%5)] : memref<1xf32, 5>
    } else {
      affine.store %cst, %alloca[symbol(%5)] : memref<1xf32, 5>
    }
    nvvm.barrier0
    scf.if %9 {
      %10 = affine.load %alloca[symbol(%5)] : memref<1xf32, 5>
      %11 = arith.cmpf ogt, %10, %cst : f32
      %12 = scf.if %11 -> (f32) {
        scf.yield %10 : f32
      } else {
        %13 = arith.mulf %10, %arg2 : f32
        scf.yield %13 : f32
      }
      affine.store %12, %arg1[symbol(%8)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %alloca = memref.alloca() : memref<1xf32, 5>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.cmpi slt, %7, %arg3 : i32
    scf.if %9 {
      %10 = memref.load %arg0[%8] : memref<?xf32>
      memref.store %10, %alloca[%5] : memref<1xf32, 5>
    } else {
      memref.store %cst, %alloca[%5] : memref<1xf32, 5>
    }
    nvvm.barrier0
    scf.if %9 {
      %10 = memref.load %alloca[%5] : memref<1xf32, 5>
      %11 = arith.cmpf ogt, %10, %cst : f32
      %12 = scf.if %11 -> (f32) {
        scf.yield %10 : f32
      } else {
        %13 = arith.mulf %10, %arg2 : f32
        scf.yield %13 : f32
      }
      memref.store %12, %arg1[%8] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.cmpi slt, %6, %arg3 : i32
      scf.if %8 {
        %9 = memref.load %arg0[%7] : memref<?xf32>
        memref.store %9, %alloca[%arg4] : memref<1xf32, 5>
      } else {
        memref.store %cst, %alloca[%arg4] : memref<1xf32, 5>
      }
      "polygeist.barrier"(%arg4) : (index) -> ()
      scf.if %8 {
        %9 = memref.load %alloca[%arg4] : memref<1xf32, 5>
        %10 = arith.cmpf ogt, %9, %cst : f32
        %11 = scf.if %10 -> (f32) {
          scf.yield %9 : f32
        } else {
          %12 = arith.mulf %9, %arg2 : f32
          scf.yield %12 : f32
        }
        memref.store %11, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<1xf32, 5>
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 0.000000e+00 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.cmpi slt, %6, %arg3 : i32
      scf.if %8 {
        %9 = memref.load %arg0[%7] : memref<?xf32>
        memref.store %9, %alloca[%arg4] : memref<1xf32, 5>
      } else {
        memref.store %cst, %alloca[%arg4] : memref<1xf32, 5>
      }
      "polygeist.barrier"(%arg4) : (index) -> ()
      scf.if %8 {
        %9 = memref.load %alloca[%arg4] : memref<1xf32, 5>
        %10 = arith.cmpf ogt, %9, %cst : f32
        %11 = scf.if %10 -> (f32) {
          scf.yield %9 : f32
        } else {
          %12 = arith.mulf %9, %arg2 : f32
          scf.yield %12 : f32
        }
        memref.store %11, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %alloca = memref.alloca() : memref<32xf32>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %10 = arith.index_cast %arg4 : index to i32
      %11 = arith.addi %4, %10 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = arith.cmpi slt, %11, %arg3 : i32
      %14 = scf.if %13 -> (f32) {
        %15 = memref.load %arg0[%12] : memref<?xf32>
        scf.yield %15 : f32
      } else {
        scf.yield %cst : f32
      }
      memref.store %14, %alloca[%arg4] : memref<32xf32>
      scf.yield
    }
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %10 = memref.load %alloca[%arg4] : memref<32xf32>
      %11 = arith.index_cast %arg4 : index to i32
      %12 = arith.addi %9, %11 : i32
      %13 = arith.cmpi slt, %12, %arg3 : i32
      scf.if %13 {
        %14 = arith.index_cast %12 : i32 to index
        %15 = arith.cmpf ogt, %10, %cst : f32
        %16 = scf.if %15 -> (f32) {
          scf.yield %10 : f32
        } else {
          %17 = arith.mulf %10, %arg2 : f32
          scf.yield %17 : f32
        }
        memref.store %16, %arg1[%14] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<32xf32>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.index_cast %6 : i32 to index
        %8 = arith.cmpi slt, %6, %arg3 : i32
        %9 = scf.if %8 -> (f32) {
          %10 = memref.load %arg0[%7] : memref<?xf32>
          scf.yield %10 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %9, %alloca[%arg4] : memref<32xf32>
        scf.yield
      }
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %5 = memref.load %alloca[%arg4] : memref<32xf32>
        %6 = arith.index_cast %arg4 : index to i32
        %7 = arith.addi %4, %6 : i32
        %8 = arith.cmpi slt, %7, %arg3 : i32
        scf.if %8 {
          %9 = arith.index_cast %7 : i32 to index
          %10 = arith.cmpf ogt, %5, %cst : f32
          %11 = scf.if %10 -> (f32) {
            scf.yield %5 : f32
          } else {
            %12 = arith.mulf %5, %arg2 : f32
            scf.yield %12 : f32
          }
          memref.store %11, %arg1[%9] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %alloca = memref.alloca() : memref<32xf32>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %c32_0 = arith.constant 32 : index
      %2 = arith.index_cast %c32_0 : index to i32
      %3 = arith.muli %1, %2 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.cmpi slt, %5, %arg3 : i32
        %8 = scf.if %7 -> (f32) {
          %9 = memref.load %arg0[%6] : memref<?xf32>
          scf.yield %9 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %8, %alloca[%arg4] : memref<32xf32>
      }
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %4 = memref.load %alloca[%arg4] : memref<32xf32>
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %3, %5 : i32
        %7 = arith.cmpi slt, %6, %arg3 : i32
        scf.if %7 {
          %8 = arith.index_cast %6 : i32 to index
          %9 = arith.cmpf ogt, %4, %cst : f32
          %10 = scf.if %9 -> (f32) {
            scf.yield %4 : f32
          } else {
            %11 = arith.mulf %4, %arg2 : f32
            scf.yield %11 : f32
          }
          memref.store %10, %arg1[%8] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] MemRefAllocaToNPULowering: process op: 

%alloca = memref.alloca() : memref<32xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%alloca = memref.alloca() : memref<32xf32, 5>
MemRefAllocaToNPULowering: module: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %alloca = memref.alloca() : memref<32xf32, 5>
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %c32_0 = arith.constant 32 : index
      %3 = arith.index_cast %c32_0 : index to i32
      %4 = arith.muli %2, %3 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.index_cast %6 : i32 to index
        %8 = arith.cmpi slt, %6, %arg3 : i32
        %9 = scf.if %8 -> (f32) {
          %10 = memref.load %arg0[%7] : memref<?xf32>
          scf.yield %10 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %9, %alloca[%arg4] : memref<32xf32, 5>
      }
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %5 = memref.load %alloca[%arg4] : memref<32xf32, 5>
        %6 = arith.index_cast %arg4 : index to i32
        %7 = arith.addi %4, %6 : i32
        %8 = arith.cmpi slt, %7, %arg3 : i32
        scf.if %8 {
          %9 = arith.index_cast %7 : i32 to index
          %10 = arith.cmpf ogt, %5, %cst : f32
          %11 = scf.if %10 -> (f32) {
            scf.yield %5 : f32
          } else {
            %12 = arith.mulf %5, %arg2 : f32
            scf.yield %12 : f32
          }
          memref.store %11, %arg1[%9] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
MemRefAllocaToNPULowering: module: end
[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%11 = arith.index_cast %10 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%9 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%13 = arith.index_cast %11 : i32 to index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<32xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %c32_0 = arith.constant 32 : index
      %c32_i32 = arith.constant 32 : i32
      %4 = arith.muli %3, %c32_i32 : i32
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_1 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = emitc.cast %5 : i64 to i32
        %7 = arith.addi %4, %6 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.cmpi slt, %7, %arg3 : i32
        %10 = scf.if %9 -> (f32) {
          %11 = memref.load %arg0[%8] : memref<?xf32>
          scf.yield %11 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %10, %1[%arg4] : memref<32xf32, 5>
      }
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_2 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = memref.load %1[%arg4] : memref<32xf32, 5>
        %7 = emitc.cast %5 : i64 to i32
        %8 = arith.addi %4, %7 : i32
        %9 = arith.cmpi slt, %8, %arg3 : i32
        scf.if %9 {
          %10 = emitc.cast %8 : i32 to index
          %11 = arith.cmpf ogt, %6, %cst : f32
          %12 = scf.if %11 -> (f32) {
            scf.yield %6 : f32
          } else {
            %13 = emitc.mul %6, %arg2 : (f32, f32) -> f32
            scf.yield %13 : f32
          }
          memref.store %12, %arg1[%10] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<32xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %4 = arith.muli %3, %c32_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = emitc.cast %5 : i64 to i32
        %7 = arith.addi %4, %6 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.cmpi slt, %7, %arg3 : i32
        %10 = scf.if %9 -> (f32) {
          %11 = memref.load %arg0[%8] : memref<?xf32>
          scf.yield %11 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %10, %1[%arg4] : memref<32xf32, 5>
      }
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = memref.load %1[%arg4] : memref<32xf32, 5>
        %7 = emitc.cast %5 : i64 to i32
        %8 = arith.addi %4, %7 : i32
        %9 = arith.cmpi slt, %8, %arg3 : i32
        scf.if %9 {
          %10 = emitc.cast %8 : i32 to index
          %11 = arith.cmpf ogt, %6, %cst : f32
          %12 = scf.if %11 -> (f32) {
            scf.yield %6 : f32
          } else {
            %13 = emitc.mul %6, %arg2 : (f32, f32) -> f32
            scf.yield %13 : f32
          }
          memref.store %12, %arg1[%10] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z24leaky_relu_kernel_sharedPKfPffi_0 {
    gpu.func @_Z24leaky_relu_kernel_sharedPKfPffi(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: f32, %arg3: i32) {
      %c32_i32 = arith.constant 32 : i32
      %cst = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
      %1 = builtin.unrealized_conversion_cast %0 : !llvm.ptr<6> to memref<32xf32, 5>
      %2 = "npu.block_id"() : () -> i64
      %3 = emitc.cast %2 : i64 to i32
      %4 = arith.muli %3, %c32_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = emitc.cast %5 : i64 to i32
        %7 = arith.addi %4, %6 : i32
        %8 = emitc.cast %7 : i32 to index
        %9 = arith.cmpi slt, %7, %arg3 : i32
        %10 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
        emitc.if %9 {
          %11 = memref.load %arg0[%8] : memref<?xf32>
          emitc.assign %11 : f32 to %10 : f32
        } else {
          emitc.assign %cst : f32 to %10 : f32
        }
        memref.store %10, %1[%arg4] : memref<32xf32, 5>
      }
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %5 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %6 = memref.load %1[%arg4] : memref<32xf32, 5>
        %7 = emitc.cast %5 : i64 to i32
        %8 = arith.addi %4, %7 : i32
        %9 = arith.cmpi slt, %8, %arg3 : i32
        emitc.if %9 {
          %10 = emitc.cast %8 : i32 to index
          %11 = arith.cmpf ogt, %6, %cst : f32
          %12 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> f32
          emitc.if %11 {
            emitc.assign %6 : f32 to %12 : f32
          } else {
            %13 = emitc.mul %6, %arg2 : (f32, f32) -> f32
            emitc.assign %13 : f32 to %12 : f32
          }
          memref.store %12, %arg1[%10] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

