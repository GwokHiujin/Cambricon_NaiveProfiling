#include <bang.h>
__mlu_global__ void leaky_relu_kernel_shared(float* v1, float* v2, float v3, int32_t v4) {
  int32_t c32_5 = 32;
  float v6 = (float)0.0e+00;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  __nram__ int8_t v10[32];
  float* v11 = (float*)v10;
  int64_t v12 = taskId;
  int32_t v13 = (int32_t) v12;
  int32_t v14 = (v13) * (c32_5);
  for (size_t v15 = c0_7; v15 < c32_9; v15 += c1_8) {
    int64_t v16 = (int64_t)v15;
    int32_t v17 = (int32_t) v16;
    int32_t v18 = (v14) + (v17);
    size_t v19 = (size_t) v18;
    bool v20 = v18 < v4;
    float v21;
    if (v20) {
      float v22 = v1[v19];
      v21 = v22;
    } else {
      v21 = v6;
    };
    v11[v15] = v21;
  }
  for (size_t v23 = c0_7; v23 < c32_9; v23 += c1_8) {
    int64_t v24 = (int64_t)v23;
    float v25 = v11[v23];
    int32_t v26 = (int32_t) v24;
    int32_t v27 = (v14) + (v26);
    bool v28 = v27 < v4;
    if (v28) {
      size_t v29 = (size_t) v27;
      bool v30 = v25 > v6;
      float v31;
      if (v30) {
        v31 = v25;
      } else {
        float v32 = v25 * v3;
        v31 = v32;
      };
      v2[v29] = v31;
    };
  }
  return;
}




