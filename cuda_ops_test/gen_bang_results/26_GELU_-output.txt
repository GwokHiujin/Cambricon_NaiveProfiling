warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z37__device_stub__gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0, %arg1, %arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, i64) -> ()
    return
  }
  func.func private @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.cmpi slt, %8, %arg2 : i64
    scf.if %9 {
      %10 = arith.index_cast %8 : i64 to index
      %11 = "polygeist.subindex"(%arg0, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %12 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %13 = llvm.load %12 : !llvm.ptr -> f32
      %14 = func.call @_Z13gelu_functionIfET_S0_(%13) : (f32) -> f32
      llvm.store %14, %12 : f32, !llvm.ptr
      %15 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %16 = llvm.getelementptr %15[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %17 = llvm.load %16 : !llvm.ptr -> f32
      %18 = func.call @_Z13gelu_functionIfET_S0_(%17) : (f32) -> f32
      llvm.store %18, %16 : f32, !llvm.ptr
      %19 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %20 = llvm.getelementptr %19[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %21 = llvm.load %20 : !llvm.ptr -> f32
      %22 = func.call @_Z13gelu_functionIfET_S0_(%21) : (f32) -> f32
      llvm.store %22, %20 : f32, !llvm.ptr
      %23 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %24 = llvm.getelementptr %23[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %25 = llvm.load %24 : !llvm.ptr -> f32
      %26 = func.call @_Z13gelu_functionIfET_S0_(%25) : (f32) -> f32
      llvm.store %26, %24 : f32, !llvm.ptr
      %27 = arith.index_cast %8 : i64 to index
      %28 = "polygeist.subindex"(%arg1, %27) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %29 = func.call @_ZN6float4aSERKS_(%28, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    return
  }
  func.func private @_Z36__device_stub__gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z21gelu_kernel_remainderPKfPfmm(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, i64, i64) -> ()
    return
  }
  func.func private @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.index_cast %7 : i32 to index
    %10 = arith.extui %7 : i32 to i64
    %11 = arith.addi %10, %arg2 : i64
    %12 = arith.cmpi slt, %11, %arg3 : i64
    scf.if %12 {
      %13 = affine.load %arg0[symbol(%8)] : memref<?xf32>
      %14 = func.call @_Z13gelu_functionIfET_S0_(%13) : (f32) -> f32
      affine.store %14, %arg1[symbol(%9)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_Z13gelu_functionIfET_S0_(%arg0: f32) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.41421354 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 5.000000e-01 : f32
    %0 = arith.mulf %arg0, %cst_1 : f32
    %1 = arith.divf %arg0, %cst : f32
    %2 = call @_ZL4erfff(%1) : (f32) -> f32
    %3 = arith.addf %2, %cst_0 : f32
    %4 = arith.mulf %0, %3 : f32
    return %4 : f32
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %4 = llvm.getelementptr %3[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %6 = llvm.getelementptr %5[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    llvm.store %7, %4 : f32, !llvm.ptr
    %8 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %9 = llvm.getelementptr %8[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %11 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %12 = llvm.load %11 : !llvm.ptr -> f32
    llvm.store %12, %9 : f32, !llvm.ptr
    %13 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %14 = llvm.getelementptr %13[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %16 = llvm.getelementptr %15[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %17 = llvm.load %16 : !llvm.ptr -> f32
    llvm.store %17, %14 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @_ZL4erfff(%arg0: f32) -> f32 attributes {llvm.linkage = #llvm.linkage<internal>, polygeist.device_only_func = "1"} {
    %0 = call @__nv_erff(%arg0) : (f32) -> f32
    return %0 : f32
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 5.000000e-01 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.41421354 : f32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.cmpi slt, %8, %arg2 : i64
    scf.if %9 {
      %10 = arith.index_cast %8 : i64 to index
      %11 = "polygeist.subindex"(%arg0, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %12 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %13 = llvm.load %12 : !llvm.ptr -> f32
      %14 = arith.mulf %13, %cst : f32
      %15 = arith.divf %13, %cst_1 : f32
      %16 = func.call @__nv_erff(%15) : (f32) -> f32
      %17 = arith.addf %16, %cst_0 : f32
      %18 = arith.mulf %14, %17 : f32
      llvm.store %18, %12 : f32, !llvm.ptr
      %19 = llvm.getelementptr %12[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %20 = llvm.load %19 : !llvm.ptr -> f32
      %21 = arith.mulf %20, %cst : f32
      %22 = arith.divf %20, %cst_1 : f32
      %23 = func.call @__nv_erff(%22) : (f32) -> f32
      %24 = arith.addf %23, %cst_0 : f32
      %25 = arith.mulf %21, %24 : f32
      llvm.store %25, %19 : f32, !llvm.ptr
      %26 = llvm.getelementptr %12[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.load %26 : !llvm.ptr -> f32
      %28 = arith.mulf %27, %cst : f32
      %29 = arith.divf %27, %cst_1 : f32
      %30 = func.call @__nv_erff(%29) : (f32) -> f32
      %31 = arith.addf %30, %cst_0 : f32
      %32 = arith.mulf %28, %31 : f32
      llvm.store %32, %26 : f32, !llvm.ptr
      %33 = llvm.getelementptr %12[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %34 = llvm.load %33 : !llvm.ptr -> f32
      %35 = arith.mulf %34, %cst : f32
      %36 = arith.divf %34, %cst_1 : f32
      %37 = func.call @__nv_erff(%36) : (f32) -> f32
      %38 = arith.addf %37, %cst_0 : f32
      %39 = arith.mulf %35, %38 : f32
      llvm.store %39, %33 : f32, !llvm.ptr
      %40 = "polygeist.subindex"(%arg1, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %41 = func.call @_ZN6float4aSERKS_(%40, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    return
  }
  func.func private @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 5.000000e-01 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.41421354 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.extui %7 : i32 to i64
    %10 = arith.addi %9, %arg2 : i64
    %11 = arith.cmpi slt, %10, %arg3 : i64
    scf.if %11 {
      %12 = affine.load %arg0[symbol(%8)] : memref<?xf32>
      %13 = arith.mulf %12, %cst : f32
      %14 = arith.divf %12, %cst_1 : f32
      %15 = func.call @__nv_erff(%14) : (f32) -> f32
      %16 = arith.addf %15, %cst_0 : f32
      %17 = arith.mulf %13, %16 : f32
      affine.store %17, %arg1[symbol(%8)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 5.000000e-01 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.41421354 : f32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.cmpi slt, %8, %arg2 : i64
    scf.if %9 {
      %10 = arith.index_cast %8 : i64 to index
      %11 = "polygeist.subindex"(%arg0, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %12 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %13 = llvm.load %12 : !llvm.ptr -> f32
      %14 = arith.mulf %13, %cst : f32
      %15 = arith.divf %13, %cst_1 : f32
      %16 = func.call @__nv_erff(%15) : (f32) -> f32
      %17 = arith.addf %16, %cst_0 : f32
      %18 = arith.mulf %14, %17 : f32
      llvm.store %18, %12 : f32, !llvm.ptr
      %19 = llvm.getelementptr %12[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %20 = llvm.load %19 : !llvm.ptr -> f32
      %21 = arith.mulf %20, %cst : f32
      %22 = arith.divf %20, %cst_1 : f32
      %23 = func.call @__nv_erff(%22) : (f32) -> f32
      %24 = arith.addf %23, %cst_0 : f32
      %25 = arith.mulf %21, %24 : f32
      llvm.store %25, %19 : f32, !llvm.ptr
      %26 = llvm.getelementptr %12[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.load %26 : !llvm.ptr -> f32
      %28 = arith.mulf %27, %cst : f32
      %29 = arith.divf %27, %cst_1 : f32
      %30 = func.call @__nv_erff(%29) : (f32) -> f32
      %31 = arith.addf %30, %cst_0 : f32
      %32 = arith.mulf %28, %31 : f32
      llvm.store %32, %26 : f32, !llvm.ptr
      %33 = llvm.getelementptr %12[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %34 = llvm.load %33 : !llvm.ptr -> f32
      %35 = arith.mulf %34, %cst : f32
      %36 = arith.divf %34, %cst_1 : f32
      %37 = func.call @__nv_erff(%36) : (f32) -> f32
      %38 = arith.addf %37, %cst_0 : f32
      %39 = arith.mulf %35, %38 : f32
      llvm.store %39, %33 : f32, !llvm.ptr
      %40 = "polygeist.subindex"(%arg1, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %41 = func.call @_ZN6float4aSERKS_(%40, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    return
  }
  func.func private @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 5.000000e-01 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.41421354 : f32
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.index_cast %7 : i32 to index
    %9 = arith.extui %7 : i32 to i64
    %10 = arith.addi %9, %arg2 : i64
    %11 = arith.cmpi slt, %10, %arg3 : i64
    scf.if %11 {
      %12 = memref.load %arg0[%8] : memref<?xf32>
      %13 = arith.mulf %12, %cst : f32
      %14 = arith.divf %12, %cst_1 : f32
      %15 = func.call @__nv_erff(%14) : (f32) -> f32
      %16 = arith.addf %15, %cst_0 : f32
      %17 = arith.mulf %13, %16 : f32
      memref.store %17, %arg1[%8] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nv_erff. func.getBlocks().size() == 0! this function is empty, skip it.

WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 5.000000e-01 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 1.41421354 : f32
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg3 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.extui %6 : i32 to i64
      %8 = arith.cmpi slt, %7, %arg2 : i64
      scf.if %8 {
        %9 = arith.index_cast %7 : i64 to index
        %10 = "polygeist.subindex"(%arg0, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %11 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %12 = llvm.load %11 : !llvm.ptr -> f32
        %13 = arith.mulf %12, %cst : f32
        %14 = arith.divf %12, %cst_1 : f32
        %15 = func.call @__nv_erff(%14) : (f32) -> f32
        %16 = arith.addf %15, %cst_0 : f32
        %17 = arith.mulf %13, %16 : f32
        llvm.store %17, %11 : f32, !llvm.ptr
        %18 = llvm.getelementptr %11[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %19 = llvm.load %18 : !llvm.ptr -> f32
        %20 = arith.mulf %19, %cst : f32
        %21 = arith.divf %19, %cst_1 : f32
        %22 = func.call @__nv_erff(%21) : (f32) -> f32
        %23 = arith.addf %22, %cst_0 : f32
        %24 = arith.mulf %20, %23 : f32
        llvm.store %24, %18 : f32, !llvm.ptr
        %25 = llvm.getelementptr %11[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %26 = llvm.load %25 : !llvm.ptr -> f32
        %27 = arith.mulf %26, %cst : f32
        %28 = arith.divf %26, %cst_1 : f32
        %29 = func.call @__nv_erff(%28) : (f32) -> f32
        %30 = arith.addf %29, %cst_0 : f32
        %31 = arith.mulf %27, %30 : f32
        llvm.store %31, %25 : f32, !llvm.ptr
        %32 = llvm.getelementptr %11[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %33 = llvm.load %32 : !llvm.ptr -> f32
        %34 = arith.mulf %33, %cst : f32
        %35 = arith.divf %33, %cst_1 : f32
        %36 = func.call @__nv_erff(%35) : (f32) -> f32
        %37 = arith.addf %36, %cst_0 : f32
        %38 = arith.mulf %34, %37 : f32
        llvm.store %38, %32 : f32, !llvm.ptr
        %39 = "polygeist.subindex"(%arg1, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %40 = func.call @_ZN6float4aSERKS_(%39, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      scf.yield
    }
    return
  }
  func.func @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 5.000000e-01 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 1.41421354 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.extui %6 : i32 to i64
      %9 = arith.addi %8, %arg2 : i64
      %10 = arith.cmpi slt, %9, %arg3 : i64
      scf.if %10 {
        %11 = memref.load %arg0[%7] : memref<?xf32>
        %12 = arith.mulf %11, %cst : f32
        %13 = arith.divf %11, %cst_1 : f32
        %14 = func.call @__nv_erff(%13) : (f32) -> f32
        %15 = arith.addf %14, %cst_0 : f32
        %16 = arith.mulf %12, %15 : f32
        memref.store %16, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 5.000000e-01 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 1.41421354 : f32
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg3 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.extui %6 : i32 to i64
      %8 = arith.cmpi slt, %7, %arg2 : i64
      scf.if %8 {
        %9 = arith.index_cast %7 : i64 to index
        %10 = "polygeist.subindex"(%arg0, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %11 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %12 = llvm.load %11 : !llvm.ptr -> f32
        %13 = arith.mulf %12, %cst : f32
        %14 = arith.divf %12, %cst_1 : f32
        %15 = func.call @__nv_erff(%14) : (f32) -> f32
        %16 = arith.addf %15, %cst_0 : f32
        %17 = arith.mulf %13, %16 : f32
        llvm.store %17, %11 : f32, !llvm.ptr
        %18 = llvm.getelementptr %11[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %19 = llvm.load %18 : !llvm.ptr -> f32
        %20 = arith.mulf %19, %cst : f32
        %21 = arith.divf %19, %cst_1 : f32
        %22 = func.call @__nv_erff(%21) : (f32) -> f32
        %23 = arith.addf %22, %cst_0 : f32
        %24 = arith.mulf %20, %23 : f32
        llvm.store %24, %18 : f32, !llvm.ptr
        %25 = llvm.getelementptr %11[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %26 = llvm.load %25 : !llvm.ptr -> f32
        %27 = arith.mulf %26, %cst : f32
        %28 = arith.divf %26, %cst_1 : f32
        %29 = func.call @__nv_erff(%28) : (f32) -> f32
        %30 = arith.addf %29, %cst_0 : f32
        %31 = arith.mulf %27, %30 : f32
        llvm.store %31, %25 : f32, !llvm.ptr
        %32 = llvm.getelementptr %11[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %33 = llvm.load %32 : !llvm.ptr -> f32
        %34 = arith.mulf %33, %cst : f32
        %35 = arith.divf %33, %cst_1 : f32
        %36 = func.call @__nv_erff(%35) : (f32) -> f32
        %37 = arith.addf %36, %cst_0 : f32
        %38 = arith.mulf %34, %37 : f32
        llvm.store %38, %32 : f32, !llvm.ptr
        %39 = "polygeist.subindex"(%arg1, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %40 = func.call @_ZN6float4aSERKS_(%39, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      scf.yield
    }
    return
  }
  func.func @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %cst = arith.constant 5.000000e-01 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 1.41421354 : f32
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.extui %6 : i32 to i64
      %9 = arith.addi %8, %arg2 : i64
      %10 = arith.cmpi slt, %9, %arg3 : i64
      scf.if %10 {
        %11 = memref.load %arg0[%7] : memref<?xf32>
        %12 = arith.mulf %11, %cst : f32
        %13 = arith.divf %11, %cst_1 : f32
        %14 = func.call @__nv_erff(%13) : (f32) -> f32
        %15 = arith.addf %14, %cst_0 : f32
        %16 = arith.mulf %12, %15 : f32
        memref.store %16, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.41421354 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 5.000000e-01 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %5 = arith.index_cast %arg3 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.extui %6 : i32 to i64
      %8 = arith.cmpi slt, %7, %arg2 : i64
      scf.if %8 {
        %9 = arith.index_cast %7 : i64 to index
        %10 = "polygeist.subindex"(%arg0, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %11 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %12 = llvm.load %11 : !llvm.ptr -> f32
        %13 = arith.mulf %12, %cst_1 : f32
        %14 = arith.divf %12, %cst : f32
        %15 = func.call @__nv_erff(%14) : (f32) -> f32
        %16 = arith.addf %15, %cst_0 : f32
        %17 = arith.mulf %13, %16 : f32
        llvm.store %17, %11 : f32, !llvm.ptr
        %18 = llvm.getelementptr %11[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %19 = llvm.load %18 : !llvm.ptr -> f32
        %20 = arith.mulf %19, %cst_1 : f32
        %21 = arith.divf %19, %cst : f32
        %22 = func.call @__nv_erff(%21) : (f32) -> f32
        %23 = arith.addf %22, %cst_0 : f32
        %24 = arith.mulf %20, %23 : f32
        llvm.store %24, %18 : f32, !llvm.ptr
        %25 = llvm.getelementptr %11[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %26 = llvm.load %25 : !llvm.ptr -> f32
        %27 = arith.mulf %26, %cst_1 : f32
        %28 = arith.divf %26, %cst : f32
        %29 = func.call @__nv_erff(%28) : (f32) -> f32
        %30 = arith.addf %29, %cst_0 : f32
        %31 = arith.mulf %27, %30 : f32
        llvm.store %31, %25 : f32, !llvm.ptr
        %32 = llvm.getelementptr %11[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %33 = llvm.load %32 : !llvm.ptr -> f32
        %34 = arith.mulf %33, %cst_1 : f32
        %35 = arith.divf %33, %cst : f32
        %36 = func.call @__nv_erff(%35) : (f32) -> f32
        %37 = arith.addf %36, %cst_0 : f32
        %38 = arith.mulf %34, %37 : f32
        llvm.store %38, %32 : f32, !llvm.ptr
        %39 = "polygeist.subindex"(%arg1, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %40 = func.call @_ZN6float4aSERKS_(%39, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      scf.yield
    }
    return
  }
  func.func @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.41421354 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 5.000000e-01 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %5 = arith.index_cast %arg4 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.index_cast %6 : i32 to index
      %8 = arith.extui %6 : i32 to i64
      %9 = arith.addi %8, %arg2 : i64
      %10 = arith.cmpi slt, %9, %arg3 : i64
      scf.if %10 {
        %11 = memref.load %arg0[%7] : memref<?xf32>
        %12 = arith.mulf %11, %cst_1 : f32
        %13 = arith.divf %11, %cst : f32
        %14 = func.call @__nv_erff(%13) : (f32) -> f32
        %15 = arith.addf %14, %cst_0 : f32
        %16 = arith.mulf %12, %15 : f32
        memref.store %16, %arg1[%7] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nv_erff. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22gelu_kernel_vectorizedPK6float4PS_m_0 {
    gpu.func @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) {
      %cst = arith.constant 1.41421354 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 5.000000e-01 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
        %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %5 = arith.index_cast %arg3 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.extui %6 : i32 to i64
        %8 = arith.cmpi slt, %7, %arg2 : i64
        scf.if %8 {
          %9 = arith.index_cast %7 : i64 to index
          %10 = "polygeist.subindex"(%arg0, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast, %10) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %11 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %12 = llvm.load %11 : !llvm.ptr -> f32
          %13 = arith.mulf %12, %cst_1 : f32
          %14 = arith.divf %12, %cst : f32
          %15 = func.call @__nv_erff(%14) : (f32) -> f32
          %16 = arith.addf %15, %cst_0 : f32
          %17 = arith.mulf %13, %16 : f32
          llvm.store %17, %11 : f32, !llvm.ptr
          %18 = llvm.getelementptr %11[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %19 = llvm.load %18 : !llvm.ptr -> f32
          %20 = arith.mulf %19, %cst_1 : f32
          %21 = arith.divf %19, %cst : f32
          %22 = func.call @__nv_erff(%21) : (f32) -> f32
          %23 = arith.addf %22, %cst_0 : f32
          %24 = arith.mulf %20, %23 : f32
          llvm.store %24, %18 : f32, !llvm.ptr
          %25 = llvm.getelementptr %11[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %26 = llvm.load %25 : !llvm.ptr -> f32
          %27 = arith.mulf %26, %cst_1 : f32
          %28 = arith.divf %26, %cst : f32
          %29 = func.call @__nv_erff(%28) : (f32) -> f32
          %30 = arith.addf %29, %cst_0 : f32
          %31 = arith.mulf %27, %30 : f32
          llvm.store %31, %25 : f32, !llvm.ptr
          %32 = llvm.getelementptr %11[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %33 = llvm.load %32 : !llvm.ptr -> f32
          %34 = arith.mulf %33, %cst_1 : f32
          %35 = arith.divf %33, %cst : f32
          %36 = func.call @__nv_erff(%35) : (f32) -> f32
          %37 = arith.addf %36, %cst_0 : f32
          %38 = arith.mulf %34, %37 : f32
          llvm.store %38, %32 : f32, !llvm.ptr
          %39 = "polygeist.subindex"(%arg1, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %40 = func.call @_ZN6float4aSERKS_(%39, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = llvm.load %0 : !llvm.ptr -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      llvm.store %1, %2 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.load %3 : !llvm.ptr -> f32
      %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %4, %5 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.load %6 : !llvm.ptr -> f32
      %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %7, %8 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.load %9 : !llvm.ptr -> f32
      %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %10, %11 : f32, !llvm.ptr
      return
    }
    func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = llvm.load %1 : !llvm.ptr -> f32
      llvm.store %2, %0 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %5 = llvm.load %4 : !llvm.ptr -> f32
      llvm.store %5, %3 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %8 = llvm.load %7 : !llvm.ptr -> f32
      llvm.store %8, %6 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %11 = llvm.load %10 : !llvm.ptr -> f32
      llvm.store %11, %9 : f32, !llvm.ptr
      return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
  }
  gpu.module @_Z21gelu_kernel_remainderPKfPfmm_1 {
    gpu.func @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) {
      %cst = arith.constant 1.41421354 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 5.000000e-01 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %5 = arith.index_cast %arg4 : index to i32
        %6 = arith.addi %4, %5 : i32
        %7 = arith.index_cast %6 : i32 to index
        %8 = arith.extui %6 : i32 to i64
        %9 = arith.addi %8, %arg2 : i64
        %10 = arith.cmpi slt, %9, %arg3 : i64
        scf.if %10 {
          %11 = memref.load %arg0[%7] : memref<?xf32>
          %12 = arith.mulf %11, %cst_1 : f32
          %13 = arith.divf %11, %cst : f32
          %14 = func.call @__nv_erff(%13) : (f32) -> f32
          %15 = arith.addf %14, %cst_0 : f32
          %16 = arith.mulf %12, %15 : f32
          memref.store %16, %arg1[%7] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22gelu_kernel_vectorizedPK6float4PS_m_0 {
    gpu.func @_Z22gelu_kernel_vectorizedPK6float4PS_m(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64) {
      %cst = arith.constant 1.41421354 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 5.000000e-01 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %c32_2 = arith.constant 32 : index
      %2 = arith.index_cast %c32_2 : index to i32
      %3 = arith.muli %1, %2 : i32
      %c1_3 = arith.constant 1 : index
      scf.for %arg3 = %c0 to %c32 step %c1_3 {
        %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %4 = arith.index_cast %arg3 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.extui %5 : i32 to i64
        %7 = arith.cmpi slt, %6, %arg2 : i64
        scf.if %7 {
          %8 = arith.index_cast %6 : i64 to index
          %9 = "polygeist.subindex"(%arg0, %8) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast, %9) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %10 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
          %11 = llvm.load %10 : !llvm.ptr -> f32
          %12 = arith.mulf %11, %cst_1 : f32
          %13 = arith.divf %11, %cst : f32
          %14 = func.call @__nv_erff(%13) : (f32) -> f32
          %15 = arith.addf %14, %cst_0 : f32
          %16 = arith.mulf %12, %15 : f32
          llvm.store %16, %10 : f32, !llvm.ptr
          %17 = llvm.getelementptr %10[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %18 = llvm.load %17 : !llvm.ptr -> f32
          %19 = arith.mulf %18, %cst_1 : f32
          %20 = arith.divf %18, %cst : f32
          %21 = func.call @__nv_erff(%20) : (f32) -> f32
          %22 = arith.addf %21, %cst_0 : f32
          %23 = arith.mulf %19, %22 : f32
          llvm.store %23, %17 : f32, !llvm.ptr
          %24 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %25 = llvm.load %24 : !llvm.ptr -> f32
          %26 = arith.mulf %25, %cst_1 : f32
          %27 = arith.divf %25, %cst : f32
          %28 = func.call @__nv_erff(%27) : (f32) -> f32
          %29 = arith.addf %28, %cst_0 : f32
          %30 = arith.mulf %26, %29 : f32
          llvm.store %30, %24 : f32, !llvm.ptr
          %31 = llvm.getelementptr %10[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
          %32 = llvm.load %31 : !llvm.ptr -> f32
          %33 = arith.mulf %32, %cst_1 : f32
          %34 = arith.divf %32, %cst : f32
          %35 = func.call @__nv_erff(%34) : (f32) -> f32
          %36 = arith.addf %35, %cst_0 : f32
          %37 = arith.mulf %33, %36 : f32
          llvm.store %37, %31 : f32, !llvm.ptr
          %38 = "polygeist.subindex"(%arg1, %8) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %39 = func.call @_ZN6float4aSERKS_(%38, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
      }
      gpu.return
    }
    func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = llvm.load %0 : !llvm.ptr -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      llvm.store %1, %2 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.load %3 : !llvm.ptr -> f32
      %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %4, %5 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.load %6 : !llvm.ptr -> f32
      %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %7, %8 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.load %9 : !llvm.ptr -> f32
      %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %10, %11 : f32, !llvm.ptr
      return
    }
    func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = llvm.load %1 : !llvm.ptr -> f32
      llvm.store %2, %0 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %5 = llvm.load %4 : !llvm.ptr -> f32
      llvm.store %5, %3 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %8 = llvm.load %7 : !llvm.ptr -> f32
      llvm.store %8, %6 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %11 = llvm.load %10 : !llvm.ptr -> f32
      llvm.store %11, %9 : f32, !llvm.ptr
      return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
  }
  gpu.module @_Z21gelu_kernel_remainderPKfPfmm_1 {
    gpu.func @_Z21gelu_kernel_remainderPKfPfmm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64) {
      %cst = arith.constant 1.41421354 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 5.000000e-01 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %c32_2 = arith.constant 32 : index
      %2 = arith.index_cast %c32_2 : index to i32
      %3 = arith.muli %1, %2 : i32
      %c1_3 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_3 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.extui %5 : i32 to i64
        %8 = arith.addi %7, %arg2 : i64
        %9 = arith.cmpi slt, %8, %arg3 : i64
        scf.if %9 {
          %10 = memref.load %arg0[%6] : memref<?xf32>
          %11 = arith.mulf %10, %cst_1 : f32
          %12 = arith.divf %10, %cst : f32
          %13 = func.call @__nv_erff(%12) : (f32) -> f32
          %14 = arith.addf %13, %cst_0 : f32
          %15 = arith.mulf %11, %14 : f32
          memref.store %15, %arg1[%6] : memref<?xf32>
        }
      }
      gpu.return
    }
    func.func private @__nv_erff(f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%6 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = "arith.index_cast"(%7) : (index) -> i32
[ict-debug] MemRefAllocaToNPULowering: process op: 

%15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%15 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64):
      %0 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %1 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %2 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 0 : index}> : () -> index
      %4 = "arith.constant"() <{value = 1 : index}> : () -> index
      %5 = "arith.constant"() <{value = 32 : index}> : () -> index
      %6 = "npu.block_id"() : () -> i64
      %7 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %8 = "emitc.cast"(%6) : (i64) -> i32
      %9 = "arith.index_cast"(%7) : (index) -> i32
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %12 = "arith.index_cast"(%10) : (index) -> i32
      %13 = "arith.muli"(%9, %12) : (i32, i32) -> i32
      %14 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%3, %5, %14) ({
      ^bb0(%arg3: index):
        %15 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %17 = "memref.cast"(%16) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %18 = "arith.index_cast"(%arg3) : (index) -> i32
        %19 = "arith.addi"(%13, %18) : (i32, i32) -> i32
        %20 = "arith.extui"(%19) : (i32) -> i64
        %21 = "arith.cmpi"(%20, %arg2) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%21) ({
          %22 = "arith.index_cast"(%20) : (i64) -> index
          %23 = "polygeist.subindex"(%arg0, %22) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%17, %23) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %24 = "polygeist.memref2pointer"(%16) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
          %25 = "llvm.load"(%24) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %26 = "arith.mulf"(%25, %2) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %27 = "arith.divf"(%25, %0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %28 = "func.call"(%27) <{callee = @__nv_erff}> : (f32) -> f32
          %29 = "arith.addf"(%28, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %30 = "arith.mulf"(%26, %29) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%30, %24) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %31 = "llvm.getelementptr"(%24) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %33 = "arith.mulf"(%32, %2) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %34 = "arith.divf"(%32, %0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %35 = "func.call"(%34) <{callee = @__nv_erff}> : (f32) -> f32
          %36 = "arith.addf"(%35, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %37 = "arith.mulf"(%33, %36) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%37, %31) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %38 = "llvm.getelementptr"(%24) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %40 = "arith.mulf"(%39, %2) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %41 = "arith.divf"(%39, %0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %42 = "func.call"(%41) <{callee = @__nv_erff}> : (f32) -> f32
          %43 = "arith.addf"(%42, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %44 = "arith.mulf"(%40, %43) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%44, %38) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %45 = "llvm.getelementptr"(%24) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %46 = "llvm.load"(%45) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %47 = "arith.mulf"(%46, %2) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %48 = "arith.divf"(%46, %0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %49 = "func.call"(%48) <{callee = @__nv_erff}> : (f32) -> f32
          %50 = "arith.addf"(%49, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %51 = "arith.mulf"(%47, %50) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%51, %45) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %52 = "polygeist.subindex"(%arg1, %22) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %53 = "func.call"(%52, %17) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m_0"} : () -> ()
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64):
      %0 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %1 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %2 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 0 : index}> : () -> index
      %4 = "arith.constant"() <{value = 1 : index}> : () -> index
      %5 = "arith.constant"() <{value = 32 : index}> : () -> index
      %6 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %7 = "arith.index_cast"(%6) : (index) -> i32
      %8 = "arith.constant"() <{value = 32 : index}> : () -> index
      %9 = "arith.index_cast"(%8) : (index) -> i32
      %10 = "arith.muli"(%7, %9) : (i32, i32) -> i32
      %11 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%3, %5, %11) ({
      ^bb0(%arg4: index):
        %12 = "arith.index_cast"(%arg4) : (index) -> i32
        %13 = "arith.addi"(%10, %12) : (i32, i32) -> i32
        %14 = "arith.index_cast"(%13) : (i32) -> index
        %15 = "arith.extui"(%13) : (i32) -> i64
        %16 = "arith.addi"(%15, %arg2) : (i64, i64) -> i64
        %17 = "arith.cmpi"(%16, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%17) ({
          %18 = "memref.load"(%arg0, %14) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %19 = "arith.mulf"(%18, %2) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %20 = "arith.divf"(%18, %0) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %21 = "func.call"(%20) <{callee = @__nv_erff}> : (f32) -> f32
          %22 = "arith.addf"(%21, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %23 = "arith.mulf"(%19, %22) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "memref.store"(%23, %arg1, %14) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm_1"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = "arith.index_cast"(%arg3) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%22 = "arith.extui"(%21) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = "arith.index_cast"(%23) : (i64) -> index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%0 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %1 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%7 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%10 = arith.index_cast %9 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%12 = arith.extui %9 : i32 to i64
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %5 = "arith.constant"() <{value = 0 : index}> : () -> index
      %6 = "arith.constant"() <{value = 1 : index}> : () -> index
      %7 = "arith.constant"() <{value = 32 : index}> : () -> index
      %8 = "npu.block_id"() : () -> i64
      %9 = "emitc.cast"(%8) : (i64) -> i32
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %12 = "arith.muli"(%9, %11) : (i32, i32) -> i32
      %13 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%5, %7, %13) ({
      ^bb0(%arg3: index):
        %14 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %15 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %16 = "builtin.unrealized_conversion_cast"(%15) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %17 = "memref.cast"(%16) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %18 = "emitc.cast"(%14) : (i64) -> i32
        %19 = "arith.addi"(%12, %18) : (i32, i32) -> i32
        %20 = "emitc.cast"(%19) : (i32) -> i64
        %21 = "arith.cmpi"(%20, %arg2) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%21) ({
          %22 = "emitc.cast"(%20) : (i64) -> index
          %23 = "builtin.unrealized_conversion_cast"(%22) : (index) -> i64
          %24 = "llvm.getelementptr"(%0, %23) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %25 = "llvm.bitcast"(%24) : (!llvm.ptr) -> !llvm.ptr
          %26 = "builtin.unrealized_conversion_cast"(%25) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%17, %26) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %27 = "llvm.bitcast"(%15) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %28 = "llvm.addrspacecast"(%27) : (!llvm.ptr<5>) -> !llvm.ptr
          %29 = "llvm.load"(%28) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %30 = "emitc.mul"(%29, %4) : (f32, f32) -> f32
          %31 = "emitc.div"(%29, %2) : (f32, f32) -> f32
          %32 = "func.call"(%31) <{callee = @__nv_erff}> : (f32) -> f32
          %33 = "emitc.add"(%32, %3) : (f32, f32) -> f32
          %34 = "emitc.mul"(%30, %33) : (f32, f32) -> f32
          "llvm.store"(%34, %28) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %35 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %36 = "llvm.load"(%35) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %37 = "emitc.mul"(%36, %4) : (f32, f32) -> f32
          %38 = "emitc.div"(%36, %2) : (f32, f32) -> f32
          %39 = "func.call"(%38) <{callee = @__nv_erff}> : (f32) -> f32
          %40 = "emitc.add"(%39, %3) : (f32, f32) -> f32
          %41 = "emitc.mul"(%37, %40) : (f32, f32) -> f32
          "llvm.store"(%41, %35) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %42 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %43 = "llvm.load"(%42) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %44 = "emitc.mul"(%43, %4) : (f32, f32) -> f32
          %45 = "emitc.div"(%43, %2) : (f32, f32) -> f32
          %46 = "func.call"(%45) <{callee = @__nv_erff}> : (f32) -> f32
          %47 = "emitc.add"(%46, %3) : (f32, f32) -> f32
          %48 = "emitc.mul"(%44, %47) : (f32, f32) -> f32
          "llvm.store"(%48, %42) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %49 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %50 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %51 = "emitc.mul"(%50, %4) : (f32, f32) -> f32
          %52 = "emitc.div"(%50, %2) : (f32, f32) -> f32
          %53 = "func.call"(%52) <{callee = @__nv_erff}> : (f32) -> f32
          %54 = "emitc.add"(%53, %3) : (f32, f32) -> f32
          %55 = "emitc.mul"(%51, %54) : (f32, f32) -> f32
          "llvm.store"(%55, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %56 = "llvm.getelementptr"(%1, %23) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %57 = "llvm.bitcast"(%56) : (!llvm.ptr) -> !llvm.ptr
          %58 = "builtin.unrealized_conversion_cast"(%57) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %59 = "func.call"(%58, %17) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m_0"} : () -> ()
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64):
      %0 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %1 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %2 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 0 : index}> : () -> index
      %4 = "arith.constant"() <{value = 1 : index}> : () -> index
      %5 = "arith.constant"() <{value = 32 : index}> : () -> index
      %6 = "npu.block_id"() : () -> i64
      %7 = "emitc.cast"(%6) : (i64) -> i32
      %8 = "arith.constant"() <{value = 32 : index}> : () -> index
      %9 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %10 = "arith.muli"(%7, %9) : (i32, i32) -> i32
      %11 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%3, %5, %11) ({
      ^bb0(%arg4: index):
        %12 = "builtin.unrealized_conversion_cast"(%arg4) : (index) -> i64
        %13 = "emitc.cast"(%12) : (i64) -> i32
        %14 = "arith.addi"(%10, %13) : (i32, i32) -> i32
        %15 = "emitc.cast"(%14) : (i32) -> index
        %16 = "emitc.cast"(%14) : (i32) -> i64
        %17 = "arith.addi"(%16, %arg2) : (i64, i64) -> i64
        %18 = "arith.cmpi"(%17, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%18) ({
          %19 = "memref.load"(%arg0, %15) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %20 = "emitc.mul"(%19, %2) : (f32, f32) -> f32
          %21 = "emitc.div"(%19, %0) : (f32, f32) -> f32
          %22 = "func.call"(%21) <{callee = @__nv_erff}> : (f32) -> f32
          %23 = "emitc.add"(%22, %1) : (f32, f32) -> f32
          %24 = "emitc.mul"(%20, %23) : (f32, f32) -> f32
          "memref.store"(%24, %arg1, %15) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm_1"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

loc("./cuda_ops/26_GELU_.cu":21:9): error: 'memref.cast' op operand type 'memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>' and result type 'memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>' are cast incompatible
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %5 = "arith.constant"() <{value = 0 : index}> : () -> index
      %6 = "arith.constant"() <{value = 1 : index}> : () -> index
      %7 = "arith.constant"() <{value = 32 : index}> : () -> index
      %8 = "npu.block_id"() : () -> i64
      %9 = "emitc.cast"(%8) : (i64) -> i32
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %12 = "arith.muli"(%9, %11) : (i32, i32) -> i32
      %13 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%5, %7, %13) ({
      ^bb0(%arg3: index):
        %14 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %15 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %16 = "builtin.unrealized_conversion_cast"(%15) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %17 = "memref.cast"(%16) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %18 = "emitc.cast"(%14) : (i64) -> i32
        %19 = "arith.addi"(%12, %18) : (i32, i32) -> i32
        %20 = "emitc.cast"(%19) : (i32) -> i64
        %21 = "arith.cmpi"(%20, %arg2) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%21) ({
          %22 = "emitc.cast"(%20) : (i64) -> index
          %23 = "builtin.unrealized_conversion_cast"(%22) : (index) -> i64
          %24 = "llvm.getelementptr"(%0, %23) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %25 = "llvm.bitcast"(%24) : (!llvm.ptr) -> !llvm.ptr
          %26 = "builtin.unrealized_conversion_cast"(%25) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%17, %26) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %27 = "llvm.bitcast"(%15) : (!llvm.ptr<6>) -> !llvm.ptr<5>
          %28 = "llvm.addrspacecast"(%27) : (!llvm.ptr<5>) -> !llvm.ptr
          %29 = "llvm.load"(%28) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %30 = "emitc.mul"(%29, %4) : (f32, f32) -> f32
          %31 = "emitc.div"(%29, %2) : (f32, f32) -> f32
          %32 = "func.call"(%31) <{callee = @__nv_erff}> : (f32) -> f32
          %33 = "emitc.add"(%32, %3) : (f32, f32) -> f32
          %34 = "emitc.mul"(%30, %33) : (f32, f32) -> f32
          "llvm.store"(%34, %28) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %35 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
          %36 = "llvm.load"(%35) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %37 = "emitc.mul"(%36, %4) : (f32, f32) -> f32
          %38 = "emitc.div"(%36, %2) : (f32, f32) -> f32
          %39 = "func.call"(%38) <{callee = @__nv_erff}> : (f32) -> f32
          %40 = "emitc.add"(%39, %3) : (f32, f32) -> f32
          %41 = "emitc.mul"(%37, %40) : (f32, f32) -> f32
          "llvm.store"(%41, %35) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %42 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
          %43 = "llvm.load"(%42) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %44 = "emitc.mul"(%43, %4) : (f32, f32) -> f32
          %45 = "emitc.div"(%43, %2) : (f32, f32) -> f32
          %46 = "func.call"(%45) <{callee = @__nv_erff}> : (f32) -> f32
          %47 = "emitc.add"(%46, %3) : (f32, f32) -> f32
          %48 = "emitc.mul"(%44, %47) : (f32, f32) -> f32
          "llvm.store"(%48, %42) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %49 = "llvm.getelementptr"(%28) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
          %50 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %51 = "emitc.mul"(%50, %4) : (f32, f32) -> f32
          %52 = "emitc.div"(%50, %2) : (f32, f32) -> f32
          %53 = "func.call"(%52) <{callee = @__nv_erff}> : (f32) -> f32
          %54 = "emitc.add"(%53, %3) : (f32, f32) -> f32
          %55 = "emitc.mul"(%51, %54) : (f32, f32) -> f32
          "llvm.store"(%55, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %56 = "llvm.getelementptr"(%1, %23) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %57 = "llvm.bitcast"(%56) : (!llvm.ptr) -> !llvm.ptr
          %58 = "builtin.unrealized_conversion_cast"(%57) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %59 = "func.call"(%58, %17) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22gelu_kernel_vectorizedPK6float4PS_m_0"} : () -> ()
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64, %arg3: i64):
      %0 = "arith.constant"() <{value = 1.41421354 : f32}> : () -> f32
      %1 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %2 = "arith.constant"() <{value = 5.000000e-01 : f32}> : () -> f32
      %3 = "arith.constant"() <{value = 0 : index}> : () -> index
      %4 = "arith.constant"() <{value = 1 : index}> : () -> index
      %5 = "arith.constant"() <{value = 32 : index}> : () -> index
      %6 = "npu.block_id"() : () -> i64
      %7 = "emitc.cast"(%6) : (i64) -> i32
      %8 = "arith.constant"() <{value = 32 : index}> : () -> index
      %9 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %10 = "arith.muli"(%7, %9) : (i32, i32) -> i32
      %11 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%3, %5, %11) ({
      ^bb0(%arg4: index):
        %12 = "builtin.unrealized_conversion_cast"(%arg4) : (index) -> i64
        %13 = "emitc.cast"(%12) : (i64) -> i32
        %14 = "arith.addi"(%10, %13) : (i32, i32) -> i32
        %15 = "emitc.cast"(%14) : (i32) -> index
        %16 = "emitc.cast"(%14) : (i32) -> i64
        %17 = "arith.addi"(%16, %arg2) : (i64, i64) -> i64
        %18 = "arith.cmpi"(%17, %arg3) <{predicate = 2 : i64}> : (i64, i64) -> i1
        "scf.if"(%18) ({
          %19 = "memref.load"(%arg0, %15) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %20 = "emitc.mul"(%19, %2) : (f32, f32) -> f32
          %21 = "emitc.div"(%19, %0) : (f32, f32) -> f32
          %22 = "func.call"(%21) <{callee = @__nv_erff}> : (f32) -> f32
          %23 = "emitc.add"(%22, %1) : (f32, f32) -> f32
          %24 = "emitc.mul"(%20, %23) : (f32, f32) -> f32
          "memref.store"(%24, %arg1, %15) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }, {
        }) : (i1) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (f32) -> f32, sym_name = "__nv_erff", sym_visibility = "private"}> ({
    }) {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z21gelu_kernel_remainderPKfPfmm_1"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
