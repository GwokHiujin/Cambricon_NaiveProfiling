warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z37__device_stub__selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z22selu_kernel_vectorizedPKfPfm(%arg0, %arg1, %arg2) : (memref<?xf32>, memref<?xf32>, i64) -> ()
    return
  }
  func.func private @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c-4_i64 = arith.constant -4 : i64
    %c2_i64 = arith.constant 2 : i64
    %c4_i64 = arith.constant 4 : i64
    %alloca = memref.alloca() : memref<1xf32>
    %cast = memref.cast %alloca : memref<1xf32> to memref<?xf32>
    %0 = llvm.mlir.undef : f32
    affine.store %0, %alloca[0] : memref<1xf32>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  x
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.thread_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.extui %8 : i32 to i64
    %10 = gpu.block_dim  x
    %11 = arith.index_cast %10 : index to i32
    %12 = gpu.grid_dim  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %11, %13 : i32
    %15 = arith.extui %14 : i32 to i64
    %16 = arith.muli %15, %c4_i64 : i64
    %17 = arith.muli %9, %c4_i64 : i64
    %18 = arith.andi %arg2, %c-4_i64 : i64
    %19 = arith.index_cast %18 : i64 to index
    %20 = arith.index_cast %17 : i64 to index
    %21 = arith.index_cast %16 : i64 to index
    %22 = arith.index_cast %16 : i64 to index
    %23 = arith.index_cast %17 : i64 to index
    %24 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %25 = "polygeist.pointer2memref"(%24) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %26 = "polygeist.memref2pointer"(%alloca_2) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %27 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %28 = "polygeist.pointer2memref"(%27) : (!llvm.ptr) -> memref<?xf32>
    %29 = "polygeist.memref2pointer"(%alloca_2) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %30 = llvm.getelementptr %29[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %31 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %32 = llvm.getelementptr %31[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %33 = "polygeist.pointer2memref"(%32) : (!llvm.ptr) -> memref<?xf32>
    %34 = "polygeist.memref2pointer"(%alloca_2) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %35 = llvm.getelementptr %34[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %36 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %37 = llvm.getelementptr %36[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %38 = "polygeist.pointer2memref"(%37) : (!llvm.ptr) -> memref<?xf32>
    %39 = "polygeist.memref2pointer"(%alloca_2) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %40 = llvm.getelementptr %39[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %41 = "polygeist.memref2pointer"(%alloca_0) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %42 = llvm.getelementptr %41[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %43 = "polygeist.pointer2memref"(%42) : (!llvm.ptr) -> memref<?xf32>
    %44 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %45 = "polygeist.pointer2memref"(%44) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %46 = arith.subi %19, %20 : index
    %47 = arith.subi %21, %c1 : index
    %48 = arith.addi %47, %46 : index
    %49 = arith.divui %48, %21 : index
    affine.for %arg3 = 0 to %49 {
      %61 = arith.muli %arg3, %21 : index
      %62 = arith.divui %61, %21 : index
      %63 = arith.muli %62, %22 : index
      %64 = arith.addi %23, %63 : index
      %65 = arith.index_cast %64 : index to i64
      %66 = arith.shrsi %65, %c2_i64 : i64
      %67 = arith.index_cast %66 : i64 to index
      %68 = "polygeist.subindex"(%25, %67) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast_3, %68) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %69 = llvm.load %26 : !llvm.ptr -> f32
      func.call @_Z15process_elementfRf(%69, %28) : (f32, memref<?xf32>) -> ()
      %70 = llvm.load %30 : !llvm.ptr -> f32
      func.call @_Z15process_elementfRf(%70, %33) : (f32, memref<?xf32>) -> ()
      %71 = llvm.load %35 : !llvm.ptr -> f32
      func.call @_Z15process_elementfRf(%71, %38) : (f32, memref<?xf32>) -> ()
      %72 = llvm.load %40 : !llvm.ptr -> f32
      func.call @_Z15process_elementfRf(%72, %43) : (f32, memref<?xf32>) -> ()
      %73 = arith.shrsi %65, %c2_i64 : i64
      %74 = arith.index_cast %73 : i64 to index
      %75 = "polygeist.subindex"(%45, %74) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %76 = func.call @_ZN6float4aSERKS_(%75, %cast_1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %50 = arith.andi %arg2, %c-4_i64 : i64
    %51 = arith.addi %50, %9 : i64
    %52 = arith.index_cast %arg2 : i64 to index
    %53 = arith.index_cast %51 : i64 to index
    %54 = arith.index_cast %15 : i64 to index
    %55 = arith.index_cast %15 : i64 to index
    %56 = arith.index_cast %51 : i64 to index
    %57 = arith.subi %52, %53 : index
    %58 = arith.subi %54, %c1 : index
    %59 = arith.addi %58, %57 : index
    %60 = arith.divui %59, %54 : index
    affine.for %arg3 = 0 to %60 {
      %61 = affine.load %arg0[%arg3 * symbol(%55) + symbol(%56)] : memref<?xf32>
      func.call @_Z15process_elementfRf(%61, %cast) : (f32, memref<?xf32>) -> ()
      %62 = affine.load %alloca[0] : memref<1xf32>
      affine.store %62, %arg1[%arg3 * symbol(%55) + symbol(%56)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_Z15process_elementfRf(%arg0: f32, %arg1: memref<?xf32>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.05070102 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.67326319 : f32
    %cst_2 = arith.constant 0.000000e+00 : f32
    %0 = arith.cmpf ogt, %arg0, %cst_2 : f32
    %1 = scf.if %0 -> (f32) {
      scf.yield %arg0 : f32
    } else {
      %4 = func.call @_Z6my_expf(%arg0) : (f32) -> f32
      %5 = arith.subf %4, %cst_0 : f32
      %6 = arith.mulf %5, %cst_1 : f32
      scf.yield %6 : f32
    }
    affine.store %1, %arg1[0] : memref<?xf32>
    %2 = affine.load %arg1[0] : memref<?xf32>
    %3 = arith.mulf %2, %cst : f32
    affine.store %3, %arg1[0] : memref<?xf32>
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %4 = llvm.getelementptr %3[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %6 = llvm.getelementptr %5[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    llvm.store %7, %4 : f32, !llvm.ptr
    %8 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %9 = llvm.getelementptr %8[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %11 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %12 = llvm.load %11 : !llvm.ptr -> f32
    llvm.store %12, %9 : f32, !llvm.ptr
    %13 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %14 = llvm.getelementptr %13[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %16 = llvm.getelementptr %15[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %17 = llvm.load %16 : !llvm.ptr -> f32
    llvm.store %17, %14 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
  func.func private @_Z6my_expf(%arg0: f32) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = math.exp %arg0 : f32
    return %0 : f32
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 1.67326319 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %cst_2 = arith.constant 1.05070102 : f32
    %c1 = arith.constant 1 : index
    %c-4_i64 = arith.constant -4 : i64
    %c2_i64 = arith.constant 2 : i64
    %c4_i64 = arith.constant 4 : i64
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_4 = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = gpu.grid_dim  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %3, %10 : i32
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.muli %12, %c4_i64 : i64
    %14 = arith.muli %8, %c4_i64 : i64
    %15 = arith.andi %arg2, %c-4_i64 : i64
    %16 = arith.index_cast %15 : i64 to index
    %17 = arith.index_cast %14 : i64 to index
    %18 = arith.index_cast %13 : i64 to index
    %19 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %21 = "polygeist.memref2pointer"(%alloca_3) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %22 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %29 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %30 = "polygeist.pointer2memref"(%29) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %31 = arith.subi %16, %17 : index
    %32 = arith.subi %18, %c1 : index
    %33 = arith.addi %32, %31 : index
    %34 = arith.divui %33, %18 : index
    affine.for %arg3 = 0 to %34 {
      %43 = arith.muli %arg3, %18 : index
      %44 = arith.addi %17, %43 : index
      %45 = arith.index_cast %44 : index to i64
      %46 = arith.shrsi %45, %c2_i64 : i64
      %47 = arith.index_cast %46 : i64 to index
      %48 = "polygeist.subindex"(%20, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast_4, %48) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %49 = llvm.load %21 : !llvm.ptr -> f32
      %50 = arith.cmpf ogt, %49, %cst : f32
      %51 = scf.if %50 -> (f32) {
        scf.yield %49 : f32
      } else {
        %71 = math.exp %49 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %51, %22 : f32, !llvm.ptr
      %52 = llvm.load %22 : !llvm.ptr -> f32
      %53 = arith.mulf %52, %cst_2 : f32
      llvm.store %53, %22 : f32, !llvm.ptr
      %54 = llvm.load %23 : !llvm.ptr -> f32
      %55 = arith.cmpf ogt, %54, %cst : f32
      %56 = scf.if %55 -> (f32) {
        scf.yield %54 : f32
      } else {
        %71 = math.exp %54 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %56, %24 : f32, !llvm.ptr
      %57 = llvm.load %24 : !llvm.ptr -> f32
      %58 = arith.mulf %57, %cst_2 : f32
      llvm.store %58, %24 : f32, !llvm.ptr
      %59 = llvm.load %25 : !llvm.ptr -> f32
      %60 = arith.cmpf ogt, %59, %cst : f32
      %61 = scf.if %60 -> (f32) {
        scf.yield %59 : f32
      } else {
        %71 = math.exp %59 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %61, %26 : f32, !llvm.ptr
      %62 = llvm.load %26 : !llvm.ptr -> f32
      %63 = arith.mulf %62, %cst_2 : f32
      llvm.store %63, %26 : f32, !llvm.ptr
      %64 = llvm.load %27 : !llvm.ptr -> f32
      %65 = arith.cmpf ogt, %64, %cst : f32
      %66 = scf.if %65 -> (f32) {
        scf.yield %64 : f32
      } else {
        %71 = math.exp %64 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %66, %28 : f32, !llvm.ptr
      %67 = llvm.load %28 : !llvm.ptr -> f32
      %68 = arith.mulf %67, %cst_2 : f32
      llvm.store %68, %28 : f32, !llvm.ptr
      %69 = "polygeist.subindex"(%30, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %70 = func.call @_ZN6float4aSERKS_(%69, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %35 = arith.addi %15, %8 : i64
    %36 = arith.index_cast %arg2 : i64 to index
    %37 = arith.index_cast %35 : i64 to index
    %38 = arith.index_cast %12 : i64 to index
    %39 = arith.subi %36, %37 : index
    %40 = arith.subi %38, %c1 : index
    %41 = arith.addi %40, %39 : index
    %42 = arith.divui %41, %38 : index
    affine.for %arg3 = 0 to %42 {
      %43 = affine.load %arg0[%arg3 * symbol(%38) + symbol(%37)] : memref<?xf32>
      %44 = arith.cmpf ogt, %43, %cst : f32
      %45 = scf.if %44 -> (f32) {
        scf.yield %43 : f32
      } else {
        %47 = math.exp %43 : f32
        %48 = arith.subf %47, %cst_1 : f32
        %49 = arith.mulf %48, %cst_0 : f32
        scf.yield %49 : f32
      }
      %46 = arith.mulf %45, %cst_2 : f32
      affine.store %46, %arg1[%arg3 * symbol(%38) + symbol(%37)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 1.67326319 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %cst_2 = arith.constant 1.05070102 : f32
    %c1 = arith.constant 1 : index
    %c-4_i64 = arith.constant -4 : i64
    %c2_i64 = arith.constant 2 : i64
    %c4_i64 = arith.constant 4 : i64
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast_4 = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.thread_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.addi %4, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = gpu.grid_dim  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %3, %10 : i32
    %12 = arith.extui %11 : i32 to i64
    %13 = arith.muli %12, %c4_i64 : i64
    %14 = arith.muli %8, %c4_i64 : i64
    %15 = arith.andi %arg2, %c-4_i64 : i64
    %16 = arith.index_cast %15 : i64 to index
    %17 = arith.index_cast %14 : i64 to index
    %18 = arith.index_cast %13 : i64 to index
    %19 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %21 = "polygeist.memref2pointer"(%alloca_3) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %22 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %24 = llvm.getelementptr %22[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %26 = llvm.getelementptr %22[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %28 = llvm.getelementptr %22[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %29 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %30 = "polygeist.pointer2memref"(%29) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %31 = arith.subi %16, %17 : index
    %32 = arith.subi %18, %c1 : index
    %33 = arith.addi %32, %31 : index
    %34 = arith.divui %33, %18 : index
    scf.for %arg3 = %c0 to %34 step %c1 {
      %43 = arith.muli %arg3, %18 : index
      %44 = arith.addi %17, %43 : index
      %45 = arith.index_cast %44 : index to i64
      %46 = arith.shrsi %45, %c2_i64 : i64
      %47 = arith.index_cast %46 : i64 to index
      %48 = "polygeist.subindex"(%20, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast_4, %48) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %49 = llvm.load %21 : !llvm.ptr -> f32
      %50 = arith.cmpf ogt, %49, %cst : f32
      %51 = scf.if %50 -> (f32) {
        scf.yield %49 : f32
      } else {
        %71 = math.exp %49 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %51, %22 : f32, !llvm.ptr
      %52 = llvm.load %22 : !llvm.ptr -> f32
      %53 = arith.mulf %52, %cst_2 : f32
      llvm.store %53, %22 : f32, !llvm.ptr
      %54 = llvm.load %23 : !llvm.ptr -> f32
      %55 = arith.cmpf ogt, %54, %cst : f32
      %56 = scf.if %55 -> (f32) {
        scf.yield %54 : f32
      } else {
        %71 = math.exp %54 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %56, %24 : f32, !llvm.ptr
      %57 = llvm.load %24 : !llvm.ptr -> f32
      %58 = arith.mulf %57, %cst_2 : f32
      llvm.store %58, %24 : f32, !llvm.ptr
      %59 = llvm.load %25 : !llvm.ptr -> f32
      %60 = arith.cmpf ogt, %59, %cst : f32
      %61 = scf.if %60 -> (f32) {
        scf.yield %59 : f32
      } else {
        %71 = math.exp %59 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %61, %26 : f32, !llvm.ptr
      %62 = llvm.load %26 : !llvm.ptr -> f32
      %63 = arith.mulf %62, %cst_2 : f32
      llvm.store %63, %26 : f32, !llvm.ptr
      %64 = llvm.load %27 : !llvm.ptr -> f32
      %65 = arith.cmpf ogt, %64, %cst : f32
      %66 = scf.if %65 -> (f32) {
        scf.yield %64 : f32
      } else {
        %71 = math.exp %64 : f32
        %72 = arith.subf %71, %cst_1 : f32
        %73 = arith.mulf %72, %cst_0 : f32
        scf.yield %73 : f32
      }
      llvm.store %66, %28 : f32, !llvm.ptr
      %67 = llvm.load %28 : !llvm.ptr -> f32
      %68 = arith.mulf %67, %cst_2 : f32
      llvm.store %68, %28 : f32, !llvm.ptr
      %69 = "polygeist.subindex"(%30, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %70 = func.call @_ZN6float4aSERKS_(%69, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %35 = arith.addi %15, %8 : i64
    %36 = arith.index_cast %arg2 : i64 to index
    %37 = arith.index_cast %35 : i64 to index
    %38 = arith.index_cast %12 : i64 to index
    %39 = arith.subi %36, %37 : index
    %40 = arith.subi %38, %c1 : index
    %41 = arith.addi %40, %39 : index
    %42 = arith.divui %41, %38 : index
    scf.for %arg3 = %c0 to %42 step %c1 {
      %43 = arith.muli %arg3, %38 : index
      %44 = arith.addi %43, %37 : index
      %45 = memref.load %arg0[%44] : memref<?xf32>
      %46 = arith.cmpf ogt, %45, %cst : f32
      %47 = scf.if %46 -> (f32) {
        scf.yield %45 : f32
      } else {
        %49 = math.exp %45 : f32
        %50 = arith.subf %49, %cst_1 : f32
        %51 = arith.mulf %50, %cst_0 : f32
        scf.yield %51 : f32
      }
      %48 = arith.mulf %47, %cst_2 : f32
      memref.store %48, %arg1[%44] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %cst = arith.constant 0.000000e+00 : f32
      %cst_1 = arith.constant 1.67326319 : f32
      %cst_2 = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 1.05070102 : f32
      %c1_4 = arith.constant 1 : index
      %c-4_i64 = arith.constant -4 : i64
      %c2_i64 = arith.constant 2 : i64
      %c4_i64 = arith.constant 4 : i64
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_5 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_6 = memref.cast %alloca_5 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg3 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.extui %6 : i32 to i64
      %8 = gpu.grid_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %3, %9 : i32
      %11 = arith.extui %10 : i32 to i64
      %12 = arith.muli %11, %c4_i64 : i64
      %13 = arith.muli %7, %c4_i64 : i64
      %14 = arith.andi %arg2, %c-4_i64 : i64
      %15 = arith.index_cast %14 : i64 to index
      %16 = arith.index_cast %13 : i64 to index
      %17 = arith.index_cast %12 : i64 to index
      %18 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %19 = "polygeist.pointer2memref"(%18) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %20 = "polygeist.memref2pointer"(%alloca_5) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %21 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %22 = llvm.getelementptr %20[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %24 = llvm.getelementptr %20[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %26 = llvm.getelementptr %20[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %28 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %29 = "polygeist.pointer2memref"(%28) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %30 = arith.subi %15, %16 : index
      %31 = arith.subi %17, %c1_4 : index
      %32 = arith.addi %31, %30 : index
      %33 = arith.divui %32, %17 : index
      scf.for %arg4 = %c0_0 to %33 step %c1_4 {
        %42 = arith.muli %arg4, %17 : index
        %43 = arith.addi %16, %42 : index
        %44 = arith.index_cast %43 : index to i64
        %45 = arith.shrsi %44, %c2_i64 : i64
        %46 = arith.index_cast %45 : i64 to index
        %47 = "polygeist.subindex"(%19, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_6, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %48 = llvm.load %20 : !llvm.ptr -> f32
        %49 = arith.cmpf ogt, %48, %cst : f32
        %50 = scf.if %49 -> (f32) {
          scf.yield %48 : f32
        } else {
          %70 = math.exp %48 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %50, %21 : f32, !llvm.ptr
        %51 = llvm.load %21 : !llvm.ptr -> f32
        %52 = arith.mulf %51, %cst_3 : f32
        llvm.store %52, %21 : f32, !llvm.ptr
        %53 = llvm.load %22 : !llvm.ptr -> f32
        %54 = arith.cmpf ogt, %53, %cst : f32
        %55 = scf.if %54 -> (f32) {
          scf.yield %53 : f32
        } else {
          %70 = math.exp %53 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %55, %23 : f32, !llvm.ptr
        %56 = llvm.load %23 : !llvm.ptr -> f32
        %57 = arith.mulf %56, %cst_3 : f32
        llvm.store %57, %23 : f32, !llvm.ptr
        %58 = llvm.load %24 : !llvm.ptr -> f32
        %59 = arith.cmpf ogt, %58, %cst : f32
        %60 = scf.if %59 -> (f32) {
          scf.yield %58 : f32
        } else {
          %70 = math.exp %58 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %60, %25 : f32, !llvm.ptr
        %61 = llvm.load %25 : !llvm.ptr -> f32
        %62 = arith.mulf %61, %cst_3 : f32
        llvm.store %62, %25 : f32, !llvm.ptr
        %63 = llvm.load %26 : !llvm.ptr -> f32
        %64 = arith.cmpf ogt, %63, %cst : f32
        %65 = scf.if %64 -> (f32) {
          scf.yield %63 : f32
        } else {
          %70 = math.exp %63 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %65, %27 : f32, !llvm.ptr
        %66 = llvm.load %27 : !llvm.ptr -> f32
        %67 = arith.mulf %66, %cst_3 : f32
        llvm.store %67, %27 : f32, !llvm.ptr
        %68 = "polygeist.subindex"(%29, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %69 = func.call @_ZN6float4aSERKS_(%68, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %34 = arith.addi %14, %7 : i64
      %35 = arith.index_cast %arg2 : i64 to index
      %36 = arith.index_cast %34 : i64 to index
      %37 = arith.index_cast %11 : i64 to index
      %38 = arith.subi %35, %36 : index
      %39 = arith.subi %37, %c1_4 : index
      %40 = arith.addi %39, %38 : index
      %41 = arith.divui %40, %37 : index
      scf.for %arg4 = %c0_0 to %41 step %c1_4 {
        %42 = arith.muli %arg4, %37 : index
        %43 = arith.addi %42, %36 : index
        %44 = memref.load %arg0[%43] : memref<?xf32>
        %45 = arith.cmpf ogt, %44, %cst : f32
        %46 = scf.if %45 -> (f32) {
          scf.yield %44 : f32
        } else {
          %48 = math.exp %44 : f32
          %49 = arith.subf %48, %cst_2 : f32
          %50 = arith.mulf %49, %cst_1 : f32
          scf.yield %50 : f32
        }
        %47 = arith.mulf %46, %cst_3 : f32
        memref.store %47, %arg1[%43] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %c0_0 = arith.constant 0 : index
      %cst = arith.constant 0.000000e+00 : f32
      %cst_1 = arith.constant 1.67326319 : f32
      %cst_2 = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 1.05070102 : f32
      %c1_4 = arith.constant 1 : index
      %c-4_i64 = arith.constant -4 : i64
      %c2_i64 = arith.constant 2 : i64
      %c4_i64 = arith.constant 4 : i64
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_5 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_6 = memref.cast %alloca_5 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = arith.index_cast %arg3 : index to i32
      %6 = arith.addi %4, %5 : i32
      %7 = arith.extui %6 : i32 to i64
      %8 = gpu.grid_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %3, %9 : i32
      %11 = arith.extui %10 : i32 to i64
      %12 = arith.muli %11, %c4_i64 : i64
      %13 = arith.muli %7, %c4_i64 : i64
      %14 = arith.andi %arg2, %c-4_i64 : i64
      %15 = arith.index_cast %14 : i64 to index
      %16 = arith.index_cast %13 : i64 to index
      %17 = arith.index_cast %12 : i64 to index
      %18 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %19 = "polygeist.pointer2memref"(%18) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %20 = "polygeist.memref2pointer"(%alloca_5) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %21 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %22 = llvm.getelementptr %20[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %23 = llvm.getelementptr %21[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %24 = llvm.getelementptr %20[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %25 = llvm.getelementptr %21[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %26 = llvm.getelementptr %20[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %27 = llvm.getelementptr %21[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %28 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %29 = "polygeist.pointer2memref"(%28) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %30 = arith.subi %15, %16 : index
      %31 = arith.subi %17, %c1_4 : index
      %32 = arith.addi %31, %30 : index
      %33 = arith.divui %32, %17 : index
      scf.for %arg4 = %c0_0 to %33 step %c1_4 {
        %42 = arith.muli %arg4, %17 : index
        %43 = arith.addi %16, %42 : index
        %44 = arith.index_cast %43 : index to i64
        %45 = arith.shrsi %44, %c2_i64 : i64
        %46 = arith.index_cast %45 : i64 to index
        %47 = "polygeist.subindex"(%19, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_6, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %48 = llvm.load %20 : !llvm.ptr -> f32
        %49 = arith.cmpf ogt, %48, %cst : f32
        %50 = scf.if %49 -> (f32) {
          scf.yield %48 : f32
        } else {
          %70 = math.exp %48 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %50, %21 : f32, !llvm.ptr
        %51 = llvm.load %21 : !llvm.ptr -> f32
        %52 = arith.mulf %51, %cst_3 : f32
        llvm.store %52, %21 : f32, !llvm.ptr
        %53 = llvm.load %22 : !llvm.ptr -> f32
        %54 = arith.cmpf ogt, %53, %cst : f32
        %55 = scf.if %54 -> (f32) {
          scf.yield %53 : f32
        } else {
          %70 = math.exp %53 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %55, %23 : f32, !llvm.ptr
        %56 = llvm.load %23 : !llvm.ptr -> f32
        %57 = arith.mulf %56, %cst_3 : f32
        llvm.store %57, %23 : f32, !llvm.ptr
        %58 = llvm.load %24 : !llvm.ptr -> f32
        %59 = arith.cmpf ogt, %58, %cst : f32
        %60 = scf.if %59 -> (f32) {
          scf.yield %58 : f32
        } else {
          %70 = math.exp %58 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %60, %25 : f32, !llvm.ptr
        %61 = llvm.load %25 : !llvm.ptr -> f32
        %62 = arith.mulf %61, %cst_3 : f32
        llvm.store %62, %25 : f32, !llvm.ptr
        %63 = llvm.load %26 : !llvm.ptr -> f32
        %64 = arith.cmpf ogt, %63, %cst : f32
        %65 = scf.if %64 -> (f32) {
          scf.yield %63 : f32
        } else {
          %70 = math.exp %63 : f32
          %71 = arith.subf %70, %cst_2 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %65, %27 : f32, !llvm.ptr
        %66 = llvm.load %27 : !llvm.ptr -> f32
        %67 = arith.mulf %66, %cst_3 : f32
        llvm.store %67, %27 : f32, !llvm.ptr
        %68 = "polygeist.subindex"(%29, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %69 = func.call @_ZN6float4aSERKS_(%68, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %34 = arith.addi %14, %7 : i64
      %35 = arith.index_cast %arg2 : i64 to index
      %36 = arith.index_cast %34 : i64 to index
      %37 = arith.index_cast %11 : i64 to index
      %38 = arith.subi %35, %36 : index
      %39 = arith.subi %37, %c1_4 : index
      %40 = arith.addi %39, %38 : index
      %41 = arith.divui %40, %37 : index
      scf.for %arg4 = %c0_0 to %41 step %c1_4 {
        %42 = arith.muli %arg4, %37 : index
        %43 = arith.addi %42, %36 : index
        %44 = memref.load %arg0[%43] : memref<?xf32>
        %45 = arith.cmpf ogt, %44, %cst : f32
        %46 = scf.if %45 -> (f32) {
          scf.yield %44 : f32
        } else {
          %48 = math.exp %44 : f32
          %49 = arith.subf %48, %cst_2 : f32
          %50 = arith.mulf %49, %cst_1 : f32
          scf.yield %50 : f32
        }
        %47 = arith.mulf %46, %cst_3 : f32
        memref.store %47, %arg1[%43] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c4_i64 = arith.constant 4 : i64
    %c2_i64 = arith.constant 2 : i64
    %c-4_i64 = arith.constant -4 : i64
    %cst = arith.constant 1.05070102 : f32
    %cst_0 = arith.constant 1.000000e+00 : f32
    %cst_1 = arith.constant 1.67326319 : f32
    %cst_2 = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = gpu.block_id  x
    %1 = arith.index_cast %0 : index to i32
    %2 = gpu.block_dim  x
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.muli %1, %3 : i32
    %5 = gpu.grid_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %3, %6 : i32
    %8 = arith.extui %7 : i32 to i64
    %9 = arith.muli %8, %c4_i64 : i64
    %10 = arith.andi %arg2, %c-4_i64 : i64
    %11 = arith.index_cast %10 : i64 to index
    %12 = arith.index_cast %9 : i64 to index
    %13 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %14 = "polygeist.pointer2memref"(%13) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %16 = "polygeist.pointer2memref"(%15) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %17 = arith.subi %12, %c1 : index
    %18 = arith.index_cast %arg2 : i64 to index
    %19 = arith.index_cast %8 : i64 to index
    %20 = arith.subi %19, %c1 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast_4 = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %21 = arith.index_cast %arg3 : index to i32
      %22 = arith.addi %4, %21 : i32
      %23 = arith.extui %22 : i32 to i64
      %24 = arith.muli %23, %c4_i64 : i64
      %25 = arith.index_cast %24 : i64 to index
      %26 = "polygeist.memref2pointer"(%alloca_3) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %27 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %28 = llvm.getelementptr %26[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %29 = llvm.getelementptr %27[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %30 = llvm.getelementptr %26[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %31 = llvm.getelementptr %27[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %32 = llvm.getelementptr %26[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %33 = llvm.getelementptr %27[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %34 = arith.subi %11, %25 : index
      %35 = arith.addi %17, %34 : index
      %36 = arith.divui %35, %12 : index
      scf.for %arg4 = %c0 to %36 step %c1 {
        %42 = arith.muli %arg4, %12 : index
        %43 = arith.addi %25, %42 : index
        %44 = arith.index_cast %43 : index to i64
        %45 = arith.shrsi %44, %c2_i64 : i64
        %46 = arith.index_cast %45 : i64 to index
        %47 = "polygeist.subindex"(%14, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast_4, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %48 = llvm.load %26 : !llvm.ptr -> f32
        %49 = arith.cmpf ogt, %48, %cst_2 : f32
        %50 = scf.if %49 -> (f32) {
          scf.yield %48 : f32
        } else {
          %70 = math.exp %48 : f32
          %71 = arith.subf %70, %cst_0 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %50, %27 : f32, !llvm.ptr
        %51 = llvm.load %27 : !llvm.ptr -> f32
        %52 = arith.mulf %51, %cst : f32
        llvm.store %52, %27 : f32, !llvm.ptr
        %53 = llvm.load %28 : !llvm.ptr -> f32
        %54 = arith.cmpf ogt, %53, %cst_2 : f32
        %55 = scf.if %54 -> (f32) {
          scf.yield %53 : f32
        } else {
          %70 = math.exp %53 : f32
          %71 = arith.subf %70, %cst_0 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %55, %29 : f32, !llvm.ptr
        %56 = llvm.load %29 : !llvm.ptr -> f32
        %57 = arith.mulf %56, %cst : f32
        llvm.store %57, %29 : f32, !llvm.ptr
        %58 = llvm.load %30 : !llvm.ptr -> f32
        %59 = arith.cmpf ogt, %58, %cst_2 : f32
        %60 = scf.if %59 -> (f32) {
          scf.yield %58 : f32
        } else {
          %70 = math.exp %58 : f32
          %71 = arith.subf %70, %cst_0 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %60, %31 : f32, !llvm.ptr
        %61 = llvm.load %31 : !llvm.ptr -> f32
        %62 = arith.mulf %61, %cst : f32
        llvm.store %62, %31 : f32, !llvm.ptr
        %63 = llvm.load %32 : !llvm.ptr -> f32
        %64 = arith.cmpf ogt, %63, %cst_2 : f32
        %65 = scf.if %64 -> (f32) {
          scf.yield %63 : f32
        } else {
          %70 = math.exp %63 : f32
          %71 = arith.subf %70, %cst_0 : f32
          %72 = arith.mulf %71, %cst_1 : f32
          scf.yield %72 : f32
        }
        llvm.store %65, %33 : f32, !llvm.ptr
        %66 = llvm.load %33 : !llvm.ptr -> f32
        %67 = arith.mulf %66, %cst : f32
        llvm.store %67, %33 : f32, !llvm.ptr
        %68 = "polygeist.subindex"(%16, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %69 = func.call @_ZN6float4aSERKS_(%68, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %37 = arith.addi %10, %23 : i64
      %38 = arith.index_cast %37 : i64 to index
      %39 = arith.subi %18, %38 : index
      %40 = arith.addi %20, %39 : index
      %41 = arith.divui %40, %19 : index
      scf.for %arg4 = %c0 to %41 step %c1 {
        %42 = arith.muli %arg4, %19 : index
        %43 = arith.addi %42, %38 : index
        %44 = memref.load %arg0[%43] : memref<?xf32>
        %45 = arith.cmpf ogt, %44, %cst_2 : f32
        %46 = scf.if %45 -> (f32) {
          scf.yield %44 : f32
        } else {
          %48 = math.exp %44 : f32
          %49 = arith.subf %48, %cst_0 : f32
          %50 = arith.mulf %49, %cst_1 : f32
          scf.yield %50 : f32
        }
        %47 = arith.mulf %46, %cst : f32
        memref.store %47, %arg1[%43] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z22selu_kernel_vectorizedPKfPfm_0 {
    gpu.func @_Z22selu_kernel_vectorizedPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) {
      %c4_i64 = arith.constant 4 : i64
      %c2_i64 = arith.constant 2 : i64
      %c-4_i64 = arith.constant -4 : i64
      %cst = arith.constant 1.05070102 : f32
      %cst_0 = arith.constant 1.000000e+00 : f32
      %cst_1 = arith.constant 1.67326319 : f32
      %cst_2 = arith.constant 0.000000e+00 : f32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = gpu.block_id  x
      %1 = arith.index_cast %0 : index to i32
      %2 = gpu.block_dim  x
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.muli %1, %3 : i32
      %5 = gpu.grid_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %3, %6 : i32
      %8 = arith.extui %7 : i32 to i64
      %9 = arith.muli %8, %c4_i64 : i64
      %10 = arith.andi %arg2, %c-4_i64 : i64
      %11 = arith.index_cast %10 : i64 to index
      %12 = arith.index_cast %9 : i64 to index
      %13 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %14 = "polygeist.pointer2memref"(%13) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %16 = "polygeist.pointer2memref"(%15) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %17 = arith.subi %12, %c1 : index
      %18 = arith.index_cast %arg2 : i64 to index
      %19 = arith.index_cast %8 : i64 to index
      %20 = arith.subi %19, %c1 : index
      scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
        %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %cast_4 = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %21 = arith.index_cast %arg3 : index to i32
        %22 = arith.addi %4, %21 : i32
        %23 = arith.extui %22 : i32 to i64
        %24 = arith.muli %23, %c4_i64 : i64
        %25 = arith.index_cast %24 : i64 to index
        %26 = "polygeist.memref2pointer"(%alloca_3) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %27 = "polygeist.memref2pointer"(%alloca) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %28 = llvm.getelementptr %26[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %29 = llvm.getelementptr %27[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %30 = llvm.getelementptr %26[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %31 = llvm.getelementptr %27[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %32 = llvm.getelementptr %26[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %33 = llvm.getelementptr %27[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
        %34 = arith.subi %11, %25 : index
        %35 = arith.addi %17, %34 : index
        %36 = arith.divui %35, %12 : index
        scf.for %arg4 = %c0 to %36 step %c1 {
          %42 = arith.muli %arg4, %12 : index
          %43 = arith.addi %25, %42 : index
          %44 = arith.index_cast %43 : index to i64
          %45 = arith.shrsi %44, %c2_i64 : i64
          %46 = arith.index_cast %45 : i64 to index
          %47 = "polygeist.subindex"(%14, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast_4, %47) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %48 = llvm.load %26 : !llvm.ptr -> f32
          %49 = arith.cmpf ogt, %48, %cst_2 : f32
          %50 = scf.if %49 -> (f32) {
            scf.yield %48 : f32
          } else {
            %70 = math.exp %48 : f32
            %71 = arith.subf %70, %cst_0 : f32
            %72 = arith.mulf %71, %cst_1 : f32
            scf.yield %72 : f32
          }
          llvm.store %50, %27 : f32, !llvm.ptr
          %51 = llvm.load %27 : !llvm.ptr -> f32
          %52 = arith.mulf %51, %cst : f32
          llvm.store %52, %27 : f32, !llvm.ptr
          %53 = llvm.load %28 : !llvm.ptr -> f32
          %54 = arith.cmpf ogt, %53, %cst_2 : f32
          %55 = scf.if %54 -> (f32) {
            scf.yield %53 : f32
          } else {
            %70 = math.exp %53 : f32
            %71 = arith.subf %70, %cst_0 : f32
            %72 = arith.mulf %71, %cst_1 : f32
            scf.yield %72 : f32
          }
          llvm.store %55, %29 : f32, !llvm.ptr
          %56 = llvm.load %29 : !llvm.ptr -> f32
          %57 = arith.mulf %56, %cst : f32
          llvm.store %57, %29 : f32, !llvm.ptr
          %58 = llvm.load %30 : !llvm.ptr -> f32
          %59 = arith.cmpf ogt, %58, %cst_2 : f32
          %60 = scf.if %59 -> (f32) {
            scf.yield %58 : f32
          } else {
            %70 = math.exp %58 : f32
            %71 = arith.subf %70, %cst_0 : f32
            %72 = arith.mulf %71, %cst_1 : f32
            scf.yield %72 : f32
          }
          llvm.store %60, %31 : f32, !llvm.ptr
          %61 = llvm.load %31 : !llvm.ptr -> f32
          %62 = arith.mulf %61, %cst : f32
          llvm.store %62, %31 : f32, !llvm.ptr
          %63 = llvm.load %32 : !llvm.ptr -> f32
          %64 = arith.cmpf ogt, %63, %cst_2 : f32
          %65 = scf.if %64 -> (f32) {
            scf.yield %63 : f32
          } else {
            %70 = math.exp %63 : f32
            %71 = arith.subf %70, %cst_0 : f32
            %72 = arith.mulf %71, %cst_1 : f32
            scf.yield %72 : f32
          }
          llvm.store %65, %33 : f32, !llvm.ptr
          %66 = llvm.load %33 : !llvm.ptr -> f32
          %67 = arith.mulf %66, %cst : f32
          llvm.store %67, %33 : f32, !llvm.ptr
          %68 = "polygeist.subindex"(%16, %46) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %69 = func.call @_ZN6float4aSERKS_(%68, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
        %37 = arith.addi %10, %23 : i64
        %38 = arith.index_cast %37 : i64 to index
        %39 = arith.subi %18, %38 : index
        %40 = arith.addi %20, %39 : index
        %41 = arith.divui %40, %19 : index
        scf.for %arg4 = %c0 to %41 step %c1 {
          %42 = arith.muli %arg4, %19 : index
          %43 = arith.addi %42, %38 : index
          %44 = memref.load %arg0[%43] : memref<?xf32>
          %45 = arith.cmpf ogt, %44, %cst_2 : f32
          %46 = scf.if %45 -> (f32) {
            scf.yield %44 : f32
          } else {
            %48 = math.exp %44 : f32
            %49 = arith.subf %48, %cst_0 : f32
            %50 = arith.mulf %49, %cst_1 : f32
            scf.yield %50 : f32
          }
          %47 = arith.mulf %46, %cst : f32
          memref.store %47, %arg1[%43] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = llvm.load %0 : !llvm.ptr -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      llvm.store %1, %2 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.load %3 : !llvm.ptr -> f32
      %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %4, %5 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.load %6 : !llvm.ptr -> f32
      %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %7, %8 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.load %9 : !llvm.ptr -> f32
      %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %10, %11 : f32, !llvm.ptr
      return
    }
    func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = llvm.load %1 : !llvm.ptr -> f32
      llvm.store %2, %0 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %5 = llvm.load %4 : !llvm.ptr -> f32
      llvm.store %5, %3 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %8 = llvm.load %7 : !llvm.ptr -> f32
      llvm.store %8, %6 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %11 = llvm.load %10 : !llvm.ptr -> f32
      llvm.store %11, %9 : f32, !llvm.ptr
      return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.grid_dim with npu.block_num

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "arith.constant"() <{value = 4 : i64}> : () -> i64
      %1 = "arith.constant"() <{value = 2 : i64}> : () -> i64
      %2 = "arith.constant"() <{value = -4 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 1.05070102 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %5 = "arith.constant"() <{value = 1.67326319 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 0 : index}> : () -> index
      %8 = "arith.constant"() <{value = 1 : index}> : () -> index
      %9 = "arith.constant"() <{value = 32 : index}> : () -> index
      %10 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %11 = "arith.index_cast"(%10) : (index) -> i32
      %12 = "arith.constant"() <{value = 32 : index}> : () -> index
      %13 = "arith.index_cast"(%12) : (index) -> i32
      %14 = "arith.muli"(%11, %13) : (i32, i32) -> i32
      %15 = "npu.block_num"() : () -> i64
      %16 = "arith.index_cast"(%15) : (i64) -> i32
      %17 = "arith.muli"(%13, %16) : (i32, i32) -> i32
      %18 = "arith.extui"(%17) : (i32) -> i64
      %19 = "arith.muli"(%18, %0) : (i64, i64) -> i64
      %20 = "arith.andi"(%arg2, %2) : (i64, i64) -> i64
      %21 = "arith.index_cast"(%20) : (i64) -> index
      %22 = "arith.index_cast"(%19) : (i64) -> index
      %23 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %24 = "polygeist.pointer2memref"(%23) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %25 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %26 = "polygeist.pointer2memref"(%25) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %27 = "arith.subi"(%22, %8) : (index, index) -> index
      %28 = "arith.index_cast"(%arg2) : (i64) -> index
      %29 = "arith.index_cast"(%18) : (i64) -> index
      %30 = "arith.subi"(%29, %8) : (index, index) -> index
      %31 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%7, %9, %31) ({
      ^bb0(%arg3: index):
        %32 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %33 = "memref.cast"(%32) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %34 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %35 = "memref.cast"(%34) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %36 = "arith.index_cast"(%arg3) : (index) -> i32
        %37 = "arith.addi"(%14, %36) : (i32, i32) -> i32
        %38 = "arith.extui"(%37) : (i32) -> i64
        %39 = "arith.muli"(%38, %0) : (i64, i64) -> i64
        %40 = "arith.index_cast"(%39) : (i64) -> index
        %41 = "polygeist.memref2pointer"(%34) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %42 = "polygeist.memref2pointer"(%32) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
        %43 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %44 = "llvm.getelementptr"(%42) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %45 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %46 = "llvm.getelementptr"(%42) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %47 = "llvm.getelementptr"(%41) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %48 = "llvm.getelementptr"(%42) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %49 = "arith.subi"(%21, %40) : (index, index) -> index
        %50 = "arith.addi"(%27, %49) : (index, index) -> index
        %51 = "arith.divui"(%50, %22) : (index, index) -> index
        "scf.for"(%7, %51, %8) ({
        ^bb0(%arg4: index):
          %57 = "arith.muli"(%arg4, %22) : (index, index) -> index
          %58 = "arith.addi"(%40, %57) : (index, index) -> index
          %59 = "arith.index_cast"(%58) : (index) -> i64
          %60 = "arith.shrsi"(%59, %1) : (i64, i64) -> i64
          %61 = "arith.index_cast"(%60) : (i64) -> index
          %62 = "polygeist.subindex"(%24, %61) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%35, %62) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %63 = "llvm.load"(%41) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %64 = "arith.cmpf"(%63, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %65 = "scf.if"(%64) ({
            "scf.yield"(%63) : (f32) -> ()
          }, {
            %85 = "math.exp"(%63) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %86 = "arith.subf"(%85, %4) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %87 = "arith.mulf"(%86, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%87) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%65, %42) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %66 = "llvm.load"(%42) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %67 = "arith.mulf"(%66, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%67, %42) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %68 = "llvm.load"(%43) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %69 = "arith.cmpf"(%68, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %70 = "scf.if"(%69) ({
            "scf.yield"(%68) : (f32) -> ()
          }, {
            %85 = "math.exp"(%68) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %86 = "arith.subf"(%85, %4) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %87 = "arith.mulf"(%86, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%87) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%70, %44) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %71 = "llvm.load"(%44) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %72 = "arith.mulf"(%71, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%72, %44) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %73 = "llvm.load"(%45) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %74 = "arith.cmpf"(%73, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %75 = "scf.if"(%74) ({
            "scf.yield"(%73) : (f32) -> ()
          }, {
            %85 = "math.exp"(%73) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %86 = "arith.subf"(%85, %4) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %87 = "arith.mulf"(%86, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%87) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%75, %46) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %76 = "llvm.load"(%46) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %77 = "arith.mulf"(%76, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%77, %46) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %78 = "llvm.load"(%47) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %79 = "arith.cmpf"(%78, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %80 = "scf.if"(%79) ({
            "scf.yield"(%78) : (f32) -> ()
          }, {
            %85 = "math.exp"(%78) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %86 = "arith.subf"(%85, %4) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %87 = "arith.mulf"(%86, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%87) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%80, %48) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %81 = "llvm.load"(%48) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %82 = "arith.mulf"(%81, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%82, %48) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %83 = "polygeist.subindex"(%26, %61) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %84 = "func.call"(%83, %33) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %52 = "arith.addi"(%20, %38) : (i64, i64) -> i64
        %53 = "arith.index_cast"(%52) : (i64) -> index
        %54 = "arith.subi"(%28, %53) : (index, index) -> index
        %55 = "arith.addi"(%30, %54) : (index, index) -> index
        %56 = "arith.divui"(%55, %29) : (index, index) -> index
        "scf.for"(%7, %56, %8) ({
        ^bb0(%arg4: index):
          %57 = "arith.muli"(%arg4, %29) : (index, index) -> index
          %58 = "arith.addi"(%57, %53) : (index, index) -> index
          %59 = "memref.load"(%arg0, %58) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %60 = "arith.cmpf"(%59, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %61 = "scf.if"(%60) ({
            "scf.yield"(%59) : (f32) -> ()
          }, {
            %63 = "math.exp"(%59) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %64 = "arith.subf"(%63, %4) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %65 = "arith.mulf"(%64, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%65) : (f32) -> ()
          }) : (i1) -> f32
          %62 = "arith.mulf"(%61, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "memref.store"(%62, %arg1, %58) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%10 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%12 = "arith.index_cast"(%11) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = "arith.index_cast"(%18) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%22 = "arith.extui"(%21) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%26 = "arith.index_cast"(%25) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%28 = "arith.index_cast"(%24) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%41 = "arith.index_cast"(%arg2) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%43 = "arith.index_cast"(%25) : (i64) -> index
[ict-debug] MemRefAllocaToNPULowering: process op: 

%47 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%47 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 4 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 2 : i64}> : () -> i64
      %4 = "arith.constant"() <{value = -4 : i64}> : () -> i64
      %5 = "arith.constant"() <{value = 1.05070102 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 1.67326319 : f32}> : () -> f32
      %8 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %9 = "arith.constant"() <{value = 0 : index}> : () -> index
      %10 = "arith.constant"() <{value = 1 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "npu.block_id"() : () -> i64
      %13 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %14 = "emitc.cast"(%12) : (i64) -> i32
      %15 = "arith.index_cast"(%13) : (index) -> i32
      %16 = "arith.constant"() <{value = 32 : index}> : () -> index
      %17 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %18 = "arith.index_cast"(%16) : (index) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "npu.block_num"() : () -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.index_cast"(%20) : (i64) -> i32
      %23 = "arith.muli"(%18, %22) : (i32, i32) -> i32
      %24 = "emitc.cast"(%23) : (i32) -> i64
      %25 = "arith.extui"(%23) : (i32) -> i64
      %26 = "arith.muli"(%25, %2) : (i64, i64) -> i64
      %27 = "arith.andi"(%arg2, %4) : (i64, i64) -> i64
      %28 = "emitc.cast"(%27) : (i64) -> index
      %29 = "arith.index_cast"(%27) : (i64) -> index
      %30 = "emitc.cast"(%26) : (i64) -> index
      %31 = "arith.index_cast"(%26) : (i64) -> index
      %32 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %33 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %34 = "llvm.bitcast"(%32) : (!llvm.ptr) -> !llvm.ptr
      %35 = "polygeist.pointer2memref"(%33) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %36 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %37 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %38 = "llvm.bitcast"(%36) : (!llvm.ptr) -> !llvm.ptr
      %39 = "polygeist.pointer2memref"(%37) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %40 = "arith.subi"(%31, %10) : (index, index) -> index
      %41 = "emitc.cast"(%arg2) : (i64) -> index
      %42 = "arith.index_cast"(%arg2) : (i64) -> index
      %43 = "emitc.cast"(%24) : (i64) -> index
      %44 = "arith.index_cast"(%25) : (i64) -> index
      %45 = "arith.subi"(%44, %10) : (index, index) -> index
      %46 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%9, %11, %46) ({
      ^bb0(%arg3: index):
        %47 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %49 = "memref.cast"(%48) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %50 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %51 = "memref.cast"(%50) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %52 = "arith.index_cast"(%arg3) : (index) -> i32
        %53 = "arith.addi"(%19, %52) : (i32, i32) -> i32
        %54 = "arith.extui"(%53) : (i32) -> i64
        %55 = "arith.muli"(%54, %2) : (i64, i64) -> i64
        %56 = "arith.index_cast"(%55) : (i64) -> index
        %57 = "polygeist.memref2pointer"(%50) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
        %58 = "polygeist.memref2pointer"(%48) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
        %59 = "llvm.getelementptr"(%57) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %60 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %61 = "llvm.getelementptr"(%57) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %62 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %63 = "llvm.getelementptr"(%57) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %64 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %65 = "arith.subi"(%29, %56) : (index, index) -> index
        %66 = "arith.addi"(%40, %65) : (index, index) -> index
        %67 = "arith.divui"(%66, %31) : (index, index) -> index
        "scf.for"(%9, %67, %10) ({
        ^bb0(%arg4: index):
          %73 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %74 = "arith.addi"(%56, %73) : (index, index) -> index
          %75 = "arith.index_cast"(%74) : (index) -> i64
          %76 = "arith.shrsi"(%75, %3) : (i64, i64) -> i64
          %77 = "arith.index_cast"(%76) : (i64) -> index
          %78 = "polygeist.subindex"(%35, %77) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%51, %78) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %79 = "llvm.load"(%57) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %80 = "arith.cmpf"(%79, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %81 = "scf.if"(%80) ({
            "scf.yield"(%79) : (f32) -> ()
          }, {
            %101 = "math.exp"(%79) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %102 = "arith.subf"(%101, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %103 = "arith.mulf"(%102, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%103) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%81, %58) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %82 = "llvm.load"(%58) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %83 = "arith.mulf"(%82, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%83, %58) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %84 = "llvm.load"(%59) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %85 = "arith.cmpf"(%84, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %86 = "scf.if"(%85) ({
            "scf.yield"(%84) : (f32) -> ()
          }, {
            %101 = "math.exp"(%84) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %102 = "arith.subf"(%101, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %103 = "arith.mulf"(%102, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%103) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%86, %60) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %87 = "llvm.load"(%60) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %88 = "arith.mulf"(%87, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%88, %60) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %89 = "llvm.load"(%61) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %90 = "arith.cmpf"(%89, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %91 = "scf.if"(%90) ({
            "scf.yield"(%89) : (f32) -> ()
          }, {
            %101 = "math.exp"(%89) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %102 = "arith.subf"(%101, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %103 = "arith.mulf"(%102, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%103) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%91, %62) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %92 = "llvm.load"(%62) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %93 = "arith.mulf"(%92, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%93, %62) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %94 = "llvm.load"(%63) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %95 = "arith.cmpf"(%94, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %96 = "scf.if"(%95) ({
            "scf.yield"(%94) : (f32) -> ()
          }, {
            %101 = "math.exp"(%94) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %102 = "arith.subf"(%101, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %103 = "arith.mulf"(%102, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%103) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%96, %64) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %97 = "llvm.load"(%64) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %98 = "arith.mulf"(%97, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%98, %64) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %99 = "polygeist.subindex"(%39, %77) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %100 = "func.call"(%99, %49) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %68 = "arith.addi"(%27, %54) : (i64, i64) -> i64
        %69 = "arith.index_cast"(%68) : (i64) -> index
        %70 = "arith.subi"(%42, %69) : (index, index) -> index
        %71 = "arith.addi"(%45, %70) : (index, index) -> index
        %72 = "arith.divui"(%71, %44) : (index, index) -> index
        "scf.for"(%9, %72, %10) ({
        ^bb0(%arg4: index):
          %73 = "arith.muli"(%arg4, %44) : (index, index) -> index
          %74 = "arith.addi"(%73, %69) : (index, index) -> index
          %75 = "memref.load"(%arg0, %74) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %76 = "arith.cmpf"(%75, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %77 = "scf.if"(%76) ({
            "scf.yield"(%75) : (f32) -> ()
          }, {
            %79 = "math.exp"(%75) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %80 = "arith.subf"(%79, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %81 = "arith.mulf"(%80, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%81) : (f32) -> ()
          }) : (i1) -> f32
          %78 = "arith.mulf"(%77, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "memref.store"(%78, %arg1, %74) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%50 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%50 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%51 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 4 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 2 : i64}> : () -> i64
      %4 = "arith.constant"() <{value = -4 : i64}> : () -> i64
      %5 = "arith.constant"() <{value = 1.05070102 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 1.67326319 : f32}> : () -> f32
      %8 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %9 = "arith.constant"() <{value = 0 : index}> : () -> index
      %10 = "arith.constant"() <{value = 1 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "npu.block_id"() : () -> i64
      %13 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %14 = "emitc.cast"(%12) : (i64) -> i32
      %15 = "arith.index_cast"(%13) : (index) -> i32
      %16 = "arith.constant"() <{value = 32 : index}> : () -> index
      %17 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %18 = "arith.index_cast"(%16) : (index) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "npu.block_num"() : () -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.index_cast"(%20) : (i64) -> i32
      %23 = "arith.muli"(%18, %22) : (i32, i32) -> i32
      %24 = "emitc.cast"(%23) : (i32) -> i64
      %25 = "arith.extui"(%23) : (i32) -> i64
      %26 = "arith.muli"(%25, %2) : (i64, i64) -> i64
      %27 = "arith.andi"(%arg2, %4) : (i64, i64) -> i64
      %28 = "emitc.cast"(%27) : (i64) -> index
      %29 = "arith.index_cast"(%27) : (i64) -> index
      %30 = "emitc.cast"(%26) : (i64) -> index
      %31 = "arith.index_cast"(%26) : (i64) -> index
      %32 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %33 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %34 = "llvm.bitcast"(%32) : (!llvm.ptr) -> !llvm.ptr
      %35 = "polygeist.pointer2memref"(%33) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %36 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %37 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %38 = "llvm.bitcast"(%36) : (!llvm.ptr) -> !llvm.ptr
      %39 = "polygeist.pointer2memref"(%37) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %40 = "arith.subi"(%31, %10) : (index, index) -> index
      %41 = "emitc.cast"(%arg2) : (i64) -> index
      %42 = "arith.index_cast"(%arg2) : (i64) -> index
      %43 = "emitc.cast"(%24) : (i64) -> index
      %44 = "arith.index_cast"(%25) : (i64) -> index
      %45 = "arith.subi"(%44, %10) : (index, index) -> index
      %46 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%9, %11, %46) ({
      ^bb0(%arg3: index):
        %47 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %49 = "memref.cast"(%48) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %50 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %51 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %52 = "memref.cast"(%51) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %53 = "arith.index_cast"(%arg3) : (index) -> i32
        %54 = "arith.addi"(%19, %53) : (i32, i32) -> i32
        %55 = "arith.extui"(%54) : (i32) -> i64
        %56 = "arith.muli"(%55, %2) : (i64, i64) -> i64
        %57 = "arith.index_cast"(%56) : (i64) -> index
        %58 = "polygeist.memref2pointer"(%51) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
        %59 = "polygeist.memref2pointer"(%48) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> !llvm.ptr
        %60 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %61 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %62 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %63 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %64 = "llvm.getelementptr"(%58) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %65 = "llvm.getelementptr"(%59) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %66 = "arith.subi"(%29, %57) : (index, index) -> index
        %67 = "arith.addi"(%40, %66) : (index, index) -> index
        %68 = "arith.divui"(%67, %31) : (index, index) -> index
        "scf.for"(%9, %68, %10) ({
        ^bb0(%arg4: index):
          %74 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %75 = "arith.addi"(%57, %74) : (index, index) -> index
          %76 = "arith.index_cast"(%75) : (index) -> i64
          %77 = "arith.shrsi"(%76, %3) : (i64, i64) -> i64
          %78 = "arith.index_cast"(%77) : (i64) -> index
          %79 = "polygeist.subindex"(%35, %78) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%52, %79) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %80 = "llvm.load"(%58) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %81 = "arith.cmpf"(%80, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %82 = "scf.if"(%81) ({
            "scf.yield"(%80) : (f32) -> ()
          }, {
            %102 = "math.exp"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %103 = "arith.subf"(%102, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %104 = "arith.mulf"(%103, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%104) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%82, %59) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %83 = "llvm.load"(%59) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %84 = "arith.mulf"(%83, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%84, %59) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %85 = "llvm.load"(%60) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %86 = "arith.cmpf"(%85, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %87 = "scf.if"(%86) ({
            "scf.yield"(%85) : (f32) -> ()
          }, {
            %102 = "math.exp"(%85) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %103 = "arith.subf"(%102, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %104 = "arith.mulf"(%103, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%104) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%87, %61) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %88 = "llvm.load"(%61) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %89 = "arith.mulf"(%88, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%89, %61) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %90 = "llvm.load"(%62) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %91 = "arith.cmpf"(%90, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %92 = "scf.if"(%91) ({
            "scf.yield"(%90) : (f32) -> ()
          }, {
            %102 = "math.exp"(%90) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %103 = "arith.subf"(%102, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %104 = "arith.mulf"(%103, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%104) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%92, %63) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %93 = "llvm.load"(%63) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %94 = "arith.mulf"(%93, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%94, %63) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %95 = "llvm.load"(%64) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %96 = "arith.cmpf"(%95, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %97 = "scf.if"(%96) ({
            "scf.yield"(%95) : (f32) -> ()
          }, {
            %102 = "math.exp"(%95) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %103 = "arith.subf"(%102, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %104 = "arith.mulf"(%103, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%104) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%97, %65) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %98 = "llvm.load"(%65) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %99 = "arith.mulf"(%98, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "llvm.store"(%99, %65) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %100 = "polygeist.subindex"(%39, %78) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, index) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %101 = "func.call"(%100, %49) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %69 = "arith.addi"(%27, %55) : (i64, i64) -> i64
        %70 = "arith.index_cast"(%69) : (i64) -> index
        %71 = "arith.subi"(%42, %70) : (index, index) -> index
        %72 = "arith.addi"(%45, %71) : (index, index) -> index
        %73 = "arith.divui"(%72, %44) : (index, index) -> index
        "scf.for"(%9, %73, %10) ({
        ^bb0(%arg4: index):
          %74 = "arith.muli"(%arg4, %44) : (index, index) -> index
          %75 = "arith.addi"(%74, %70) : (index, index) -> index
          %76 = "memref.load"(%arg0, %75) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %77 = "arith.cmpf"(%76, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %78 = "scf.if"(%77) ({
            "scf.yield"(%76) : (f32) -> ()
          }, {
            %80 = "math.exp"(%76) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
            %81 = "arith.subf"(%80, %6) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %82 = "arith.mulf"(%81, %7) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            "scf.yield"(%82) : (f32) -> ()
          }) : (i1) -> f32
          %79 = "arith.mulf"(%78, %5) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "memref.store"(%79, %arg1, %75) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] CastLikeOpToNPULowering: process op: 

%54 = "arith.index_cast"(%arg3) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%57 = "arith.extui"(%56) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%60 = "arith.index_cast"(%59) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%85 = "arith.index_cast"(%83) : (index) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%88 = "arith.index_cast"(%87) : (i64) -> index
[ict-debug] ArithUnaryOpToNPULowering: process op: 

%116 = "math.exp"(%94) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ArithUnaryOpToNPULowering: process op: 

%117 = "math.exp"(%100) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ArithUnaryOpToNPULowering: process op: 

%118 = "math.exp"(%106) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ArithUnaryOpToNPULowering: process op: 

%119 = "math.exp"(%112) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] CastLikeOpToNPULowering: process op: 

%78 = "arith.index_cast"(%77) : (i64) -> index
[ict-debug] ArithUnaryOpToNPULowering: process op: 

%89 = "math.exp"(%85) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
[ict-debug] ArithUnaryOpToNPULowering: met scalar unary op, need vector help process.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 4 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 2 : i64}> : () -> i64
      %4 = "arith.constant"() <{value = -4 : i64}> : () -> i64
      %5 = "arith.constant"() <{value = 1.05070102 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 1.67326319 : f32}> : () -> f32
      %8 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %9 = "arith.constant"() <{value = 0 : index}> : () -> index
      %10 = "arith.constant"() <{value = 1 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "npu.block_id"() : () -> i64
      %13 = "emitc.cast"(%12) : (i64) -> i32
      %14 = "arith.constant"() <{value = 32 : index}> : () -> index
      %15 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %16 = "arith.muli"(%13, %15) : (i32, i32) -> i32
      %17 = "npu.block_num"() : () -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "emitc.cast"(%19) : (i32) -> i64
      %21 = "arith.muli"(%20, %2) : (i64, i64) -> i64
      %22 = "arith.andi"(%arg2, %4) : (i64, i64) -> i64
      %23 = "emitc.cast"(%22) : (i64) -> index
      %24 = "emitc.cast"(%21) : (i64) -> index
      %25 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %26 = "llvm.bitcast"(%25) : (!llvm.ptr) -> !llvm.ptr
      %27 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %28 = "llvm.bitcast"(%27) : (!llvm.ptr) -> !llvm.ptr
      %29 = "arith.subi"(%24, %10) : (index, index) -> index
      %30 = "emitc.cast"(%arg2) : (i64) -> index
      %31 = "emitc.cast"(%20) : (i64) -> index
      %32 = "arith.subi"(%31, %10) : (index, index) -> index
      %33 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%9, %11, %33) ({
      ^bb0(%arg3: index):
        %34 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %35 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %36 = "builtin.unrealized_conversion_cast"(%35) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %37 = "memref.cast"(%36) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %38 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %39 = "builtin.unrealized_conversion_cast"(%38) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %40 = "memref.cast"(%39) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %41 = "emitc.cast"(%34) : (i64) -> i32
        %42 = "arith.addi"(%16, %41) : (i32, i32) -> i32
        %43 = "emitc.cast"(%42) : (i32) -> i64
        %44 = "arith.muli"(%43, %2) : (i64, i64) -> i64
        %45 = "emitc.cast"(%44) : (i64) -> index
        %46 = "llvm.bitcast"(%38) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %47 = "llvm.addrspacecast"(%46) : (!llvm.ptr<5>) -> !llvm.ptr
        %48 = "llvm.bitcast"(%35) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %49 = "llvm.addrspacecast"(%48) : (!llvm.ptr<5>) -> !llvm.ptr
        %50 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %51 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %52 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %53 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %54 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %55 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %56 = "arith.subi"(%23, %45) : (index, index) -> index
        %57 = "arith.addi"(%29, %56) : (index, index) -> index
        %58 = "arith.divui"(%57, %24) : (index, index) -> index
        "scf.for"(%9, %58, %10) ({
        ^bb0(%arg4: index):
          %64 = "arith.muli"(%arg4, %24) : (index, index) -> index
          %65 = "arith.addi"(%45, %64) : (index, index) -> index
          %66 = "builtin.unrealized_conversion_cast"(%65) : (index) -> i64
          %67 = "emitc.cast"(%66) : (i64) -> i64
          %68 = "arith.shrsi"(%67, %3) : (i64, i64) -> i64
          %69 = "emitc.cast"(%68) : (i64) -> index
          %70 = "builtin.unrealized_conversion_cast"(%69) : (index) -> i64
          %71 = "llvm.getelementptr"(%26, %70) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %72 = "llvm.bitcast"(%71) : (!llvm.ptr) -> !llvm.ptr
          %73 = "builtin.unrealized_conversion_cast"(%72) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%40, %73) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %74 = "llvm.load"(%47) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %75 = "arith.cmpf"(%74, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %76 = "scf.if"(%75) ({
            "scf.yield"(%74) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%74) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%76, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %77 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %78 = "emitc.mul"(%77, %5) : (f32, f32) -> f32
          "llvm.store"(%78, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %79 = "llvm.load"(%50) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %80 = "arith.cmpf"(%79, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %81 = "scf.if"(%80) ({
            "scf.yield"(%79) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%79) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%81, %51) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %82 = "llvm.load"(%51) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %83 = "emitc.mul"(%82, %5) : (f32, f32) -> f32
          "llvm.store"(%83, %51) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %84 = "llvm.load"(%52) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %85 = "arith.cmpf"(%84, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %86 = "scf.if"(%85) ({
            "scf.yield"(%84) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%84) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%86, %53) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %87 = "llvm.load"(%53) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %88 = "emitc.mul"(%87, %5) : (f32, f32) -> f32
          "llvm.store"(%88, %53) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %89 = "llvm.load"(%54) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %90 = "arith.cmpf"(%89, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %91 = "scf.if"(%90) ({
            "scf.yield"(%89) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%89) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%91, %55) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %92 = "llvm.load"(%55) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %93 = "emitc.mul"(%92, %5) : (f32, f32) -> f32
          "llvm.store"(%93, %55) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %94 = "llvm.getelementptr"(%28, %70) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %95 = "llvm.bitcast"(%94) : (!llvm.ptr) -> !llvm.ptr
          %96 = "builtin.unrealized_conversion_cast"(%95) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %97 = "func.call"(%96, %37) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %59 = "arith.addi"(%22, %43) : (i64, i64) -> i64
        %60 = "emitc.cast"(%59) : (i64) -> index
        %61 = "arith.subi"(%30, %60) : (index, index) -> index
        %62 = "arith.addi"(%32, %61) : (index, index) -> index
        %63 = "arith.divui"(%62, %31) : (index, index) -> index
        "scf.for"(%9, %63, %10) ({
        ^bb0(%arg4: index):
          %64 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %65 = "arith.addi"(%64, %60) : (index, index) -> index
          %66 = "memref.load"(%arg0, %65) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %67 = "arith.cmpf"(%66, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %68 = "scf.if"(%67) ({
            "scf.yield"(%66) : (f32) -> ()
          }, {
            %70 = "emitc.call"(%66) <{callee = "expf"}> : (f32) -> f32
            %71 = "emitc.sub"(%70, %6) : (f32, f32) -> f32
            %72 = "emitc.mul"(%71, %7) : (f32, f32) -> f32
            "scf.yield"(%72) : (f32) -> ()
          }) : (i1) -> f32
          %69 = "emitc.mul"(%68, %5) : (f32, f32) -> f32
          "memref.store"(%69, %arg1, %65) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

loc("./cuda_ops/27_SELU_.cu":29:9): error: 'memref.cast' op operand type 'memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>' and result type 'memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>' are cast incompatible
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 4 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 2 : i64}> : () -> i64
      %4 = "arith.constant"() <{value = -4 : i64}> : () -> i64
      %5 = "arith.constant"() <{value = 1.05070102 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 1.67326319 : f32}> : () -> f32
      %8 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %9 = "arith.constant"() <{value = 0 : index}> : () -> index
      %10 = "arith.constant"() <{value = 1 : index}> : () -> index
      %11 = "arith.constant"() <{value = 32 : index}> : () -> index
      %12 = "npu.block_id"() : () -> i64
      %13 = "emitc.cast"(%12) : (i64) -> i32
      %14 = "arith.constant"() <{value = 32 : index}> : () -> index
      %15 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %16 = "arith.muli"(%13, %15) : (i32, i32) -> i32
      %17 = "npu.block_num"() : () -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "emitc.cast"(%19) : (i32) -> i64
      %21 = "arith.muli"(%20, %2) : (i64, i64) -> i64
      %22 = "arith.andi"(%arg2, %4) : (i64, i64) -> i64
      %23 = "emitc.cast"(%22) : (i64) -> index
      %24 = "emitc.cast"(%21) : (i64) -> index
      %25 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %26 = "llvm.bitcast"(%25) : (!llvm.ptr) -> !llvm.ptr
      %27 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %28 = "llvm.bitcast"(%27) : (!llvm.ptr) -> !llvm.ptr
      %29 = "arith.subi"(%24, %10) : (index, index) -> index
      %30 = "emitc.cast"(%arg2) : (i64) -> index
      %31 = "emitc.cast"(%20) : (i64) -> index
      %32 = "arith.subi"(%31, %10) : (index, index) -> index
      %33 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%9, %11, %33) ({
      ^bb0(%arg3: index):
        %34 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %35 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %36 = "builtin.unrealized_conversion_cast"(%35) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %37 = "memref.cast"(%36) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %38 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %39 = "builtin.unrealized_conversion_cast"(%38) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %40 = "memref.cast"(%39) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %41 = "emitc.cast"(%34) : (i64) -> i32
        %42 = "arith.addi"(%16, %41) : (i32, i32) -> i32
        %43 = "emitc.cast"(%42) : (i32) -> i64
        %44 = "arith.muli"(%43, %2) : (i64, i64) -> i64
        %45 = "emitc.cast"(%44) : (i64) -> index
        %46 = "llvm.bitcast"(%38) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %47 = "llvm.addrspacecast"(%46) : (!llvm.ptr<5>) -> !llvm.ptr
        %48 = "llvm.bitcast"(%35) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %49 = "llvm.addrspacecast"(%48) : (!llvm.ptr<5>) -> !llvm.ptr
        %50 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %51 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
        %52 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %53 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
        %54 = "llvm.getelementptr"(%47) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %55 = "llvm.getelementptr"(%49) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
        %56 = "arith.subi"(%23, %45) : (index, index) -> index
        %57 = "arith.addi"(%29, %56) : (index, index) -> index
        %58 = "arith.divui"(%57, %24) : (index, index) -> index
        "scf.for"(%9, %58, %10) ({
        ^bb0(%arg4: index):
          %64 = "arith.muli"(%arg4, %24) : (index, index) -> index
          %65 = "arith.addi"(%45, %64) : (index, index) -> index
          %66 = "builtin.unrealized_conversion_cast"(%65) : (index) -> i64
          %67 = "emitc.cast"(%66) : (i64) -> i64
          %68 = "arith.shrsi"(%67, %3) : (i64, i64) -> i64
          %69 = "emitc.cast"(%68) : (i64) -> index
          %70 = "builtin.unrealized_conversion_cast"(%69) : (index) -> i64
          %71 = "llvm.getelementptr"(%26, %70) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %72 = "llvm.bitcast"(%71) : (!llvm.ptr) -> !llvm.ptr
          %73 = "builtin.unrealized_conversion_cast"(%72) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%40, %73) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %74 = "llvm.load"(%47) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %75 = "arith.cmpf"(%74, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %76 = "scf.if"(%75) ({
            "scf.yield"(%74) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%74) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%76, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %77 = "llvm.load"(%49) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %78 = "emitc.mul"(%77, %5) : (f32, f32) -> f32
          "llvm.store"(%78, %49) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %79 = "llvm.load"(%50) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %80 = "arith.cmpf"(%79, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %81 = "scf.if"(%80) ({
            "scf.yield"(%79) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%79) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%81, %51) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %82 = "llvm.load"(%51) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %83 = "emitc.mul"(%82, %5) : (f32, f32) -> f32
          "llvm.store"(%83, %51) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %84 = "llvm.load"(%52) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %85 = "arith.cmpf"(%84, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %86 = "scf.if"(%85) ({
            "scf.yield"(%84) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%84) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%86, %53) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %87 = "llvm.load"(%53) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %88 = "emitc.mul"(%87, %5) : (f32, f32) -> f32
          "llvm.store"(%88, %53) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %89 = "llvm.load"(%54) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %90 = "arith.cmpf"(%89, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %91 = "scf.if"(%90) ({
            "scf.yield"(%89) : (f32) -> ()
          }, {
            %98 = "emitc.call"(%89) <{callee = "expf"}> : (f32) -> f32
            %99 = "emitc.sub"(%98, %6) : (f32, f32) -> f32
            %100 = "emitc.mul"(%99, %7) : (f32, f32) -> f32
            "scf.yield"(%100) : (f32) -> ()
          }) : (i1) -> f32
          "llvm.store"(%91, %55) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %92 = "llvm.load"(%55) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
          %93 = "emitc.mul"(%92, %5) : (f32, f32) -> f32
          "llvm.store"(%93, %55) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
          %94 = "llvm.getelementptr"(%28, %70) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %95 = "llvm.bitcast"(%94) : (!llvm.ptr) -> !llvm.ptr
          %96 = "builtin.unrealized_conversion_cast"(%95) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %97 = "func.call"(%96, %37) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %59 = "arith.addi"(%22, %43) : (i64, i64) -> i64
        %60 = "emitc.cast"(%59) : (i64) -> index
        %61 = "arith.subi"(%30, %60) : (index, index) -> index
        %62 = "arith.addi"(%32, %61) : (index, index) -> index
        %63 = "arith.divui"(%62, %31) : (index, index) -> index
        "scf.for"(%9, %63, %10) ({
        ^bb0(%arg4: index):
          %64 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %65 = "arith.addi"(%64, %60) : (index, index) -> index
          %66 = "memref.load"(%arg0, %65) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %67 = "arith.cmpf"(%66, %8) <{predicate = 2 : i64}> : (f32, f32) -> i1
          %68 = "scf.if"(%67) ({
            "scf.yield"(%66) : (f32) -> ()
          }, {
            %70 = "emitc.call"(%66) <{callee = "expf"}> : (f32) -> f32
            %71 = "emitc.sub"(%70, %6) : (f32, f32) -> f32
            %72 = "emitc.mul"(%71, %7) : (f32, f32) -> f32
            "scf.yield"(%72) : (f32) -> ()
          }) : (i1) -> f32
          %69 = "emitc.mul"(%68, %5) : (f32, f32) -> f32
          "memref.store"(%69, %arg1, %65) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z22selu_kernel_vectorizedPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
