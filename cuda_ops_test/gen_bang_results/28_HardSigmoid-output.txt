warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z42__device_stub__hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0, %arg1, %arg2) : (memref<?xf32>, memref<?xf32>, i64) -> ()
    return
  }
  func.func private @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant 0.16666666666666666 : f64
    %cst_2 = arith.constant 3.000000e+00 : f32
    %c32_i64 = arith.constant 32 : i64
    %alloca = memref.alloca() : memref<32xf32>
    %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.divsi %arg2, %c32_i64 : i64
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = arith.addi %2, %7 : i32
    %9 = gpu.block_dim  x
    %10 = arith.index_cast %9 : index to i32
    %11 = gpu.grid_dim  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.muli %10, %12 : i32
    %14 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %15 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
    %16 = "polygeist.pointer2memref"(%15) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %17 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %18 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
    %19 = "polygeist.pointer2memref"(%18) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %20 = arith.index_cast %0 : i64 to index
    %21 = arith.index_cast %8 : i32 to index
    %22 = arith.index_cast %13 : i32 to index
    %23 = arith.index_cast %13 : i32 to index
    %24 = arith.index_cast %8 : i32 to index
    %25 = arith.truncf %cst_1 : f64 to f32
    %26 = arith.subi %20, %21 : index
    %27 = arith.subi %22, %c1 : index
    %28 = arith.addi %27, %26 : index
    %29 = arith.divui %28, %22 : index
    affine.for %arg3 = 0 to %29 {
      %43 = arith.muli %arg3, %22 : index
      %44 = arith.divui %43, %22 : index
      %45 = arith.muli %44, %23 : index
      %46 = arith.addi %24, %45 : index
      %47 = arith.index_cast %46 : index to i64
      %48 = arith.muli %47, %c32_i64 : i64
      %49 = arith.index_cast %48 : i64 to index
      %50 = arith.muli %49, %c4 : index
      %51 = arith.index_cast %50 : index to i64
      %52 = llvm.getelementptr %14[%51] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %53 = "polygeist.pointer2memref"(%52) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %53) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %54 = func.call @_ZN6float4aSERKS_(%16, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      affine.for %arg4 = 0 to 32 {
        %61 = affine.load %alloca[%arg4] : memref<32xf32>
        %62 = arith.addf %61, %cst_2 : f32
        %63 = arith.mulf %62, %25 : f32
        %64 = arith.cmpf olt, %63, %cst_0 : f32
        %65 = scf.if %64 -> (f32) {
          scf.yield %cst_0 : f32
        } else {
          %66 = arith.cmpf ogt, %63, %cst : f32
          %67 = arith.select %66, %cst, %63 : f32
          scf.yield %67 : f32
        }
        affine.store %65, %alloca[%arg4] : memref<32xf32>
      }
      %55 = arith.index_cast %48 : i64 to index
      %56 = arith.muli %55, %c4 : index
      %57 = arith.index_cast %56 : index to i64
      %58 = llvm.getelementptr %17[%57] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %59 = "polygeist.pointer2memref"(%58) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %60 = func.call @_ZN6float4aSERKS_(%59, %19) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %30 = arith.muli %0, %c32_i64 : i64
    %31 = arith.extsi %8 : i32 to i64
    %32 = arith.addi %30, %31 : i64
    %33 = arith.truncf %cst_1 : f64 to f32
    %34 = arith.index_cast %arg2 : i64 to index
    %35 = arith.index_cast %32 : i64 to index
    %36 = arith.index_cast %13 : i32 to index
    %37 = arith.index_cast %13 : i32 to index
    %38 = arith.index_cast %32 : i64 to index
    %39 = arith.subi %34, %35 : index
    %40 = arith.subi %36, %c1 : index
    %41 = arith.addi %40, %39 : index
    %42 = arith.divui %41, %36 : index
    affine.for %arg3 = 0 to %42 {
      %43 = affine.load %arg0[%arg3 * symbol(%37) + symbol(%38)] : memref<?xf32>
      %44 = arith.addf %43, %cst_2 : f32
      %45 = arith.mulf %44, %33 : f32
      %46 = arith.cmpf olt, %45, %cst_0 : f32
      %47 = scf.if %46 -> (f32) {
        scf.yield %cst_0 : f32
      } else {
        %48 = arith.cmpf ogt, %45, %cst : f32
        %49 = arith.select %48, %cst, %45 : f32
        scf.yield %49 : f32
      }
      affine.store %47, %arg1[%arg3 * symbol(%37) + symbol(%38)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %4 = llvm.getelementptr %3[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %6 = llvm.getelementptr %5[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    llvm.store %7, %4 : f32, !llvm.ptr
    %8 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %9 = llvm.getelementptr %8[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %11 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %12 = llvm.load %11 : !llvm.ptr -> f32
    llvm.store %12, %9 : f32, !llvm.ptr
    %13 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %14 = llvm.getelementptr %13[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %16 = llvm.getelementptr %15[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %17 = llvm.load %16 : !llvm.ptr -> f32
    llvm.store %17, %14 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant 0.16666666666666666 : f64
    %cst_2 = arith.constant 3.000000e+00 : f32
    %c32_i64 = arith.constant 32 : i64
    %alloca = memref.alloca() : memref<32xf32>
    %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.divsi %arg2, %c32_i64 : i64
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = arith.addi %2, %7 : i32
    %9 = gpu.grid_dim  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %6, %10 : i32
    %12 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %13 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
    %14 = "polygeist.pointer2memref"(%13) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %16 = arith.index_cast %0 : i64 to index
    %17 = arith.index_cast %8 : i32 to index
    %18 = arith.index_cast %11 : i32 to index
    %19 = arith.truncf %cst_1 : f64 to f32
    %20 = arith.subi %16, %17 : index
    %21 = arith.subi %18, %c1 : index
    %22 = arith.addi %21, %20 : index
    %23 = arith.divui %22, %18 : index
    affine.for %arg3 = 0 to %23 {
      %32 = arith.muli %arg3, %18 : index
      %33 = arith.addi %17, %32 : index
      %34 = arith.index_cast %33 : index to i64
      %35 = arith.muli %34, %c32_i64 : i64
      %36 = arith.index_cast %35 : i64 to index
      %37 = arith.muli %36, %c4 : index
      %38 = arith.index_cast %37 : index to i64
      %39 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %40 = "polygeist.pointer2memref"(%39) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %40) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %41 = func.call @_ZN6float4aSERKS_(%14, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      affine.for %arg4 = 0 to 32 {
        %45 = affine.load %alloca[%arg4] : memref<32xf32>
        %46 = arith.addf %45, %cst_2 : f32
        %47 = arith.mulf %46, %19 : f32
        %48 = arith.cmpf olt, %47, %cst_0 : f32
        %49 = scf.if %48 -> (f32) {
          scf.yield %cst_0 : f32
        } else {
          %50 = arith.cmpf ogt, %47, %cst : f32
          %51 = arith.select %50, %cst, %47 : f32
          scf.yield %51 : f32
        }
        affine.store %49, %alloca[%arg4] : memref<32xf32>
      }
      %42 = llvm.getelementptr %15[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %43 = "polygeist.pointer2memref"(%42) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %44 = func.call @_ZN6float4aSERKS_(%43, %14) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %24 = arith.muli %0, %c32_i64 : i64
    %25 = arith.extsi %8 : i32 to i64
    %26 = arith.addi %24, %25 : i64
    %27 = arith.index_cast %arg2 : i64 to index
    %28 = arith.index_cast %26 : i64 to index
    %29 = arith.subi %27, %28 : index
    %30 = arith.addi %21, %29 : index
    %31 = arith.divui %30, %18 : index
    affine.for %arg3 = 0 to %31 {
      %32 = affine.load %arg0[%arg3 * symbol(%18) + symbol(%28)] : memref<?xf32>
      %33 = arith.addf %32, %cst_2 : f32
      %34 = arith.mulf %33, %19 : f32
      %35 = arith.cmpf olt, %34, %cst_0 : f32
      %36 = scf.if %35 -> (f32) {
        scf.yield %cst_0 : f32
      } else {
        %37 = arith.cmpf ogt, %34, %cst : f32
        %38 = arith.select %37, %cst, %34 : f32
        scf.yield %38 : f32
      }
      affine.store %36, %arg1[%arg3 * symbol(%18) + symbol(%28)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %cst = arith.constant 1.000000e+00 : f32
    %cst_0 = arith.constant 0.000000e+00 : f32
    %cst_1 = arith.constant 0.16666666666666666 : f64
    %cst_2 = arith.constant 3.000000e+00 : f32
    %c32_i64 = arith.constant 32 : i64
    %alloca = memref.alloca() : memref<32xf32>
    %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %cast = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %0 = arith.divsi %arg2, %c32_i64 : i64
    %1 = gpu.thread_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = arith.addi %2, %7 : i32
    %9 = gpu.grid_dim  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %6, %10 : i32
    %12 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %13 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
    %14 = "polygeist.pointer2memref"(%13) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    %15 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %16 = arith.index_cast %0 : i64 to index
    %17 = arith.index_cast %8 : i32 to index
    %18 = arith.index_cast %11 : i32 to index
    %19 = arith.truncf %cst_1 : f64 to f32
    %20 = arith.subi %16, %17 : index
    %21 = arith.subi %18, %c1 : index
    %22 = arith.addi %21, %20 : index
    %23 = arith.divui %22, %18 : index
    scf.for %arg3 = %c0 to %23 step %c1 {
      %32 = arith.muli %arg3, %18 : index
      %33 = arith.addi %17, %32 : index
      %34 = arith.index_cast %33 : index to i64
      %35 = arith.muli %34, %c32_i64 : i64
      %36 = arith.index_cast %35 : i64 to index
      %37 = arith.muli %36, %c4 : index
      %38 = arith.index_cast %37 : index to i64
      %39 = llvm.getelementptr %12[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %40 = "polygeist.pointer2memref"(%39) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      func.call @_ZN6float4C1ERKS_(%cast, %40) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
      %41 = func.call @_ZN6float4aSERKS_(%14, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %45 = memref.load %alloca[%arg4] : memref<32xf32>
        %46 = arith.addf %45, %cst_2 : f32
        %47 = arith.mulf %46, %19 : f32
        %48 = arith.cmpf olt, %47, %cst_0 : f32
        %49 = scf.if %48 -> (f32) {
          scf.yield %cst_0 : f32
        } else {
          %50 = arith.cmpf ogt, %47, %cst : f32
          %51 = arith.select %50, %cst, %47 : f32
          scf.yield %51 : f32
        }
        memref.store %49, %alloca[%arg4] : memref<32xf32>
      }
      %42 = llvm.getelementptr %15[%38] : (!llvm.ptr, i64) -> !llvm.ptr, i8
      %43 = "polygeist.pointer2memref"(%42) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %44 = func.call @_ZN6float4aSERKS_(%43, %14) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
    %24 = arith.muli %0, %c32_i64 : i64
    %25 = arith.extsi %8 : i32 to i64
    %26 = arith.addi %24, %25 : i64
    %27 = arith.index_cast %arg2 : i64 to index
    %28 = arith.index_cast %26 : i64 to index
    %29 = arith.subi %27, %28 : index
    %30 = arith.addi %21, %29 : index
    %31 = arith.divui %30, %18 : index
    scf.for %arg3 = %c0 to %31 step %c1 {
      %32 = arith.muli %arg3, %18 : index
      %33 = arith.addi %32, %28 : index
      %34 = memref.load %arg0[%33] : memref<?xf32>
      %35 = arith.addf %34, %cst_2 : f32
      %36 = arith.mulf %35, %19 : f32
      %37 = arith.cmpf olt, %36, %cst_0 : f32
      %38 = scf.if %37 -> (f32) {
        scf.yield %cst_0 : f32
      } else {
        %39 = arith.cmpf ogt, %36, %cst : f32
        %40 = arith.select %39, %cst, %36 : f32
        scf.yield %40 : f32
      }
      memref.store %38, %arg1[%33] : memref<?xf32>
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %c32_0 = arith.constant 32 : index
      %c0_1 = arith.constant 0 : index
      %c1_2 = arith.constant 1 : index
      %c4 = arith.constant 4 : index
      %cst = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 0.000000e+00 : f32
      %cst_4 = arith.constant 0.16666666666666666 : f64
      %cst_5 = arith.constant 3.000000e+00 : f32
      %c32_i64 = arith.constant 32 : i64
      %alloca = memref.alloca() : memref<32xf32>
      %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = arith.divsi %arg2, %c32_i64 : i64
      %1 = arith.index_cast %arg3 : index to i32
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.addi %1, %6 : i32
      %8 = gpu.grid_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %5, %9 : i32
      %11 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %12 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
      %13 = "polygeist.pointer2memref"(%12) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %14 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %15 = arith.index_cast %0 : i64 to index
      %16 = arith.index_cast %7 : i32 to index
      %17 = arith.index_cast %10 : i32 to index
      %18 = arith.truncf %cst_4 : f64 to f32
      %19 = arith.subi %15, %16 : index
      %20 = arith.subi %17, %c1_2 : index
      %21 = arith.addi %20, %19 : index
      %22 = arith.divui %21, %17 : index
      scf.for %arg4 = %c0_1 to %22 step %c1_2 {
        %31 = arith.muli %arg4, %17 : index
        %32 = arith.addi %16, %31 : index
        %33 = arith.index_cast %32 : index to i64
        %34 = arith.muli %33, %c32_i64 : i64
        %35 = arith.index_cast %34 : i64 to index
        %36 = arith.muli %35, %c4 : index
        %37 = arith.index_cast %36 : index to i64
        %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %39 = "polygeist.pointer2memref"(%38) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %39) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %40 = func.call @_ZN6float4aSERKS_(%13, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        scf.for %arg5 = %c0_1 to %c32_0 step %c1_2 {
          %44 = memref.load %alloca[%arg5] : memref<32xf32>
          %45 = arith.addf %44, %cst_5 : f32
          %46 = arith.mulf %45, %18 : f32
          %47 = arith.cmpf olt, %46, %cst_3 : f32
          %48 = scf.if %47 -> (f32) {
            scf.yield %cst_3 : f32
          } else {
            %49 = arith.cmpf ogt, %46, %cst : f32
            %50 = arith.select %49, %cst, %46 : f32
            scf.yield %50 : f32
          }
          memref.store %48, %alloca[%arg5] : memref<32xf32>
        }
        %41 = llvm.getelementptr %14[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %43 = func.call @_ZN6float4aSERKS_(%42, %13) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %23 = arith.muli %0, %c32_i64 : i64
      %24 = arith.extsi %7 : i32 to i64
      %25 = arith.addi %23, %24 : i64
      %26 = arith.index_cast %arg2 : i64 to index
      %27 = arith.index_cast %25 : i64 to index
      %28 = arith.subi %26, %27 : index
      %29 = arith.addi %20, %28 : index
      %30 = arith.divui %29, %17 : index
      scf.for %arg4 = %c0_1 to %30 step %c1_2 {
        %31 = arith.muli %arg4, %17 : index
        %32 = arith.addi %31, %27 : index
        %33 = memref.load %arg0[%32] : memref<?xf32>
        %34 = arith.addf %33, %cst_5 : f32
        %35 = arith.mulf %34, %18 : f32
        %36 = arith.cmpf olt, %35, %cst_3 : f32
        %37 = scf.if %36 -> (f32) {
          scf.yield %cst_3 : f32
        } else {
          %38 = arith.cmpf ogt, %35, %cst : f32
          %39 = arith.select %38, %cst, %35 : f32
          scf.yield %39 : f32
        }
        memref.store %37, %arg1[%32] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %c32_0 = arith.constant 32 : index
      %c0_1 = arith.constant 0 : index
      %c1_2 = arith.constant 1 : index
      %c4 = arith.constant 4 : index
      %cst = arith.constant 1.000000e+00 : f32
      %cst_3 = arith.constant 0.000000e+00 : f32
      %cst_4 = arith.constant 0.16666666666666666 : f64
      %cst_5 = arith.constant 3.000000e+00 : f32
      %c32_i64 = arith.constant 32 : i64
      %alloca = memref.alloca() : memref<32xf32>
      %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %0 = arith.divsi %arg2, %c32_i64 : i64
      %1 = arith.index_cast %arg3 : index to i32
      %2 = gpu.block_id  x
      %3 = arith.index_cast %2 : index to i32
      %4 = gpu.block_dim  x
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %3, %5 : i32
      %7 = arith.addi %1, %6 : i32
      %8 = gpu.grid_dim  x
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %5, %9 : i32
      %11 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %12 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
      %13 = "polygeist.pointer2memref"(%12) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %14 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %15 = arith.index_cast %0 : i64 to index
      %16 = arith.index_cast %7 : i32 to index
      %17 = arith.index_cast %10 : i32 to index
      %18 = arith.truncf %cst_4 : f64 to f32
      %19 = arith.subi %15, %16 : index
      %20 = arith.subi %17, %c1_2 : index
      %21 = arith.addi %20, %19 : index
      %22 = arith.divui %21, %17 : index
      scf.for %arg4 = %c0_1 to %22 step %c1_2 {
        %31 = arith.muli %arg4, %17 : index
        %32 = arith.addi %16, %31 : index
        %33 = arith.index_cast %32 : index to i64
        %34 = arith.muli %33, %c32_i64 : i64
        %35 = arith.index_cast %34 : i64 to index
        %36 = arith.muli %35, %c4 : index
        %37 = arith.index_cast %36 : index to i64
        %38 = llvm.getelementptr %11[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %39 = "polygeist.pointer2memref"(%38) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %39) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %40 = func.call @_ZN6float4aSERKS_(%13, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        scf.for %arg5 = %c0_1 to %c32_0 step %c1_2 {
          %44 = memref.load %alloca[%arg5] : memref<32xf32>
          %45 = arith.addf %44, %cst_5 : f32
          %46 = arith.mulf %45, %18 : f32
          %47 = arith.cmpf olt, %46, %cst_3 : f32
          %48 = scf.if %47 -> (f32) {
            scf.yield %cst_3 : f32
          } else {
            %49 = arith.cmpf ogt, %46, %cst : f32
            %50 = arith.select %49, %cst, %46 : f32
            scf.yield %50 : f32
          }
          memref.store %48, %alloca[%arg5] : memref<32xf32>
        }
        %41 = llvm.getelementptr %14[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %43 = func.call @_ZN6float4aSERKS_(%42, %13) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %23 = arith.muli %0, %c32_i64 : i64
      %24 = arith.extsi %7 : i32 to i64
      %25 = arith.addi %23, %24 : i64
      %26 = arith.index_cast %arg2 : i64 to index
      %27 = arith.index_cast %25 : i64 to index
      %28 = arith.subi %26, %27 : index
      %29 = arith.addi %20, %28 : index
      %30 = arith.divui %29, %17 : index
      scf.for %arg4 = %c0_1 to %30 step %c1_2 {
        %31 = arith.muli %arg4, %17 : index
        %32 = arith.addi %31, %27 : index
        %33 = memref.load %arg0[%32] : memref<?xf32>
        %34 = arith.addf %33, %cst_5 : f32
        %35 = arith.mulf %34, %18 : f32
        %36 = arith.cmpf olt, %35, %cst_3 : f32
        %37 = scf.if %36 -> (f32) {
          scf.yield %cst_3 : f32
        } else {
          %38 = arith.cmpf ogt, %35, %cst : f32
          %39 = arith.select %38, %cst, %35 : f32
          scf.yield %39 : f32
        }
        memref.store %37, %arg1[%32] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32_i64 = arith.constant 32 : i64
    %cst = arith.constant 3.000000e+00 : f32
    %cst_0 = arith.constant 0.16666666666666666 : f64
    %cst_1 = arith.constant 0.000000e+00 : f32
    %cst_2 = arith.constant 1.000000e+00 : f32
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.divsi %arg2, %c32_i64 : i64
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = gpu.block_dim  x
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %2, %4 : i32
    %6 = gpu.grid_dim  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %4, %7 : i32
    %9 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
    %11 = arith.index_cast %0 : i64 to index
    %12 = arith.index_cast %8 : i32 to index
    %13 = arith.truncf %cst_0 : f64 to f32
    %14 = arith.subi %12, %c1 : index
    %15 = arith.muli %0, %c32_i64 : i64
    %16 = arith.index_cast %arg2 : i64 to index
    scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
      %alloca = memref.alloca() : memref<32xf32>
      %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %cast = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %17 = arith.index_cast %arg3 : index to i32
      %18 = arith.addi %17, %5 : i32
      %19 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
      %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      %21 = arith.index_cast %18 : i32 to index
      %22 = arith.subi %11, %21 : index
      %23 = arith.addi %14, %22 : index
      %24 = arith.divui %23, %12 : index
      scf.for %arg4 = %c0 to %24 step %c1 {
        %31 = arith.muli %arg4, %12 : index
        %32 = arith.addi %21, %31 : index
        %33 = arith.index_cast %32 : index to i64
        %34 = arith.muli %33, %c32_i64 : i64
        %35 = arith.index_cast %34 : i64 to index
        %36 = arith.muli %35, %c4 : index
        %37 = arith.index_cast %36 : index to i64
        %38 = llvm.getelementptr %9[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %39 = "polygeist.pointer2memref"(%38) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        func.call @_ZN6float4C1ERKS_(%cast, %39) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
        %40 = func.call @_ZN6float4aSERKS_(%20, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        scf.for %arg5 = %c0 to %c32 step %c1 {
          %44 = memref.load %alloca[%arg5] : memref<32xf32>
          %45 = arith.addf %44, %cst : f32
          %46 = arith.mulf %45, %13 : f32
          %47 = arith.cmpf olt, %46, %cst_1 : f32
          %48 = scf.if %47 -> (f32) {
            scf.yield %cst_1 : f32
          } else {
            %49 = arith.cmpf ogt, %46, %cst_2 : f32
            %50 = arith.select %49, %cst_2, %46 : f32
            scf.yield %50 : f32
          }
          memref.store %48, %alloca[%arg5] : memref<32xf32>
        }
        %41 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
        %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %43 = func.call @_ZN6float4aSERKS_(%42, %20) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
      }
      %25 = arith.extsi %18 : i32 to i64
      %26 = arith.addi %15, %25 : i64
      %27 = arith.index_cast %26 : i64 to index
      %28 = arith.subi %16, %27 : index
      %29 = arith.addi %14, %28 : index
      %30 = arith.divui %29, %12 : index
      scf.for %arg4 = %c0 to %30 step %c1 {
        %31 = arith.muli %arg4, %12 : index
        %32 = arith.addi %31, %27 : index
        %33 = memref.load %arg0[%32] : memref<?xf32>
        %34 = arith.addf %33, %cst : f32
        %35 = arith.mulf %34, %13 : f32
        %36 = arith.cmpf olt, %35, %cst_1 : f32
        %37 = scf.if %36 -> (f32) {
          scf.yield %cst_1 : f32
        } else {
          %38 = arith.cmpf ogt, %35, %cst_2 : f32
          %39 = arith.select %38, %cst_2, %35 : f32
          scf.yield %39 : f32
        }
        memref.store %37, %arg1[%32] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
  func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = llvm.load %0 : !llvm.ptr -> f32
    %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    llvm.store %1, %2 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.load %3 : !llvm.ptr -> f32
    %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %4, %5 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.load %6 : !llvm.ptr -> f32
    %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %7, %8 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.load %9 : !llvm.ptr -> f32
    %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    llvm.store %10, %11 : f32, !llvm.ptr
    return
  }
  func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> f32
    llvm.store %2, %0 : f32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %5 = llvm.load %4 : !llvm.ptr -> f32
    llvm.store %5, %3 : f32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %8 = llvm.load %7 : !llvm.ptr -> f32
    llvm.store %8, %6 : f32, !llvm.ptr
    %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
    %11 = llvm.load %10 : !llvm.ptr -> f32
    llvm.store %11, %9 : f32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z27hardsigmoid_kernel_unrolledPKfPfm_0 {
    gpu.func @_Z27hardsigmoid_kernel_unrolledPKfPfm(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64) {
      %c32_i64 = arith.constant 32 : i64
      %cst = arith.constant 3.000000e+00 : f32
      %cst_0 = arith.constant 0.16666666666666666 : f64
      %cst_1 = arith.constant 0.000000e+00 : f32
      %cst_2 = arith.constant 1.000000e+00 : f32
      %c4 = arith.constant 4 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.divsi %arg2, %c32_i64 : i64
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = gpu.block_dim  x
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.muli %2, %4 : i32
      %6 = gpu.grid_dim  x
      %7 = arith.index_cast %6 : index to i32
      %8 = arith.muli %4, %7 : i32
      %9 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %10 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %11 = arith.index_cast %0 : i64 to index
      %12 = arith.index_cast %8 : i32 to index
      %13 = arith.truncf %cst_0 : f64 to f32
      %14 = arith.subi %12, %c1 : index
      %15 = arith.muli %0, %c32_i64 : i64
      %16 = arith.index_cast %arg2 : i64 to index
      scf.parallel (%arg3) = (%c0) to (%c32) step (%c1) {
        %alloca = memref.alloca() : memref<32xf32>
        %alloca_3 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %cast = memref.cast %alloca_3 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %17 = arith.index_cast %arg3 : index to i32
        %18 = arith.addi %17, %5 : i32
        %19 = "polygeist.memref2pointer"(%alloca) : (memref<32xf32>) -> !llvm.ptr
        %20 = "polygeist.pointer2memref"(%19) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %21 = arith.index_cast %18 : i32 to index
        %22 = arith.subi %11, %21 : index
        %23 = arith.addi %14, %22 : index
        %24 = arith.divui %23, %12 : index
        scf.for %arg4 = %c0 to %24 step %c1 {
          %31 = arith.muli %arg4, %12 : index
          %32 = arith.addi %21, %31 : index
          %33 = arith.index_cast %32 : index to i64
          %34 = arith.muli %33, %c32_i64 : i64
          %35 = arith.index_cast %34 : i64 to index
          %36 = arith.muli %35, %c4 : index
          %37 = arith.index_cast %36 : index to i64
          %38 = llvm.getelementptr %9[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
          %39 = "polygeist.pointer2memref"(%38) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          func.call @_ZN6float4C1ERKS_(%cast, %39) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %40 = func.call @_ZN6float4aSERKS_(%20, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          scf.for %arg5 = %c0 to %c32 step %c1 {
            %44 = memref.load %alloca[%arg5] : memref<32xf32>
            %45 = arith.addf %44, %cst : f32
            %46 = arith.mulf %45, %13 : f32
            %47 = arith.cmpf olt, %46, %cst_1 : f32
            %48 = scf.if %47 -> (f32) {
              scf.yield %cst_1 : f32
            } else {
              %49 = arith.cmpf ogt, %46, %cst_2 : f32
              %50 = arith.select %49, %cst_2, %46 : f32
              scf.yield %50 : f32
            }
            memref.store %48, %alloca[%arg5] : memref<32xf32>
          }
          %41 = llvm.getelementptr %10[%37] : (!llvm.ptr, i64) -> !llvm.ptr, i8
          %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %43 = func.call @_ZN6float4aSERKS_(%42, %20) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        }
        %25 = arith.extsi %18 : i32 to i64
        %26 = arith.addi %15, %25 : i64
        %27 = arith.index_cast %26 : i64 to index
        %28 = arith.subi %16, %27 : index
        %29 = arith.addi %14, %28 : index
        %30 = arith.divui %29, %12 : index
        scf.for %arg4 = %c0 to %30 step %c1 {
          %31 = arith.muli %arg4, %12 : index
          %32 = arith.addi %31, %27 : index
          %33 = memref.load %arg0[%32] : memref<?xf32>
          %34 = arith.addf %33, %cst : f32
          %35 = arith.mulf %34, %13 : f32
          %36 = arith.cmpf olt, %35, %cst_1 : f32
          %37 = scf.if %36 -> (f32) {
            scf.yield %cst_1 : f32
          } else {
            %38 = arith.cmpf ogt, %35, %cst_2 : f32
            %39 = arith.select %38, %cst_2, %35 : f32
            scf.yield %39 : f32
          }
          memref.store %37, %arg1[%32] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @_ZN6float4C1ERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = llvm.load %0 : !llvm.ptr -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      llvm.store %1, %2 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.load %3 : !llvm.ptr -> f32
      %5 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %4, %5 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.load %6 : !llvm.ptr -> f32
      %8 = llvm.getelementptr %2[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %7, %8 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.load %9 : !llvm.ptr -> f32
      %11 = llvm.getelementptr %2[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      llvm.store %10, %11 : f32, !llvm.ptr
      return
    }
    func.func private @_ZN6float4aSERKS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = llvm.load %1 : !llvm.ptr -> f32
      llvm.store %2, %0 : f32, !llvm.ptr
      %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %5 = llvm.load %4 : !llvm.ptr -> f32
      llvm.store %5, %3 : f32, !llvm.ptr
      %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %8 = llvm.load %7 : !llvm.ptr -> f32
      llvm.store %8, %6 : f32, !llvm.ptr
      %9 = llvm.getelementptr %0[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %10 = llvm.getelementptr %1[0, 3] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>
      %11 = llvm.load %10 : !llvm.ptr -> f32
      llvm.store %11, %9 : f32, !llvm.ptr
      return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.grid_dim with npu.block_num

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "arith.constant"() <{value = 32 : i64}> : () -> i64
      %1 = "arith.constant"() <{value = 3.000000e+00 : f32}> : () -> f32
      %2 = "arith.constant"() <{value = 0.16666666666666666 : f64}> : () -> f64
      %3 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %5 = "arith.constant"() <{value = 4 : index}> : () -> index
      %6 = "arith.constant"() <{value = 0 : index}> : () -> index
      %7 = "arith.constant"() <{value = 1 : index}> : () -> index
      %8 = "arith.constant"() <{value = 32 : index}> : () -> index
      %9 = "arith.divsi"(%arg2, %0) : (i64, i64) -> i64
      %10 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %11 = "arith.index_cast"(%10) : (index) -> i32
      %12 = "arith.constant"() <{value = 32 : index}> : () -> index
      %13 = "arith.index_cast"(%12) : (index) -> i32
      %14 = "arith.muli"(%11, %13) : (i32, i32) -> i32
      %15 = "npu.block_num"() : () -> i64
      %16 = "arith.index_cast"(%15) : (i64) -> i32
      %17 = "arith.muli"(%13, %16) : (i32, i32) -> i32
      %18 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %19 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %20 = "arith.index_cast"(%9) : (i64) -> index
      %21 = "arith.index_cast"(%17) : (i32) -> index
      %22 = "arith.truncf"(%2) : (f64) -> f32
      %23 = "arith.subi"(%21, %7) : (index, index) -> index
      %24 = "arith.muli"(%9, %0) : (i64, i64) -> i64
      %25 = "arith.index_cast"(%arg2) : (i64) -> index
      %26 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%6, %8, %26) ({
      ^bb0(%arg3: index):
        %27 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xf32>
        %28 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %29 = "memref.cast"(%28) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %30 = "arith.index_cast"(%arg3) : (index) -> i32
        %31 = "arith.addi"(%30, %14) : (i32, i32) -> i32
        %32 = "polygeist.memref2pointer"(%27) : (memref<32xf32>) -> !llvm.ptr
        %33 = "polygeist.pointer2memref"(%32) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %34 = "arith.index_cast"(%31) : (i32) -> index
        %35 = "arith.subi"(%20, %34) : (index, index) -> index
        %36 = "arith.addi"(%23, %35) : (index, index) -> index
        %37 = "arith.divui"(%36, %21) : (index, index) -> index
        "scf.for"(%6, %37, %7) ({
        ^bb0(%arg4: index):
          %44 = "arith.muli"(%arg4, %21) : (index, index) -> index
          %45 = "arith.addi"(%34, %44) : (index, index) -> index
          %46 = "arith.index_cast"(%45) : (index) -> i64
          %47 = "arith.muli"(%46, %0) : (i64, i64) -> i64
          %48 = "arith.index_cast"(%47) : (i64) -> index
          %49 = "arith.muli"(%48, %5) : (index, index) -> index
          %50 = "arith.index_cast"(%49) : (index) -> i64
          %51 = "llvm.getelementptr"(%18, %50) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %52 = "polygeist.pointer2memref"(%51) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%29, %52) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %53 = "func.call"(%33, %29) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.for"(%6, %8, %7) ({
          ^bb0(%arg5: index):
            %57 = "memref.load"(%27, %arg5) <{nontemporal = false}> : (memref<32xf32>, index) -> f32
            %58 = "arith.addf"(%57, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %59 = "arith.mulf"(%58, %22) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %60 = "arith.cmpf"(%59, %3) <{predicate = 4 : i64}> : (f32, f32) -> i1
            %61 = "scf.if"(%60) ({
              "scf.yield"(%3) : (f32) -> ()
            }, {
              %62 = "arith.cmpf"(%59, %4) <{predicate = 2 : i64}> : (f32, f32) -> i1
              %63 = "arith.select"(%62, %4, %59) : (i1, f32, f32) -> f32
              "scf.yield"(%63) : (f32) -> ()
            }) : (i1) -> f32
            "memref.store"(%61, %27, %arg5) <{nontemporal = false}> : (f32, memref<32xf32>, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          %54 = "llvm.getelementptr"(%19, %50) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %55 = "polygeist.pointer2memref"(%54) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %56 = "func.call"(%55, %33) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %38 = "arith.extsi"(%31) : (i32) -> i64
        %39 = "arith.addi"(%24, %38) : (i64, i64) -> i64
        %40 = "arith.index_cast"(%39) : (i64) -> index
        %41 = "arith.subi"(%25, %40) : (index, index) -> index
        %42 = "arith.addi"(%23, %41) : (index, index) -> index
        %43 = "arith.divui"(%42, %21) : (index, index) -> index
        "scf.for"(%6, %43, %7) ({
        ^bb0(%arg4: index):
          %44 = "arith.muli"(%arg4, %21) : (index, index) -> index
          %45 = "arith.addi"(%44, %40) : (index, index) -> index
          %46 = "memref.load"(%arg0, %45) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %47 = "arith.addf"(%46, %1) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %48 = "arith.mulf"(%47, %22) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %49 = "arith.cmpf"(%48, %3) <{predicate = 4 : i64}> : (f32, f32) -> i1
          %50 = "scf.if"(%49) ({
            "scf.yield"(%3) : (f32) -> ()
          }, {
            %51 = "arith.cmpf"(%48, %4) <{predicate = 2 : i64}> : (f32, f32) -> i1
            %52 = "arith.select"(%51, %4, %48) : (i1, f32, f32) -> f32
            "scf.yield"(%52) : (f32) -> ()
          }) : (i1) -> f32
          "memref.store"(%50, %arg1, %45) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%10 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%12 = "arith.index_cast"(%11) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%19 = "arith.index_cast"(%18) : (i64) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%28 = "arith.index_cast"(%11) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%30 = "arith.index_cast"(%23) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%35 = "arith.index_cast"(%arg2) : (i64) -> index
[ict-debug] MemRefAllocaToNPULowering: process op: 

%38 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xf32, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%38 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%39 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xf32, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 32 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 3.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 0.16666666666666666 : f64}> : () -> f64
      %5 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 4 : index}> : () -> index
      %8 = "arith.constant"() <{value = 0 : index}> : () -> index
      %9 = "arith.constant"() <{value = 1 : index}> : () -> index
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.divsi"(%arg2, %2) : (i64, i64) -> i64
      %12 = "npu.block_id"() : () -> i64
      %13 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %14 = "emitc.cast"(%12) : (i64) -> i32
      %15 = "arith.index_cast"(%13) : (index) -> i32
      %16 = "arith.constant"() <{value = 32 : index}> : () -> index
      %17 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %18 = "arith.index_cast"(%16) : (index) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "npu.block_num"() : () -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.index_cast"(%20) : (i64) -> i32
      %23 = "arith.muli"(%18, %22) : (i32, i32) -> i32
      %24 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %25 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %26 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %27 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %28 = "emitc.cast"(%11) : (i64) -> index
      %29 = "arith.index_cast"(%11) : (i64) -> index
      %30 = "emitc.cast"(%23) : (i32) -> index
      %31 = "arith.index_cast"(%23) : (i32) -> index
      %32 = "arith.truncf"(%4) : (f64) -> f32
      %33 = "arith.subi"(%31, %9) : (index, index) -> index
      %34 = "arith.muli"(%11, %2) : (i64, i64) -> i64
      %35 = "emitc.cast"(%arg2) : (i64) -> index
      %36 = "arith.index_cast"(%arg2) : (i64) -> index
      %37 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%8, %10, %37) ({
      ^bb0(%arg3: index):
        %38 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %39 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xf32, 5>
        %40 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %41 = "memref.cast"(%40) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %42 = "arith.index_cast"(%arg3) : (index) -> i32
        %43 = "arith.addi"(%42, %19) : (i32, i32) -> i32
        %44 = "polygeist.memref2pointer"(%39) : (memref<32xf32, 5>) -> !llvm.ptr
        %45 = "polygeist.pointer2memref"(%44) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %46 = "arith.index_cast"(%43) : (i32) -> index
        %47 = "arith.subi"(%29, %46) : (index, index) -> index
        %48 = "arith.addi"(%33, %47) : (index, index) -> index
        %49 = "arith.divui"(%48, %31) : (index, index) -> index
        "scf.for"(%8, %49, %9) ({
        ^bb0(%arg4: index):
          %56 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %57 = "arith.addi"(%46, %56) : (index, index) -> index
          %58 = "arith.index_cast"(%57) : (index) -> i64
          %59 = "arith.muli"(%58, %2) : (i64, i64) -> i64
          %60 = "arith.index_cast"(%59) : (i64) -> index
          %61 = "arith.muli"(%60, %7) : (index, index) -> index
          %62 = "arith.index_cast"(%61) : (index) -> i64
          %63 = "llvm.getelementptr"(%25, %62) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %64 = "polygeist.pointer2memref"(%63) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%41, %64) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %65 = "func.call"(%45, %41) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.for"(%8, %10, %9) ({
          ^bb0(%arg5: index):
            %69 = "memref.load"(%39, %arg5) <{nontemporal = false}> : (memref<32xf32, 5>, index) -> f32
            %70 = "arith.addf"(%69, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %71 = "arith.mulf"(%70, %32) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %72 = "arith.cmpf"(%71, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
            %73 = "scf.if"(%72) ({
              "scf.yield"(%5) : (f32) -> ()
            }, {
              %74 = "arith.cmpf"(%71, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
              %75 = "arith.select"(%74, %6, %71) : (i1, f32, f32) -> f32
              "scf.yield"(%75) : (f32) -> ()
            }) : (i1) -> f32
            "memref.store"(%73, %39, %arg5) <{nontemporal = false}> : (f32, memref<32xf32, 5>, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          %66 = "llvm.getelementptr"(%27, %62) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %67 = "polygeist.pointer2memref"(%66) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %68 = "func.call"(%67, %45) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %50 = "arith.extsi"(%43) : (i32) -> i64
        %51 = "arith.addi"(%34, %50) : (i64, i64) -> i64
        %52 = "arith.index_cast"(%51) : (i64) -> index
        %53 = "arith.subi"(%36, %52) : (index, index) -> index
        %54 = "arith.addi"(%33, %53) : (index, index) -> index
        %55 = "arith.divui"(%54, %31) : (index, index) -> index
        "scf.for"(%8, %55, %9) ({
        ^bb0(%arg4: index):
          %56 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %57 = "arith.addi"(%56, %52) : (index, index) -> index
          %58 = "memref.load"(%arg0, %57) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %59 = "arith.addf"(%58, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %60 = "arith.mulf"(%59, %32) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %61 = "arith.cmpf"(%60, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
          %62 = "scf.if"(%61) ({
            "scf.yield"(%5) : (f32) -> ()
          }, {
            %63 = "arith.cmpf"(%60, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
            %64 = "arith.select"(%63, %6, %60) : (i1, f32, f32) -> f32
            "scf.yield"(%64) : (f32) -> ()
          }) : (i1) -> f32
          "memref.store"(%62, %arg1, %57) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] MemRefAllocaToNPULowering: process op: 

%40 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
[ict-debug] MemRefAllocaToNPULowering: memory space is 5

MemRefAllocaToNPULowering: newAllocaOp: 
%40 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
MemRefAllocaToNPULowering: old allocaOp: 
%41 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
MemRefAllocaToNPULowering: module: 
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 32 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 3.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 0.16666666666666666 : f64}> : () -> f64
      %5 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 4 : index}> : () -> index
      %8 = "arith.constant"() <{value = 0 : index}> : () -> index
      %9 = "arith.constant"() <{value = 1 : index}> : () -> index
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.divsi"(%arg2, %2) : (i64, i64) -> i64
      %12 = "npu.block_id"() : () -> i64
      %13 = "gpu.block_id"() <{dimension = #gpu<dim x>}> : () -> index
      %14 = "emitc.cast"(%12) : (i64) -> i32
      %15 = "arith.index_cast"(%13) : (index) -> i32
      %16 = "arith.constant"() <{value = 32 : index}> : () -> index
      %17 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %18 = "arith.index_cast"(%16) : (index) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "npu.block_num"() : () -> i64
      %21 = "emitc.cast"(%20) : (i64) -> i32
      %22 = "arith.index_cast"(%20) : (i64) -> i32
      %23 = "arith.muli"(%18, %22) : (i32, i32) -> i32
      %24 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %25 = "polygeist.memref2pointer"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %26 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %27 = "polygeist.memref2pointer"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %28 = "emitc.cast"(%11) : (i64) -> index
      %29 = "arith.index_cast"(%11) : (i64) -> index
      %30 = "emitc.cast"(%23) : (i32) -> index
      %31 = "arith.index_cast"(%23) : (i32) -> index
      %32 = "arith.truncf"(%4) : (f64) -> f32
      %33 = "arith.subi"(%31, %9) : (index, index) -> index
      %34 = "arith.muli"(%11, %2) : (i64, i64) -> i64
      %35 = "emitc.cast"(%arg2) : (i64) -> index
      %36 = "arith.index_cast"(%arg2) : (i64) -> index
      %37 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%8, %10, %37) ({
      ^bb0(%arg3: index):
        %38 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %39 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xf32, 5>
        %40 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %41 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %42 = "memref.cast"(%41) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %43 = "arith.index_cast"(%arg3) : (index) -> i32
        %44 = "arith.addi"(%43, %19) : (i32, i32) -> i32
        %45 = "polygeist.memref2pointer"(%39) : (memref<32xf32, 5>) -> !llvm.ptr
        %46 = "polygeist.pointer2memref"(%45) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %47 = "arith.index_cast"(%44) : (i32) -> index
        %48 = "arith.subi"(%29, %47) : (index, index) -> index
        %49 = "arith.addi"(%33, %48) : (index, index) -> index
        %50 = "arith.divui"(%49, %31) : (index, index) -> index
        "scf.for"(%8, %50, %9) ({
        ^bb0(%arg4: index):
          %57 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %58 = "arith.addi"(%47, %57) : (index, index) -> index
          %59 = "arith.index_cast"(%58) : (index) -> i64
          %60 = "arith.muli"(%59, %2) : (i64, i64) -> i64
          %61 = "arith.index_cast"(%60) : (i64) -> index
          %62 = "arith.muli"(%61, %7) : (index, index) -> index
          %63 = "arith.index_cast"(%62) : (index) -> i64
          %64 = "llvm.getelementptr"(%25, %63) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %65 = "polygeist.pointer2memref"(%64) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%42, %65) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %66 = "func.call"(%46, %42) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.for"(%8, %10, %9) ({
          ^bb0(%arg5: index):
            %70 = "memref.load"(%39, %arg5) <{nontemporal = false}> : (memref<32xf32, 5>, index) -> f32
            %71 = "arith.addf"(%70, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %72 = "arith.mulf"(%71, %32) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
            %73 = "arith.cmpf"(%72, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
            %74 = "scf.if"(%73) ({
              "scf.yield"(%5) : (f32) -> ()
            }, {
              %75 = "arith.cmpf"(%72, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
              %76 = "arith.select"(%75, %6, %72) : (i1, f32, f32) -> f32
              "scf.yield"(%76) : (f32) -> ()
            }) : (i1) -> f32
            "memref.store"(%74, %39, %arg5) <{nontemporal = false}> : (f32, memref<32xf32, 5>, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          %67 = "llvm.getelementptr"(%27, %63) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %68 = "polygeist.pointer2memref"(%67) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %69 = "func.call"(%68, %46) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %51 = "arith.extsi"(%44) : (i32) -> i64
        %52 = "arith.addi"(%34, %51) : (i64, i64) -> i64
        %53 = "arith.index_cast"(%52) : (i64) -> index
        %54 = "arith.subi"(%36, %53) : (index, index) -> index
        %55 = "arith.addi"(%33, %54) : (index, index) -> index
        %56 = "arith.divui"(%55, %31) : (index, index) -> index
        "scf.for"(%8, %56, %9) ({
        ^bb0(%arg4: index):
          %57 = "arith.muli"(%arg4, %31) : (index, index) -> index
          %58 = "arith.addi"(%57, %53) : (index, index) -> index
          %59 = "memref.load"(%arg0, %58) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %60 = "arith.addf"(%59, %3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %61 = "arith.mulf"(%60, %32) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %62 = "arith.cmpf"(%61, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
          %63 = "scf.if"(%62) ({
            "scf.yield"(%5) : (f32) -> ()
          }, {
            %64 = "arith.cmpf"(%61, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
            %65 = "arith.select"(%64, %6, %61) : (i1, f32, f32) -> f32
            "scf.yield"(%65) : (f32) -> ()
          }) : (i1) -> f32
          "memref.store"(%63, %arg1, %58) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
MemRefAllocaToNPULowering: module: end
[ict-debug] CastLikeOpToNPULowering: process op: 

%44 = "arith.index_cast"(%arg3) : (index) -> i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%52 = "arith.index_cast"(%46) : (i32) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%66 = "arith.index_cast"(%64) : (index) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%69 = "arith.index_cast"(%68) : (i64) -> index
[ict-debug] CastLikeOpToNPULowering: process op: 

%73 = "arith.index_cast"(%71) : (index) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%57 = "arith.extsi"(%46) : (i32) -> i64
[ict-debug] CastLikeOpToNPULowering: process op: 

%60 = "arith.index_cast"(%59) : (i64) -> index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 32 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 3.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 0.16666666666666666 : f64}> : () -> f64
      %5 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 4 : index}> : () -> index
      %8 = "arith.constant"() <{value = 0 : index}> : () -> index
      %9 = "arith.constant"() <{value = 1 : index}> : () -> index
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.divsi"(%arg2, %2) : (i64, i64) -> i64
      %12 = "npu.block_id"() : () -> i64
      %13 = "emitc.cast"(%12) : (i64) -> i32
      %14 = "arith.constant"() <{value = 32 : index}> : () -> index
      %15 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %16 = "arith.muli"(%13, %15) : (i32, i32) -> i32
      %17 = "npu.block_num"() : () -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %21 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %22 = "emitc.cast"(%11) : (i64) -> index
      %23 = "emitc.cast"(%19) : (i32) -> index
      %24 = "arith.truncf"(%4) : (f64) -> f32
      %25 = "arith.subi"(%23, %9) : (index, index) -> index
      %26 = "arith.muli"(%11, %2) : (i64, i64) -> i64
      %27 = "emitc.cast"(%arg2) : (i64) -> index
      %28 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%8, %10, %28) ({
      ^bb0(%arg3: index):
        %29 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %30 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %31 = "builtin.unrealized_conversion_cast"(%30) : (!llvm.ptr<6>) -> memref<32xf32, 5>
        %32 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %33 = "builtin.unrealized_conversion_cast"(%32) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %34 = "memref.cast"(%33) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %35 = "emitc.cast"(%29) : (i64) -> i32
        %36 = "arith.addi"(%35, %16) : (i32, i32) -> i32
        %37 = "llvm.bitcast"(%30) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %38 = "llvm.addrspacecast"(%37) : (!llvm.ptr<5>) -> !llvm.ptr
        %39 = "llvm.bitcast"(%38) : (!llvm.ptr) -> !llvm.ptr
        %40 = "builtin.unrealized_conversion_cast"(%39) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %41 = "emitc.cast"(%36) : (i32) -> index
        %42 = "arith.subi"(%22, %41) : (index, index) -> index
        %43 = "arith.addi"(%25, %42) : (index, index) -> index
        %44 = "arith.divui"(%43, %23) : (index, index) -> index
        "scf.for"(%8, %44, %9) ({
        ^bb0(%arg4: index):
          %51 = "arith.muli"(%arg4, %23) : (index, index) -> index
          %52 = "arith.addi"(%41, %51) : (index, index) -> index
          %53 = "builtin.unrealized_conversion_cast"(%52) : (index) -> i64
          %54 = "emitc.cast"(%53) : (i64) -> i64
          %55 = "arith.muli"(%54, %2) : (i64, i64) -> i64
          %56 = "emitc.cast"(%55) : (i64) -> index
          %57 = "arith.muli"(%56, %7) : (index, index) -> index
          %58 = "builtin.unrealized_conversion_cast"(%57) : (index) -> i64
          %59 = "emitc.cast"(%58) : (i64) -> i64
          %60 = "llvm.getelementptr"(%20, %59) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %61 = "llvm.bitcast"(%60) : (!llvm.ptr) -> !llvm.ptr
          %62 = "builtin.unrealized_conversion_cast"(%61) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%34, %62) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %63 = "func.call"(%40, %34) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.for"(%8, %10, %9) ({
          ^bb0(%arg5: index):
            %68 = "memref.load"(%31, %arg5) <{nontemporal = false}> : (memref<32xf32, 5>, index) -> f32
            %69 = "emitc.add"(%68, %3) : (f32, f32) -> f32
            %70 = "emitc.mul"(%69, %24) : (f32, f32) -> f32
            %71 = "arith.cmpf"(%70, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
            %72 = "scf.if"(%71) ({
              "scf.yield"(%5) : (f32) -> ()
            }, {
              %73 = "arith.cmpf"(%70, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
              %74 = "arith.select"(%73, %6, %70) : (i1, f32, f32) -> f32
              "scf.yield"(%74) : (f32) -> ()
            }) : (i1) -> f32
            "memref.store"(%72, %31, %arg5) <{nontemporal = false}> : (f32, memref<32xf32, 5>, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          %64 = "llvm.getelementptr"(%21, %59) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %65 = "llvm.bitcast"(%64) : (!llvm.ptr) -> !llvm.ptr
          %66 = "builtin.unrealized_conversion_cast"(%65) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %67 = "func.call"(%66, %40) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %45 = "emitc.cast"(%36) : (i32) -> i64
        %46 = "arith.addi"(%26, %45) : (i64, i64) -> i64
        %47 = "emitc.cast"(%46) : (i64) -> index
        %48 = "arith.subi"(%27, %47) : (index, index) -> index
        %49 = "arith.addi"(%25, %48) : (index, index) -> index
        %50 = "arith.divui"(%49, %23) : (index, index) -> index
        "scf.for"(%8, %50, %9) ({
        ^bb0(%arg4: index):
          %51 = "arith.muli"(%arg4, %23) : (index, index) -> index
          %52 = "arith.addi"(%51, %47) : (index, index) -> index
          %53 = "memref.load"(%arg0, %52) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %54 = "emitc.add"(%53, %3) : (f32, f32) -> f32
          %55 = "emitc.mul"(%54, %24) : (f32, f32) -> f32
          %56 = "arith.cmpf"(%55, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
          %57 = "scf.if"(%56) ({
            "scf.yield"(%5) : (f32) -> ()
          }, {
            %58 = "arith.cmpf"(%55, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
            %59 = "arith.select"(%58, %6, %55) : (i1, f32, f32) -> f32
            "scf.yield"(%59) : (f32) -> ()
          }) : (i1) -> f32
          "memref.store"(%57, %arg1, %52) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

loc("./cuda_ops/28_HardSigmoid.cu":30:9): error: 'memref.cast' op operand type 'memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>' and result type 'memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>' are cast incompatible
"builtin.module"() ({
  "gpu.module"() ({
    "gpu.func"() <{function_type = (memref<?xf32>, memref<?xf32>, i64) -> ()}> ({
    ^bb0(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i64):
      %0 = "builtin.unrealized_conversion_cast"(%arg0) : (memref<?xf32>) -> !llvm.ptr
      %1 = "builtin.unrealized_conversion_cast"(%arg1) : (memref<?xf32>) -> !llvm.ptr
      %2 = "arith.constant"() <{value = 32 : i64}> : () -> i64
      %3 = "arith.constant"() <{value = 3.000000e+00 : f32}> : () -> f32
      %4 = "arith.constant"() <{value = 0.16666666666666666 : f64}> : () -> f64
      %5 = "arith.constant"() <{value = 0.000000e+00 : f32}> : () -> f32
      %6 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %7 = "arith.constant"() <{value = 4 : index}> : () -> index
      %8 = "arith.constant"() <{value = 0 : index}> : () -> index
      %9 = "arith.constant"() <{value = 1 : index}> : () -> index
      %10 = "arith.constant"() <{value = 32 : index}> : () -> index
      %11 = "arith.divsi"(%arg2, %2) : (i64, i64) -> i64
      %12 = "npu.block_id"() : () -> i64
      %13 = "emitc.cast"(%12) : (i64) -> i32
      %14 = "arith.constant"() <{value = 32 : index}> : () -> index
      %15 = "arith.constant"() <{value = 32 : i32}> : () -> i32
      %16 = "arith.muli"(%13, %15) : (i32, i32) -> i32
      %17 = "npu.block_num"() : () -> i64
      %18 = "emitc.cast"(%17) : (i64) -> i32
      %19 = "arith.muli"(%15, %18) : (i32, i32) -> i32
      %20 = "llvm.bitcast"(%0) : (!llvm.ptr) -> !llvm.ptr
      %21 = "llvm.bitcast"(%1) : (!llvm.ptr) -> !llvm.ptr
      %22 = "emitc.cast"(%11) : (i64) -> index
      %23 = "emitc.cast"(%19) : (i32) -> index
      %24 = "arith.truncf"(%4) : (f64) -> f32
      %25 = "arith.subi"(%23, %9) : (index, index) -> index
      %26 = "arith.muli"(%11, %2) : (i64, i64) -> i64
      %27 = "emitc.cast"(%arg2) : (i64) -> index
      %28 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%8, %10, %28) ({
      ^bb0(%arg3: index):
        %29 = "builtin.unrealized_conversion_cast"(%arg3) : (index) -> i64
        %30 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %31 = "builtin.unrealized_conversion_cast"(%30) : (!llvm.ptr<6>) -> memref<32xf32, 5>
        %32 = "npu.alloca"() <{numElems = 32 : i32}> : () -> !llvm.ptr<6>
        %33 = "builtin.unrealized_conversion_cast"(%32) : (!llvm.ptr<6>) -> memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>
        %34 = "memref.cast"(%33) : (memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, 5>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %35 = "emitc.cast"(%29) : (i64) -> i32
        %36 = "arith.addi"(%35, %16) : (i32, i32) -> i32
        %37 = "llvm.bitcast"(%30) : (!llvm.ptr<6>) -> !llvm.ptr<5>
        %38 = "llvm.addrspacecast"(%37) : (!llvm.ptr<5>) -> !llvm.ptr
        %39 = "llvm.bitcast"(%38) : (!llvm.ptr) -> !llvm.ptr
        %40 = "builtin.unrealized_conversion_cast"(%39) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
        %41 = "emitc.cast"(%36) : (i32) -> index
        %42 = "arith.subi"(%22, %41) : (index, index) -> index
        %43 = "arith.addi"(%25, %42) : (index, index) -> index
        %44 = "arith.divui"(%43, %23) : (index, index) -> index
        "scf.for"(%8, %44, %9) ({
        ^bb0(%arg4: index):
          %51 = "arith.muli"(%arg4, %23) : (index, index) -> index
          %52 = "arith.addi"(%41, %51) : (index, index) -> index
          %53 = "builtin.unrealized_conversion_cast"(%52) : (index) -> i64
          %54 = "emitc.cast"(%53) : (i64) -> i64
          %55 = "arith.muli"(%54, %2) : (i64, i64) -> i64
          %56 = "emitc.cast"(%55) : (i64) -> index
          %57 = "arith.muli"(%56, %7) : (index, index) -> index
          %58 = "builtin.unrealized_conversion_cast"(%57) : (index) -> i64
          %59 = "emitc.cast"(%58) : (i64) -> i64
          %60 = "llvm.getelementptr"(%20, %59) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %61 = "llvm.bitcast"(%60) : (!llvm.ptr) -> !llvm.ptr
          %62 = "builtin.unrealized_conversion_cast"(%61) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "func.call"(%34, %62) <{callee = @_ZN6float4C1ERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
          %63 = "func.call"(%40, %34) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.for"(%8, %10, %9) ({
          ^bb0(%arg5: index):
            %68 = "memref.load"(%31, %arg5) <{nontemporal = false}> : (memref<32xf32, 5>, index) -> f32
            %69 = "emitc.add"(%68, %3) : (f32, f32) -> f32
            %70 = "emitc.mul"(%69, %24) : (f32, f32) -> f32
            %71 = "arith.cmpf"(%70, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
            %72 = "scf.if"(%71) ({
              "scf.yield"(%5) : (f32) -> ()
            }, {
              %73 = "arith.cmpf"(%70, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
              %74 = "arith.select"(%73, %6, %70) : (i1, f32, f32) -> f32
              "scf.yield"(%74) : (f32) -> ()
            }) : (i1) -> f32
            "memref.store"(%72, %31, %arg5) <{nontemporal = false}> : (f32, memref<32xf32, 5>, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          %64 = "llvm.getelementptr"(%21, %59) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i64) -> !llvm.ptr
          %65 = "llvm.bitcast"(%64) : (!llvm.ptr) -> !llvm.ptr
          %66 = "builtin.unrealized_conversion_cast"(%65) : (!llvm.ptr) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          %67 = "func.call"(%66, %40) <{callee = @_ZN6float4aSERKS_}> : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        %45 = "emitc.cast"(%36) : (i32) -> i64
        %46 = "arith.addi"(%26, %45) : (i64, i64) -> i64
        %47 = "emitc.cast"(%46) : (i64) -> index
        %48 = "arith.subi"(%27, %47) : (index, index) -> index
        %49 = "arith.addi"(%25, %48) : (index, index) -> index
        %50 = "arith.divui"(%49, %23) : (index, index) -> index
        "scf.for"(%8, %50, %9) ({
        ^bb0(%arg4: index):
          %51 = "arith.muli"(%arg4, %23) : (index, index) -> index
          %52 = "arith.addi"(%51, %47) : (index, index) -> index
          %53 = "memref.load"(%arg0, %52) <{nontemporal = false}> : (memref<?xf32>, index) -> f32
          %54 = "emitc.add"(%53, %3) : (f32, f32) -> f32
          %55 = "emitc.mul"(%54, %24) : (f32, f32) -> f32
          %56 = "arith.cmpf"(%55, %5) <{predicate = 4 : i64}> : (f32, f32) -> i1
          %57 = "scf.if"(%56) ({
            "scf.yield"(%5) : (f32) -> ()
          }, {
            %58 = "arith.cmpf"(%55, %6) <{predicate = 2 : i64}> : (f32, f32) -> i1
            %59 = "arith.select"(%58, %6, %55) : (i1, f32, f32) -> f32
            "scf.yield"(%59) : (f32) -> ()
          }) : (i1) -> f32
          "memref.store"(%57, %arg1, %52) <{nontemporal = false}> : (f32, memref<?xf32>, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "gpu.return"() : () -> ()
    }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm", workgroup_attributions = 0 : i64} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> (), sym_name = "_ZN6float4C1ERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "llvm.load"(%0) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %2 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      "llvm.store"(%1, %2) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %5 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%4, %5) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.load"(%6) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %8 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%7, %8) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.load"(%9) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      %11 = "llvm.getelementptr"(%2) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%10, %11) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"() : () -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "func.func"() <{function_type = (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, sym_name = "_ZN6float4aSERKS_", sym_visibility = "private"}> ({
    ^bb0(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>):
      %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> !llvm.ptr
      %2 = "llvm.load"(%1) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%2, %0) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %3 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %4 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 1>}> : (!llvm.ptr) -> !llvm.ptr
      %5 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %6 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %7 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 2>}> : (!llvm.ptr) -> !llvm.ptr
      %8 = "llvm.load"(%7) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%8, %6) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      %9 = "llvm.getelementptr"(%0) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %10 = "llvm.getelementptr"(%1) <{elem_type = !llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>, rawConstantIndices = array<i32: 0, 3>}> : (!llvm.ptr) -> !llvm.ptr
      %11 = "llvm.load"(%10) <{ordering = 0 : i64}> : (!llvm.ptr) -> f32
      "llvm.store"(%11, %9) <{ordering = 0 : i64}> : (f32, !llvm.ptr) -> ()
      "func.return"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.float4", (f32, f32, f32, f32)>>) -> ()
    }) {llvm.linkage = #llvm.linkage<linkonce_odr>} : () -> ()
    "gpu.module_end"() : () -> ()
  }) {sym_name = "_Z27hardsigmoid_kernel_unrolledPKfPfm_0"} : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
