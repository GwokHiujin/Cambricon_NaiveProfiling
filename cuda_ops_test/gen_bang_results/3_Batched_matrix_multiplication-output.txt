warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z45__device_stub__bmm_tiled_shared_memory_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z30bmm_tiled_shared_memory_kernelPKfS0_Pfiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z30bmm_tiled_shared_memory_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32_i32 = arith.constant 32 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c31_i32 = arith.constant 31 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_id  y
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_id  z
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.thread_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.thread_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %6, %c32_i32 : i32
    %17 = arith.addi %16, %15 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.muli %17, %arg6 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.muli %4, %c32_i32 : i32
    %22 = arith.addi %21, %13 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.index_cast %22 : i32 to index
    %25 = arith.muli %8, %arg4 : i32
    %26 = arith.muli %25, %arg5 : i32
    %27 = arith.muli %8, %arg5 : i32
    %28 = arith.muli %27, %arg6 : i32
    %29 = arith.index_cast %28 : i32 to index
    %30 = arith.addi %arg5, %c31_i32 : i32
    %31 = arith.divsi %30, %c32_i32 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.muli %17, %arg5 : i32
    %34 = arith.addi %26, %33 : i32
    %35 = arith.index_cast %34 : i32 to index
    %36 = arith.cmpi slt, %22, %arg6 : i32
    %37 = affine.for %arg7 = 0 to %32 iter_args(%arg8 = %cst) -> (f32) {
      %41 = arith.index_cast %arg7 : index to i32
      %42 = affine.if affine_set<()[s0, s1] : (-s0 + s1 - 1 >= 0)>()[%18, %0] -> i1 {
        %45 = arith.muli %41, %c32_i32 : i32
        %46 = arith.addi %45, %13 : i32
        %47 = arith.cmpi slt, %46, %arg5 : i32
        affine.yield %47 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %42 {
        %45 = affine.load %arg0[%arg7 * 32 + symbol(%35) + symbol(%12)] : memref<?xf32>
        affine.store %45, %alloca_0[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      }
      %43 = affine.if affine_set<(d0)[s0, s1] : (d0 * -32 - s0 + s1 - 1 >= 0)>(%arg7)[%14, %1] -> i1 {
        affine.yield %36 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %43 {
        %45 = affine.load %arg1[(%arg7 * 32 + symbol(%14)) * symbol(%2) + symbol(%29) + symbol(%23)] : memref<?xf32>
        affine.store %45, %alloca[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %44 = affine.for %arg9 = 0 to 32 iter_args(%arg10 = %arg8) -> (f32) {
        %45 = affine.load %alloca_0[symbol(%14), %arg9] : memref<32x32xf32, 5>
        %46 = affine.load %alloca[%arg9, symbol(%12)] : memref<32x32xf32, 5>
        %47 = func.call @_ZL9__fmaf_rnfff(%45, %46, %arg10) : (f32, f32, f32) -> f32
        affine.yield %47 : f32
      }
      nvvm.barrier0
      affine.yield %44 : f32
    }
    %38 = arith.cmpi slt, %17, %arg4 : i32
    %39 = arith.cmpi slt, %22, %arg6 : i32
    %40 = arith.andi %38, %39 : i1
    scf.if %40 {
      affine.store %37, %arg2[symbol(%11) + symbol(%20) + symbol(%24)] : memref<?xf32>
    }
    return
  }
  func.func private @_ZL9__fmaf_rnfff(%arg0: f32, %arg1: f32, %arg2: f32) -> f32 attributes {llvm.linkage = #llvm.linkage<internal>, polygeist.device_only_func = "1"} {
    %0 = call @__nv_fmaf_rn(%arg0, %arg1, %arg2) : (f32, f32, f32) -> f32
    return %0 : f32
  }
  func.func private @__nv_fmaf_rn(f32, f32, f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30bmm_tiled_shared_memory_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32_i32 = arith.constant 32 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c31_i32 = arith.constant 31 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_id  y
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_id  z
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.thread_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.thread_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %6, %c32_i32 : i32
    %17 = arith.addi %16, %15 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.muli %17, %arg6 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.muli %4, %c32_i32 : i32
    %22 = arith.addi %21, %13 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.muli %9, %arg5 : i32
    %25 = arith.muli %8, %arg5 : i32
    %26 = arith.muli %25, %arg6 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.addi %arg5, %c31_i32 : i32
    %29 = arith.divsi %28, %c32_i32 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.muli %17, %arg5 : i32
    %32 = arith.addi %24, %31 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.cmpi slt, %22, %arg6 : i32
    %35 = affine.for %arg7 = 0 to %30 iter_args(%arg8 = %cst) -> (f32) {
      %38 = arith.index_cast %arg7 : index to i32
      %39 = affine.if affine_set<()[s0, s1] : (s0 - s1 - 1 >= 0)>()[%0, %18] -> i1 {
        %41 = arith.muli %38, %c32_i32 : i32
        %42 = arith.addi %41, %13 : i32
        %43 = arith.cmpi slt, %42, %arg5 : i32
        affine.yield %43 : i1
      } else {
        affine.yield %false : i1
      }
      scf.if %39 {
        %41 = affine.load %arg0[%arg7 * 32 + symbol(%33) + symbol(%12)] : memref<?xf32>
        affine.store %41, %alloca_0[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca_0[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      }
      affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * -32 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg7)[%14, %1, %23, %2] {
        %41 = affine.load %arg1[(%arg7 * 32 + symbol(%14)) * symbol(%2) + symbol(%27) + symbol(%23)] : memref<?xf32>
        affine.store %41, %alloca[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      } else {
        affine.store %cst, %alloca[symbol(%14), symbol(%12)] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %40 = affine.for %arg9 = 0 to 32 iter_args(%arg10 = %arg8) -> (f32) {
        %41 = affine.load %alloca_0[symbol(%14), %arg9] : memref<32x32xf32, 5>
        %42 = affine.load %alloca[%arg9, symbol(%12)] : memref<32x32xf32, 5>
        %43 = func.call @__nv_fmaf_rn(%41, %42, %arg10) : (f32, f32, f32) -> f32
        affine.yield %43 : f32
      }
      nvvm.barrier0
      affine.yield %40 : f32
    }
    %36 = arith.cmpi slt, %17, %arg4 : i32
    %37 = arith.andi %36, %34 : i1
    scf.if %37 {
      affine.store %35, %arg2[symbol(%11) + symbol(%20) + symbol(%23)] : memref<?xf32>
    }
    return
  }
  func.func private @__nv_fmaf_rn(f32, f32, f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30bmm_tiled_shared_memory_kernelPKfS0_Pfiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-32 = arith.constant -32 : index
    %c32 = arith.constant 32 : index
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c32_i32 = arith.constant 32 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c31_i32 = arith.constant 31 : i32
    %0 = arith.index_cast %arg4 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %alloca = memref.alloca() : memref<32x32xf32, 5>
    %alloca_0 = memref.alloca() : memref<32x32xf32, 5>
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_id  y
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_id  z
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %8, %arg4 : i32
    %10 = arith.muli %9, %arg6 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.thread_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = gpu.thread_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %6, %c32_i32 : i32
    %17 = arith.addi %16, %15 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.muli %17, %arg6 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.muli %4, %c32_i32 : i32
    %22 = arith.addi %21, %13 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = arith.muli %9, %arg5 : i32
    %25 = arith.muli %8, %arg5 : i32
    %26 = arith.muli %25, %arg6 : i32
    %27 = arith.index_cast %26 : i32 to index
    %28 = arith.addi %arg5, %c31_i32 : i32
    %29 = arith.divsi %28, %c32_i32 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.muli %17, %arg5 : i32
    %32 = arith.addi %24, %31 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.cmpi slt, %22, %arg6 : i32
    %35 = scf.for %arg7 = %c0 to %30 step %c1 iter_args(%arg8 = %cst) -> (f32) {
      %38 = arith.index_cast %arg7 : index to i32
      %39 = arith.subi %0, %18 : index
      %40 = arith.addi %39, %c-1 : index
      %41 = arith.cmpi sge, %40, %c0 : index
      %42 = scf.if %41 -> (i1) {
        %53 = arith.muli %38, %c32_i32 : i32
        %54 = arith.addi %53, %13 : i32
        %55 = arith.cmpi slt, %54, %arg5 : i32
        scf.yield %55 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %42 {
        %53 = arith.muli %arg7, %c32 : index
        %54 = arith.addi %53, %33 : index
        %55 = arith.addi %54, %12 : index
        %56 = memref.load %arg0[%55] : memref<?xf32>
        memref.store %56, %alloca_0[%14, %12] : memref<32x32xf32, 5>
      } else {
        memref.store %cst, %alloca_0[%14, %12] : memref<32x32xf32, 5>
      }
      %43 = arith.muli %arg7, %c-32 : index
      %44 = arith.subi %43, %14 : index
      %45 = arith.addi %44, %1 : index
      %46 = arith.addi %45, %c-1 : index
      %47 = arith.cmpi sge, %46, %c0 : index
      %48 = arith.subi %2, %23 : index
      %49 = arith.addi %48, %c-1 : index
      %50 = arith.cmpi sge, %49, %c0 : index
      %51 = arith.andi %47, %50 : i1
      scf.if %51 {
        %53 = arith.muli %arg7, %c32 : index
        %54 = arith.addi %53, %14 : index
        %55 = arith.muli %54, %2 : index
        %56 = arith.addi %27, %23 : index
        %57 = arith.addi %55, %56 : index
        %58 = memref.load %arg1[%57] : memref<?xf32>
        memref.store %58, %alloca[%14, %12] : memref<32x32xf32, 5>
      } else {
        memref.store %cst, %alloca[%14, %12] : memref<32x32xf32, 5>
      }
      nvvm.barrier0
      %52 = scf.for %arg9 = %c0 to %c32 step %c1 iter_args(%arg10 = %arg8) -> (f32) {
        %53 = memref.load %alloca_0[%14, %arg9] : memref<32x32xf32, 5>
        %54 = memref.load %alloca[%arg9, %12] : memref<32x32xf32, 5>
        %55 = func.call @__nv_fmaf_rn(%53, %54, %arg10) : (f32, f32, f32) -> f32
        scf.yield %55 : f32
      }
      nvvm.barrier0
      scf.yield %52 : f32
    }
    %36 = arith.cmpi slt, %17, %arg4 : i32
    %37 = arith.andi %36, %34 : i1
    scf.if %37 {
      %38 = arith.addi %11, %20 : index
      %39 = arith.addi %38, %23 : index
      memref.store %35, %arg2[%39] : memref<?xf32>
    }
    return
  }
  func.func private @__nv_fmaf_rn(f32, f32, f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nv_fmaf_rn. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

