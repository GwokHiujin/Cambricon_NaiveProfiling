warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __builtin_inff
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z32__device_stub__max_pool1d_kernelPKfPfPliiiiiiiib(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xi64>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z17max_pool1d_kernelPKfPfPliiiiiiiib(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11) : (memref<?xf32>, memref<?xf32>, memref<?xi64>, i32, i32, i32, i32, i32, i32, i32, i32, i8) -> ()
    return
  }
  func.func private @_Z17max_pool1d_kernelPKfPfPliiiiiiiib(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xi64>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %c0_i8 = arith.constant 0 : i8
    %c-1_i32 = arith.constant -1 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg9 : i32 to index
    %4 = arith.index_cast %arg8 : i32 to index
    %5 = arith.index_cast %arg6 : i32 to index
    %6 = gpu.block_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = gpu.block_dim  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %7, %9 : i32
    %11 = gpu.thread_id  x
    %12 = arith.index_cast %11 : index to i32
    %13 = arith.addi %10, %12 : i32
    %14 = arith.muli %13, %arg7 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.index_cast %14 : i32 to index
    %17 = arith.index_cast %13 : i32 to index
    %18 = arith.index_cast %13 : i32 to index
    %19 = gpu.block_id  y
    %20 = arith.index_cast %19 : index to i32
    %21 = gpu.block_dim  y
    %22 = arith.index_cast %21 : index to i32
    %23 = arith.muli %20, %22 : i32
    %24 = gpu.thread_id  y
    %25 = arith.index_cast %24 : index to i32
    %26 = arith.addi %23, %25 : i32
    %27 = arith.muli %26, %arg5 : i32
    %28 = arith.index_cast %27 : i32 to index
    %29 = arith.muli %26, %arg10 : i32
    %30 = arith.index_cast %29 : i32 to index
    %31 = arith.index_cast %29 : i32 to index
    %32 = gpu.block_id  z
    %33 = arith.index_cast %32 : index to i32
    %34 = arith.muli %33, %arg4 : i32
    %35 = arith.muli %34, %arg5 : i32
    %36 = arith.index_cast %35 : i32 to index
    %37 = arith.muli %33, %arg4 : i32
    %38 = arith.muli %37, %arg10 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.index_cast %38 : i32 to index
    %41 = arith.cmpi sge, %33, %arg3 : i32
    %42 = scf.if %41 -> (i1) {
      scf.yield %true : i1
    } else {
      %45 = arith.cmpi sge, %26, %arg4 : i32
      scf.yield %45 : i1
    }
    %43 = scf.if %42 -> (i1) {
      scf.yield %true : i1
    } else {
      %45 = arith.cmpi sge, %13, %arg10 : i32
      scf.yield %45 : i1
    }
    %44 = arith.xori %43, %true : i1
    scf.if %44 {
      %45 = arith.subi %14, %arg8 : i32
      %46 = func.call @__builtin_inff() : () -> f32
      %47 = arith.negf %46 : f32
      %48:2 = affine.for %arg12 = 0 to %5 iter_args(%arg13 = %c-1_i32, %arg14 = %47) -> (i32, f32) {
        %50 = arith.index_cast %arg12 : index to i32
        %51 = arith.muli %50, %arg9 : i32
        %52 = arith.addi %45, %51 : i32
        %53:2 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * s2 + s0 - s1 >= 0, -(d0 * s2) - s0 + s1 + s3 - 1 >= 0)>(%arg12)[%15, %2, %1, %0] -> (i32, f32) {
          %54 = affine.load %arg0[%arg12 * symbol(%3) + symbol(%36) + symbol(%28) + symbol(%16) - symbol(%4)] : memref<?xf32>
          %55 = arith.cmpf ogt, %54, %arg14 : f32
          %56 = arith.select %55, %52, %arg13 : i32
          %57 = arith.select %55, %54, %arg14 : f32
          affine.yield %56, %57 : i32, f32
        } else {
          affine.yield %arg13, %arg14 : i32, f32
        }
        affine.yield %53#0, %53#1 : i32, f32
      }
      affine.store %48#1, %arg1[symbol(%39) + symbol(%30) + symbol(%17)] : memref<?xf32>
      %49 = arith.cmpi ne, %arg11, %c0_i8 : i8
      scf.if %49 {
        %50 = arith.extsi %48#0 : i32 to i64
        affine.store %50, %arg2[symbol(%40) + symbol(%31) + symbol(%18)] : memref<?xi64>
      }
    }
    return
  }
  func.func private @__builtin_inff() -> f32 attributes {llvm.linkage = #llvm.linkage<external>}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17max_pool1d_kernelPKfPfPliiiiiiiib(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xi64>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %c0_i8 = arith.constant 0 : i8
    %c-1_i32 = arith.constant -1 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %5, %7 : i32
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.addi %8, %10 : i32
    %12 = arith.muli %11, %arg7 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.index_cast %11 : i32 to index
    %15 = gpu.block_id  y
    %16 = arith.index_cast %15 : index to i32
    %17 = gpu.block_dim  y
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.muli %16, %18 : i32
    %20 = gpu.thread_id  y
    %21 = arith.index_cast %20 : index to i32
    %22 = arith.addi %19, %21 : i32
    %23 = arith.muli %22, %arg5 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %22, %arg10 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = gpu.block_id  z
    %28 = arith.index_cast %27 : index to i32
    %29 = arith.muli %28, %arg4 : i32
    %30 = arith.muli %29, %arg5 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %29, %arg10 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.cmpi sge, %28, %arg3 : i32
    %35 = scf.if %34 -> (i1) {
      scf.yield %true : i1
    } else {
      %38 = arith.cmpi sge, %22, %arg4 : i32
      scf.yield %38 : i1
    }
    %36 = scf.if %35 -> (i1) {
      scf.yield %true : i1
    } else {
      %38 = arith.cmpi sge, %11, %arg10 : i32
      scf.yield %38 : i1
    }
    %37 = arith.xori %36, %true : i1
    scf.if %37 {
      %38 = arith.subi %12, %arg8 : i32
      %39 = func.call @__builtin_inff() : () -> f32
      %40 = arith.negf %39 : f32
      %41:2 = affine.for %arg12 = 0 to %3 iter_args(%arg13 = %c-1_i32, %arg14 = %40) -> (i32, f32) {
        %43 = arith.index_cast %arg12 : index to i32
        %44 = arith.muli %43, %arg9 : i32
        %45 = arith.addi %38, %44 : i32
        %46:2 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * s0 + s1 - s2 >= 0, -(d0 * s0) - s1 + s2 + s3 - 1 >= 0)>(%arg12)[%1, %13, %2, %0] -> (i32, f32) {
          %47 = affine.load %arg0[%arg12 * symbol(%1) + symbol(%31) + symbol(%24) + symbol(%13) - symbol(%2)] : memref<?xf32>
          %48 = arith.cmpf ogt, %47, %arg14 : f32
          %49 = arith.select %48, %45, %arg13 : i32
          %50 = arith.select %48, %47, %arg14 : f32
          affine.yield %49, %50 : i32, f32
        } else {
          affine.yield %arg13, %arg14 : i32, f32
        }
        affine.yield %46#0, %46#1 : i32, f32
      }
      affine.store %41#1, %arg1[symbol(%33) + symbol(%26) + symbol(%14)] : memref<?xf32>
      %42 = arith.cmpi ne, %arg11, %c0_i8 : i8
      scf.if %42 {
        %43 = arith.extsi %41#0 : i32 to i64
        affine.store %43, %arg2[symbol(%33) + symbol(%26) + symbol(%14)] : memref<?xi64>
      }
    }
    return
  }
  func.func private @__builtin_inff() -> f32 attributes {llvm.linkage = #llvm.linkage<external>}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17max_pool1d_kernelPKfPfPliiiiiiiib(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xi64>, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i8) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %true = arith.constant true
    %c0_i8 = arith.constant 0 : i8
    %c-1_i32 = arith.constant -1 : i32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg9 : i32 to index
    %2 = arith.index_cast %arg8 : i32 to index
    %3 = arith.index_cast %arg6 : i32 to index
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %5, %7 : i32
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.addi %8, %10 : i32
    %12 = arith.muli %11, %arg7 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.index_cast %11 : i32 to index
    %15 = gpu.block_id  y
    %16 = arith.index_cast %15 : index to i32
    %17 = gpu.block_dim  y
    %18 = arith.index_cast %17 : index to i32
    %19 = arith.muli %16, %18 : i32
    %20 = gpu.thread_id  y
    %21 = arith.index_cast %20 : index to i32
    %22 = arith.addi %19, %21 : i32
    %23 = arith.muli %22, %arg5 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %22, %arg10 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = gpu.block_id  z
    %28 = arith.index_cast %27 : index to i32
    %29 = arith.muli %28, %arg4 : i32
    %30 = arith.muli %29, %arg5 : i32
    %31 = arith.index_cast %30 : i32 to index
    %32 = arith.muli %29, %arg10 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.cmpi sge, %28, %arg3 : i32
    %35 = scf.if %34 -> (i1) {
      scf.yield %true : i1
    } else {
      %38 = arith.cmpi sge, %22, %arg4 : i32
      scf.yield %38 : i1
    }
    %36 = scf.if %35 -> (i1) {
      scf.yield %true : i1
    } else {
      %38 = arith.cmpi sge, %11, %arg10 : i32
      scf.yield %38 : i1
    }
    %37 = arith.xori %36, %true : i1
    scf.if %37 {
      %38 = arith.subi %12, %arg8 : i32
      %39 = func.call @__builtin_inff() : () -> f32
      %40 = arith.negf %39 : f32
      %41:2 = scf.for %arg12 = %c0 to %3 step %c1 iter_args(%arg13 = %c-1_i32, %arg14 = %40) -> (i32, f32) {
        %45 = arith.index_cast %arg12 : index to i32
        %46 = arith.muli %45, %arg9 : i32
        %47 = arith.addi %38, %46 : i32
        %48 = arith.muli %arg12, %1 : index
        %49 = arith.subi %13, %2 : index
        %50 = arith.addi %48, %49 : index
        %51 = arith.cmpi sge, %50, %c0 : index
        %52 = arith.muli %48, %c-1 : index
        %53 = arith.subi %52, %13 : index
        %54 = arith.addi %53, %2 : index
        %55 = arith.addi %54, %0 : index
        %56 = arith.addi %55, %c-1 : index
        %57 = arith.cmpi sge, %56, %c0 : index
        %58 = arith.andi %51, %57 : i1
        %59:2 = scf.if %58 -> (i32, f32) {
          %60 = arith.addi %48, %31 : index
          %61 = arith.addi %60, %24 : index
          %62 = arith.addi %61, %13 : index
          %63 = arith.subi %62, %2 : index
          %64 = memref.load %arg0[%63] : memref<?xf32>
          %65 = arith.cmpf ogt, %64, %arg14 : f32
          %66 = arith.select %65, %47, %arg13 : i32
          %67 = arith.select %65, %64, %arg14 : f32
          scf.yield %66, %67 : i32, f32
        } else {
          scf.yield %arg13, %arg14 : i32, f32
        }
        scf.yield %59#0, %59#1 : i32, f32
      }
      %42 = arith.addi %33, %26 : index
      %43 = arith.addi %42, %14 : index
      memref.store %41#1, %arg1[%43] : memref<?xf32>
      %44 = arith.cmpi ne, %arg11, %c0_i8 : i8
      scf.if %44 {
        %45 = arith.extsi %41#0 : i32 to i64
        memref.store %45, %arg2[%43] : memref<?xi64>
      }
    }
    return
  }
  func.func private @__builtin_inff() -> f32 attributes {llvm.linkage = #llvm.linkage<external>}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

