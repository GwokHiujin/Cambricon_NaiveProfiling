warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z32__device_stub__avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg4 : i32 to index
    %3 = arith.index_cast %arg2 : i32 to index
    %4 = gpu.block_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = gpu.block_dim  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.muli %5, %7 : i32
    %9 = gpu.thread_id  x
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.addi %8, %10 : i32
    %12 = arith.muli %11, %arg3 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.index_cast %12 : i32 to index
    %15 = arith.index_cast %11 : i32 to index
    %16 = gpu.block_id  y
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %17, %arg5 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = arith.muli %17, %arg6 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = gpu.block_id  z
    %23 = arith.index_cast %22 : index to i32
    %24 = arith.muli %23, %arg8 : i32
    %25 = arith.muli %24, %arg5 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.muli %23, %arg8 : i32
    %28 = arith.muli %27, %arg6 : i32
    %29 = arith.index_cast %28 : i32 to index
    %30 = arith.cmpi sge, %11, %arg6 : i32
    %31 = scf.if %30 -> (i1) {
      scf.yield %true : i1
    } else {
      %34 = arith.cmpi sge, %17, %arg8 : i32
      scf.yield %34 : i1
    }
    %32 = scf.if %31 -> (i1) {
      scf.yield %true : i1
    } else {
      %34 = arith.cmpi sge, %23, %arg7 : i32
      scf.yield %34 : i1
    }
    %33 = arith.xori %32, %true : i1
    scf.if %33 {
      %34 = affine.for %arg9 = 0 to %3 iter_args(%arg10 = %cst) -> (f32) {
        %37 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 + s0 - s1 >= 0, -d0 - s0 + s1 + s2 - 1 >= 0)>(%arg9)[%13, %1, %0] -> f32 {
          %38 = affine.load %arg0[%arg9 + symbol(%26) + symbol(%19) + symbol(%14) - symbol(%2)] : memref<?xf32>
          %39 = arith.addf %arg10, %38 : f32
          affine.yield %39 : f32
        } else {
          affine.yield %arg10 : f32
        }
        affine.yield %37 : f32
      }
      %35 = arith.sitofp %arg2 : i32 to f32
      %36 = arith.divf %34, %35 : f32
      affine.store %36, %arg1[symbol(%29) + symbol(%21) + symbol(%15)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg2 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.addi %7, %9 : i32
    %11 = arith.muli %10, %arg3 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.index_cast %10 : i32 to index
    %14 = gpu.block_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %15, %arg5 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.muli %15, %arg6 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = gpu.block_id  z
    %21 = arith.index_cast %20 : index to i32
    %22 = arith.muli %21, %arg8 : i32
    %23 = arith.muli %22, %arg5 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %22, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.cmpi sge, %10, %arg6 : i32
    %28 = scf.if %27 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %15, %arg8 : i32
      scf.yield %31 : i1
    }
    %29 = scf.if %28 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %21, %arg7 : i32
      scf.yield %31 : i1
    }
    %30 = arith.xori %29, %true : i1
    scf.if %30 {
      %31 = affine.for %arg9 = 0 to %2 iter_args(%arg10 = %cst) -> (f32) {
        %34 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 + s0 - s1 >= 0, -d0 - s0 + s1 + s2 - 1 >= 0)>(%arg9)[%12, %1, %0] -> f32 {
          %35 = affine.load %arg0[%arg9 + symbol(%24) + symbol(%17) + symbol(%12) - symbol(%1)] : memref<?xf32>
          %36 = arith.addf %arg10, %35 : f32
          affine.yield %36 : f32
        } else {
          affine.yield %arg10 : f32
        }
        affine.yield %34 : f32
      }
      %32 = arith.sitofp %arg2 : i32 to f32
      %33 = arith.divf %31, %32 : f32
      affine.store %33, %arg1[symbol(%26) + symbol(%19) + symbol(%13)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %true = arith.constant true
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg2 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = gpu.thread_id  x
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.addi %7, %9 : i32
    %11 = arith.muli %10, %arg3 : i32
    %12 = arith.index_cast %11 : i32 to index
    %13 = arith.index_cast %10 : i32 to index
    %14 = gpu.block_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %15, %arg5 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = arith.muli %15, %arg6 : i32
    %19 = arith.index_cast %18 : i32 to index
    %20 = gpu.block_id  z
    %21 = arith.index_cast %20 : index to i32
    %22 = arith.muli %21, %arg8 : i32
    %23 = arith.muli %22, %arg5 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %22, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.cmpi sge, %10, %arg6 : i32
    %28 = scf.if %27 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %15, %arg8 : i32
      scf.yield %31 : i1
    }
    %29 = scf.if %28 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %21, %arg7 : i32
      scf.yield %31 : i1
    }
    %30 = arith.xori %29, %true : i1
    scf.if %30 {
      %31 = scf.for %arg9 = %c0 to %2 step %c1 iter_args(%arg10 = %cst) -> (f32) {
        %36 = arith.addi %arg9, %12 : index
        %37 = arith.subi %36, %1 : index
        %38 = arith.cmpi sge, %37, %c0 : index
        %39 = arith.muli %arg9, %c-1 : index
        %40 = arith.subi %39, %12 : index
        %41 = arith.addi %40, %1 : index
        %42 = arith.addi %41, %0 : index
        %43 = arith.addi %42, %c-1 : index
        %44 = arith.cmpi sge, %43, %c0 : index
        %45 = arith.andi %38, %44 : i1
        %46 = scf.if %45 -> (f32) {
          %47 = arith.addi %arg9, %24 : index
          %48 = arith.addi %47, %17 : index
          %49 = arith.addi %48, %12 : index
          %50 = arith.subi %49, %1 : index
          %51 = memref.load %arg0[%50] : memref<?xf32>
          %52 = arith.addf %arg10, %51 : f32
          scf.yield %52 : f32
        } else {
          scf.yield %arg10 : f32
        }
        scf.yield %46 : f32
      }
      %32 = arith.sitofp %arg2 : i32 to f32
      %33 = arith.divf %31, %32 : f32
      %34 = arith.addi %26, %19 : index
      %35 = arith.addi %34, %13 : index
      memref.store %33, %arg1[%35] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg9) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %true = arith.constant true
      %cst = arith.constant 0.000000e+00 : f32
      %0 = arith.index_cast %arg5 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg2 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %arg9 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.muli %9, %arg3 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.index_cast %9 : i32 to index
      %13 = gpu.block_id  y
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %14, %arg5 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.muli %14, %arg6 : i32
      %18 = arith.index_cast %17 : i32 to index
      %19 = gpu.block_id  z
      %20 = arith.index_cast %19 : index to i32
      %21 = arith.muli %20, %arg8 : i32
      %22 = arith.muli %21, %arg5 : i32
      %23 = arith.index_cast %22 : i32 to index
      %24 = arith.muli %21, %arg6 : i32
      %25 = arith.index_cast %24 : i32 to index
      %26 = arith.cmpi sge, %9, %arg6 : i32
      %27 = scf.if %26 -> (i1) {
        scf.yield %true : i1
      } else {
        %30 = arith.cmpi sge, %14, %arg8 : i32
        scf.yield %30 : i1
      }
      %28 = scf.if %27 -> (i1) {
        scf.yield %true : i1
      } else {
        %30 = arith.cmpi sge, %20, %arg7 : i32
        scf.yield %30 : i1
      }
      %29 = arith.xori %28, %true : i1
      scf.if %29 {
        %30 = scf.for %arg10 = %c0_1 to %2 step %c1_0 iter_args(%arg11 = %cst) -> (f32) {
          %35 = arith.addi %arg10, %11 : index
          %36 = arith.subi %35, %1 : index
          %37 = arith.cmpi sge, %36, %c0_1 : index
          %38 = arith.muli %arg10, %c-1 : index
          %39 = arith.subi %38, %11 : index
          %40 = arith.addi %39, %1 : index
          %41 = arith.addi %40, %0 : index
          %42 = arith.addi %41, %c-1 : index
          %43 = arith.cmpi sge, %42, %c0_1 : index
          %44 = arith.andi %37, %43 : i1
          %45 = scf.if %44 -> (f32) {
            %46 = arith.addi %arg10, %23 : index
            %47 = arith.addi %46, %16 : index
            %48 = arith.addi %47, %11 : index
            %49 = arith.subi %48, %1 : index
            %50 = memref.load %arg0[%49] : memref<?xf32>
            %51 = arith.addf %arg11, %50 : f32
            scf.yield %51 : f32
          } else {
            scf.yield %arg11 : f32
          }
          scf.yield %45 : f32
        }
        %31 = arith.sitofp %arg2 : i32 to f32
        %32 = arith.divf %30, %31 : f32
        %33 = arith.addi %25, %18 : index
        %34 = arith.addi %33, %12 : index
        memref.store %32, %arg1[%34] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg9) = (%c0) to (%c32) step (%c1) {
      %c-1 = arith.constant -1 : index
      %c1_0 = arith.constant 1 : index
      %c0_1 = arith.constant 0 : index
      %true = arith.constant true
      %cst = arith.constant 0.000000e+00 : f32
      %0 = arith.index_cast %arg5 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg2 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = arith.index_cast %arg9 : index to i32
      %9 = arith.addi %7, %8 : i32
      %10 = arith.muli %9, %arg3 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.index_cast %9 : i32 to index
      %13 = gpu.block_id  y
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %14, %arg5 : i32
      %16 = arith.index_cast %15 : i32 to index
      %17 = arith.muli %14, %arg6 : i32
      %18 = arith.index_cast %17 : i32 to index
      %19 = gpu.block_id  z
      %20 = arith.index_cast %19 : index to i32
      %21 = arith.muli %20, %arg8 : i32
      %22 = arith.muli %21, %arg5 : i32
      %23 = arith.index_cast %22 : i32 to index
      %24 = arith.muli %21, %arg6 : i32
      %25 = arith.index_cast %24 : i32 to index
      %26 = arith.cmpi sge, %9, %arg6 : i32
      %27 = scf.if %26 -> (i1) {
        scf.yield %true : i1
      } else {
        %30 = arith.cmpi sge, %14, %arg8 : i32
        scf.yield %30 : i1
      }
      %28 = scf.if %27 -> (i1) {
        scf.yield %true : i1
      } else {
        %30 = arith.cmpi sge, %20, %arg7 : i32
        scf.yield %30 : i1
      }
      %29 = arith.xori %28, %true : i1
      scf.if %29 {
        %30 = scf.for %arg10 = %c0_1 to %2 step %c1_0 iter_args(%arg11 = %cst) -> (f32) {
          %35 = arith.addi %arg10, %11 : index
          %36 = arith.subi %35, %1 : index
          %37 = arith.cmpi sge, %36, %c0_1 : index
          %38 = arith.muli %arg10, %c-1 : index
          %39 = arith.subi %38, %11 : index
          %40 = arith.addi %39, %1 : index
          %41 = arith.addi %40, %0 : index
          %42 = arith.addi %41, %c-1 : index
          %43 = arith.cmpi sge, %42, %c0_1 : index
          %44 = arith.andi %37, %43 : i1
          %45 = scf.if %44 -> (f32) {
            %46 = arith.addi %arg10, %23 : index
            %47 = arith.addi %46, %16 : index
            %48 = arith.addi %47, %11 : index
            %49 = arith.subi %48, %1 : index
            %50 = memref.load %arg0[%49] : memref<?xf32>
            %51 = arith.addf %arg11, %50 : f32
            scf.yield %51 : f32
          } else {
            scf.yield %arg11 : f32
          }
          scf.yield %45 : f32
        }
        %31 = arith.sitofp %arg2 : i32 to f32
        %32 = arith.divf %30, %31 : f32
        %33 = arith.addi %25, %18 : index
        %34 = arith.addi %33, %12 : index
        memref.store %32, %arg1[%34] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %true = arith.constant true
    %c-1 = arith.constant -1 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg5 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg2 : i32 to index
    %3 = gpu.block_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = gpu.block_dim  x
    %6 = arith.index_cast %5 : index to i32
    %7 = arith.muli %4, %6 : i32
    %8 = gpu.block_id  y
    %9 = arith.index_cast %8 : index to i32
    %10 = arith.muli %9, %arg5 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %9, %arg6 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  z
    %15 = arith.index_cast %14 : index to i32
    %16 = arith.muli %15, %arg8 : i32
    %17 = arith.muli %16, %arg5 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.muli %16, %arg6 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi sge, %9, %arg8 : i32
    %22 = arith.cmpi sge, %15, %arg7 : i32
    %23 = arith.sitofp %arg2 : i32 to f32
    %24 = arith.addi %20, %13 : index
    scf.parallel (%arg9) = (%c0) to (%c32) step (%c1) {
      %25 = arith.index_cast %arg9 : index to i32
      %26 = arith.addi %7, %25 : i32
      %27 = arith.muli %26, %arg3 : i32
      %28 = arith.index_cast %27 : i32 to index
      %29 = arith.index_cast %26 : i32 to index
      %30 = arith.cmpi sge, %26, %arg6 : i32
      %31 = scf.if %30 -> (i1) {
        scf.yield %true : i1
      } else {
        scf.yield %21 : i1
      }
      %32 = scf.if %31 -> (i1) {
        scf.yield %true : i1
      } else {
        scf.yield %22 : i1
      }
      %33 = arith.xori %32, %true : i1
      scf.if %33 {
        %34 = scf.for %arg10 = %c0 to %2 step %c1 iter_args(%arg11 = %cst) -> (f32) {
          %37 = arith.addi %arg10, %28 : index
          %38 = arith.subi %37, %1 : index
          %39 = arith.cmpi sge, %38, %c0 : index
          %40 = arith.muli %arg10, %c-1 : index
          %41 = arith.subi %40, %28 : index
          %42 = arith.addi %41, %1 : index
          %43 = arith.addi %42, %0 : index
          %44 = arith.addi %43, %c-1 : index
          %45 = arith.cmpi sge, %44, %c0 : index
          %46 = arith.andi %39, %45 : i1
          %47 = scf.if %46 -> (f32) {
            %48 = arith.addi %arg10, %18 : index
            %49 = arith.addi %48, %11 : index
            %50 = arith.addi %49, %28 : index
            %51 = arith.subi %50, %1 : index
            %52 = memref.load %arg0[%51] : memref<?xf32>
            %53 = arith.addf %arg11, %52 : f32
            scf.yield %53 : f32
          } else {
            scf.yield %arg11 : f32
          }
          scf.yield %47 : f32
        }
        %35 = arith.divf %34, %23 : f32
        %36 = arith.addi %24, %29 : index
        memref.store %35, %arg1[%36] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17avg_pool1d_kernelPKfPfiiiiiii_0 {
    gpu.func @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %true = arith.constant true
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg5 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg2 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %5 = gpu.block_dim  x
      %6 = arith.index_cast %5 : index to i32
      %7 = arith.muli %4, %6 : i32
      %8 = gpu.block_id  y
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %9, %arg5 : i32
      %11 = arith.index_cast %10 : i32 to index
      %12 = arith.muli %9, %arg6 : i32
      %13 = arith.index_cast %12 : i32 to index
      %14 = gpu.block_id  z
      %15 = arith.index_cast %14 : index to i32
      %16 = arith.muli %15, %arg8 : i32
      %17 = arith.muli %16, %arg5 : i32
      %18 = arith.index_cast %17 : i32 to index
      %19 = arith.muli %16, %arg6 : i32
      %20 = arith.index_cast %19 : i32 to index
      %21 = arith.cmpi sge, %9, %arg8 : i32
      %22 = arith.cmpi sge, %15, %arg7 : i32
      %23 = arith.sitofp %arg2 : i32 to f32
      %24 = arith.addi %20, %13 : index
      scf.parallel (%arg9) = (%c0) to (%c32) step (%c1) {
        %25 = arith.index_cast %arg9 : index to i32
        %26 = arith.addi %7, %25 : i32
        %27 = arith.muli %26, %arg3 : i32
        %28 = arith.index_cast %27 : i32 to index
        %29 = arith.index_cast %26 : i32 to index
        %30 = arith.cmpi sge, %26, %arg6 : i32
        %31 = arith.cmpi slt, %26, %arg6 : i32
        %32 = arith.andi %31, %21 : i1
        %33 = arith.ori %30, %32 : i1
        %34 = arith.xori %33, %true : i1
        %35 = arith.andi %34, %22 : i1
        %36 = arith.ori %33, %35 : i1
        %37 = arith.xori %36, %true : i1
        scf.if %37 {
          %38 = scf.for %arg10 = %c0 to %2 step %c1 iter_args(%arg11 = %cst) -> (f32) {
            %41 = arith.addi %arg10, %28 : index
            %42 = arith.subi %41, %1 : index
            %43 = arith.cmpi sge, %42, %c0 : index
            %44 = arith.muli %arg10, %c-1 : index
            %45 = arith.subi %44, %28 : index
            %46 = arith.addi %45, %1 : index
            %47 = arith.addi %46, %0 : index
            %48 = arith.addi %47, %c-1 : index
            %49 = arith.cmpi sge, %48, %c0 : index
            %50 = arith.andi %43, %49 : i1
            %51 = scf.if %50 -> (f32) {
              %52 = arith.addi %arg10, %18 : index
              %53 = arith.addi %52, %11 : index
              %54 = arith.addi %53, %28 : index
              %55 = arith.subi %54, %1 : index
              %56 = memref.load %arg0[%55] : memref<?xf32>
              %57 = arith.addf %arg11, %56 : f32
              scf.yield %57 : f32
            } else {
              scf.yield %arg11 : f32
            }
            scf.yield %51 : f32
          }
          %39 = arith.divf %38, %23 : f32
          %40 = arith.addi %24, %29 : index
          memref.store %39, %arg1[%40] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPU:convertScfParallelToScfFor(): replace gpu.block_dim op with thread loop bound

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z17avg_pool1d_kernelPKfPfiiiiiii_0 {
    gpu.func @_Z17avg_pool1d_kernelPKfPfiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %true = arith.constant true
      %c-1 = arith.constant -1 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg5 : i32 to index
      %1 = arith.index_cast %arg4 : i32 to index
      %2 = arith.index_cast %arg2 : i32 to index
      %3 = gpu.block_id  x
      %4 = arith.index_cast %3 : index to i32
      %c32_0 = arith.constant 32 : index
      %5 = arith.index_cast %c32_0 : index to i32
      %6 = arith.muli %4, %5 : i32
      %7 = gpu.block_id  y
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %8, %arg5 : i32
      %10 = arith.index_cast %9 : i32 to index
      %11 = arith.muli %8, %arg6 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13 = gpu.block_id  z
      %14 = arith.index_cast %13 : index to i32
      %15 = arith.muli %14, %arg8 : i32
      %16 = arith.muli %15, %arg5 : i32
      %17 = arith.index_cast %16 : i32 to index
      %18 = arith.muli %15, %arg6 : i32
      %19 = arith.index_cast %18 : i32 to index
      %20 = arith.cmpi sge, %8, %arg8 : i32
      %21 = arith.cmpi sge, %14, %arg7 : i32
      %22 = arith.sitofp %arg2 : i32 to f32
      %23 = arith.addi %19, %12 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg9 = %c0 to %c32 step %c1_1 {
        %24 = arith.index_cast %arg9 : index to i32
        %25 = arith.addi %6, %24 : i32
        %26 = arith.muli %25, %arg3 : i32
        %27 = arith.index_cast %26 : i32 to index
        %28 = arith.index_cast %25 : i32 to index
        %29 = arith.cmpi sge, %25, %arg6 : i32
        %30 = arith.cmpi slt, %25, %arg6 : i32
        %31 = arith.andi %30, %20 : i1
        %32 = arith.ori %29, %31 : i1
        %33 = arith.xori %32, %true : i1
        %34 = arith.andi %33, %21 : i1
        %35 = arith.ori %32, %34 : i1
        %36 = arith.xori %35, %true : i1
        scf.if %36 {
          %37 = scf.for %arg10 = %c0 to %2 step %c1 iter_args(%arg11 = %cst) -> (f32) {
            %40 = arith.addi %arg10, %27 : index
            %41 = arith.subi %40, %1 : index
            %42 = arith.cmpi sge, %41, %c0 : index
            %43 = arith.muli %arg10, %c-1 : index
            %44 = arith.subi %43, %27 : index
            %45 = arith.addi %44, %1 : index
            %46 = arith.addi %45, %0 : index
            %47 = arith.addi %46, %c-1 : index
            %48 = arith.cmpi sge, %47, %c0 : index
            %49 = arith.andi %42, %48 : i1
            %50 = scf.if %49 -> (f32) {
              %51 = arith.addi %arg10, %17 : index
              %52 = arith.addi %51, %10 : index
              %53 = arith.addi %52, %27 : index
              %54 = arith.subi %53, %1 : index
              %55 = memref.load %arg0[%54] : memref<?xf32>
              %56 = arith.addf %arg11, %55 : f32
              scf.yield %56 : f32
            } else {
              scf.yield %arg11 : f32
            }
            scf.yield %50 : f32
          }
          %38 = arith.divf %37, %22 : f32
          %39 = arith.addi %23, %28 : index
          memref.store %38, %arg1[%39] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg5 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %arg4 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%4 = arith.index_cast %arg2 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%6 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %7 : index to i32
[ict-debug] GPUBlockIdToNPULowering: process op: 

%12 = gpu.block_id  y
[ict-error] GPUBlockIdToNPULowering: block id dimension is not x

