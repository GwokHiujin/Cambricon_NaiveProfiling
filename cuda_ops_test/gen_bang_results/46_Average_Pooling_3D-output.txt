warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z40__device_stub__avg_pool3d_forward_kernelPKfPfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z25avg_pool3d_forward_kernelPKfPfiiiiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z25avg_pool3d_forward_kernelPKfPfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %true = arith.constant true
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.remsi %3, %arg7 : i32
    %5 = arith.muli %4, %arg11 : i32
    %6 = arith.subi %5, %arg12 : i32
    %7 = arith.addi %6, %arg10 : i32
    %8 = arith.cmpi sgt, %7, %arg4 : i32
    %9 = arith.select %8, %arg4, %7 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.cmpi slt, %6, %c0_i32 : i32
    %12 = arith.select %11, %c0_i32, %6 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.index_cast %12 : i32 to index
    %15 = arith.index_cast %12 : i32 to index
    %16 = arith.divsi %3, %arg7 : i32
    %17 = arith.remsi %16, %arg3 : i32
    %18 = arith.divsi %16, %arg3 : i32
    %19 = arith.muli %18, %arg3 : i32
    %20 = arith.addi %19, %17 : i32
    %21 = arith.muli %20, %arg4 : i32
    %22 = arith.muli %21, %arg5 : i32
    %23 = arith.muli %22, %arg6 : i32
    %24 = arith.index_cast %23 : i32 to index
    %25 = arith.muli %18, %arg3 : i32
    %26 = arith.addi %25, %17 : i32
    %27 = arith.muli %26, %arg7 : i32
    %28 = arith.addi %27, %4 : i32
    %29 = arith.muli %28, %arg8 : i32
    %30 = gpu.block_id  y
    %31 = arith.index_cast %30 : index to i32
    %32 = gpu.block_dim  y
    %33 = arith.index_cast %32 : index to i32
    %34 = arith.muli %31, %33 : i32
    %35 = gpu.thread_id  y
    %36 = arith.index_cast %35 : index to i32
    %37 = arith.addi %34, %36 : i32
    %38 = arith.muli %37, %arg11 : i32
    %39 = arith.subi %38, %arg12 : i32
    %40 = arith.addi %39, %arg10 : i32
    %41 = arith.cmpi sgt, %40, %arg5 : i32
    %42 = arith.select %41, %arg5, %40 : i32
    %43 = arith.index_cast %42 : i32 to index
    %44 = arith.cmpi slt, %39, %c0_i32 : i32
    %45 = arith.select %44, %c0_i32, %39 : i32
    %46 = arith.index_cast %45 : i32 to index
    %47 = arith.addi %29, %37 : i32
    %48 = arith.muli %47, %arg9 : i32
    %49 = arith.index_cast %48 : i32 to index
    %50 = gpu.block_id  x
    %51 = arith.index_cast %50 : index to i32
    %52 = gpu.block_dim  x
    %53 = arith.index_cast %52 : index to i32
    %54 = arith.muli %51, %53 : i32
    %55 = gpu.thread_id  x
    %56 = arith.index_cast %55 : index to i32
    %57 = arith.addi %54, %56 : i32
    %58 = arith.muli %57, %arg11 : i32
    %59 = arith.subi %58, %arg12 : i32
    %60 = arith.cmpi slt, %59, %c0_i32 : i32
    %61 = arith.select %60, %c0_i32, %59 : i32
    %62 = arith.index_cast %61 : i32 to index
    %63 = arith.index_cast %61 : i32 to index
    %64 = arith.addi %59, %arg10 : i32
    %65 = arith.cmpi sgt, %64, %arg6 : i32
    %66 = arith.select %65, %arg6, %64 : i32
    %67 = arith.index_cast %66 : i32 to index
    %68 = arith.index_cast %57 : i32 to index
    %69 = arith.cmpi sge, %37, %arg8 : i32
    %70 = scf.if %69 -> (i1) {
      scf.yield %true : i1
    } else {
      %72 = arith.cmpi sge, %57, %arg9 : i32
      scf.yield %72 : i1
    }
    %71 = arith.xori %70, %true : i1
    scf.if %71 {
      %72 = affine.for %arg13 = %15 to %10 iter_args(%arg14 = %cst) -> (f32) {
        %77 = affine.for %arg15 = %46 to %43 iter_args(%arg16 = %arg14) -> (f32) {
          %78 = affine.for %arg17 = 0 to affine_map<()[s0, s1] -> (s0 - s1)>()[%67, %63] iter_args(%arg18 = %arg16) -> (f32) {
            %79 = affine.load %arg0[%arg17 + symbol(%24) + symbol(%62) + (%arg15 + (%arg13 + symbol(%14) - symbol(%13)) * symbol(%1)) * symbol(%0)] : memref<?xf32>
            %80 = arith.addf %arg18, %79 : f32
            affine.yield %80 : f32
          }
          affine.yield %78 : f32
        }
        affine.yield %77 : f32
      }
      %73 = arith.muli %arg10, %arg10 : i32
      %74 = arith.muli %73, %arg10 : i32
      %75 = arith.sitofp %74 : i32 to f32
      %76 = arith.divf %72, %75 : f32
      affine.store %76, %arg1[symbol(%49) + symbol(%68)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25avg_pool3d_forward_kernelPKfPfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %true = arith.constant true
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.remsi %3, %arg7 : i32
    %5 = arith.muli %4, %arg11 : i32
    %6 = arith.subi %5, %arg12 : i32
    %7 = arith.addi %6, %arg10 : i32
    %8 = arith.cmpi sgt, %7, %arg4 : i32
    %9 = arith.select %8, %arg4, %7 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.cmpi slt, %6, %c0_i32 : i32
    %12 = arith.select %11, %c0_i32, %6 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.divsi %3, %arg7 : i32
    %15 = arith.remsi %14, %arg3 : i32
    %16 = arith.divsi %14, %arg3 : i32
    %17 = arith.muli %16, %arg3 : i32
    %18 = arith.addi %17, %15 : i32
    %19 = arith.muli %18, %arg4 : i32
    %20 = arith.muli %19, %arg5 : i32
    %21 = arith.muli %20, %arg6 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.muli %18, %arg7 : i32
    %24 = arith.addi %23, %4 : i32
    %25 = arith.muli %24, %arg8 : i32
    %26 = gpu.block_id  y
    %27 = arith.index_cast %26 : index to i32
    %28 = gpu.block_dim  y
    %29 = arith.index_cast %28 : index to i32
    %30 = arith.muli %27, %29 : i32
    %31 = gpu.thread_id  y
    %32 = arith.index_cast %31 : index to i32
    %33 = arith.addi %30, %32 : i32
    %34 = arith.muli %33, %arg11 : i32
    %35 = arith.subi %34, %arg12 : i32
    %36 = arith.addi %35, %arg10 : i32
    %37 = arith.cmpi sgt, %36, %arg5 : i32
    %38 = arith.select %37, %arg5, %36 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.cmpi slt, %35, %c0_i32 : i32
    %41 = arith.select %40, %c0_i32, %35 : i32
    %42 = arith.index_cast %41 : i32 to index
    %43 = arith.addi %25, %33 : i32
    %44 = arith.muli %43, %arg9 : i32
    %45 = arith.index_cast %44 : i32 to index
    %46 = gpu.block_id  x
    %47 = arith.index_cast %46 : index to i32
    %48 = gpu.block_dim  x
    %49 = arith.index_cast %48 : index to i32
    %50 = arith.muli %47, %49 : i32
    %51 = gpu.thread_id  x
    %52 = arith.index_cast %51 : index to i32
    %53 = arith.addi %50, %52 : i32
    %54 = arith.muli %53, %arg11 : i32
    %55 = arith.subi %54, %arg12 : i32
    %56 = arith.cmpi slt, %55, %c0_i32 : i32
    %57 = arith.select %56, %c0_i32, %55 : i32
    %58 = arith.index_cast %57 : i32 to index
    %59 = arith.addi %55, %arg10 : i32
    %60 = arith.cmpi sgt, %59, %arg6 : i32
    %61 = arith.select %60, %arg6, %59 : i32
    %62 = arith.index_cast %61 : i32 to index
    %63 = arith.index_cast %53 : i32 to index
    %64 = arith.cmpi sge, %33, %arg8 : i32
    %65 = scf.if %64 -> (i1) {
      scf.yield %true : i1
    } else {
      %67 = arith.cmpi sge, %53, %arg9 : i32
      scf.yield %67 : i1
    }
    %66 = arith.xori %65, %true : i1
    scf.if %66 {
      %67 = affine.for %arg13 = %13 to %10 iter_args(%arg14 = %cst) -> (f32) {
        %72 = affine.for %arg15 = %42 to %39 iter_args(%arg16 = %arg14) -> (f32) {
          %73 = affine.for %arg17 = 0 to affine_map<()[s0, s1] -> (s0 - s1)>()[%62, %58] iter_args(%arg18 = %arg16) -> (f32) {
            %74 = affine.load %arg0[%arg17 + symbol(%22) + symbol(%58) + (%arg15 + %arg13 * symbol(%1)) * symbol(%0)] : memref<?xf32>
            %75 = arith.addf %arg18, %74 : f32
            affine.yield %75 : f32
          }
          affine.yield %73 : f32
        }
        affine.yield %72 : f32
      }
      %68 = arith.muli %arg10, %arg10 : i32
      %69 = arith.muli %68, %arg10 : i32
      %70 = arith.sitofp %69 : i32 to f32
      %71 = arith.divf %67, %70 : f32
      affine.store %71, %arg1[symbol(%45) + symbol(%63)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z25avg_pool3d_forward_kernelPKfPfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %true = arith.constant true
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg5 : i32 to index
    %2 = gpu.block_id  z
    %3 = arith.index_cast %2 : index to i32
    %4 = arith.remsi %3, %arg7 : i32
    %5 = arith.muli %4, %arg11 : i32
    %6 = arith.subi %5, %arg12 : i32
    %7 = arith.addi %6, %arg10 : i32
    %8 = arith.cmpi sgt, %7, %arg4 : i32
    %9 = arith.select %8, %arg4, %7 : i32
    %10 = arith.index_cast %9 : i32 to index
    %11 = arith.cmpi slt, %6, %c0_i32 : i32
    %12 = arith.select %11, %c0_i32, %6 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = arith.divsi %3, %arg7 : i32
    %15 = arith.remsi %14, %arg3 : i32
    %16 = arith.divsi %14, %arg3 : i32
    %17 = arith.muli %16, %arg3 : i32
    %18 = arith.addi %17, %15 : i32
    %19 = arith.muli %18, %arg4 : i32
    %20 = arith.muli %19, %arg5 : i32
    %21 = arith.muli %20, %arg6 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = arith.muli %18, %arg7 : i32
    %24 = arith.addi %23, %4 : i32
    %25 = arith.muli %24, %arg8 : i32
    %26 = gpu.block_id  y
    %27 = arith.index_cast %26 : index to i32
    %28 = gpu.block_dim  y
    %29 = arith.index_cast %28 : index to i32
    %30 = arith.muli %27, %29 : i32
    %31 = gpu.thread_id  y
    %32 = arith.index_cast %31 : index to i32
    %33 = arith.addi %30, %32 : i32
    %34 = arith.muli %33, %arg11 : i32
    %35 = arith.subi %34, %arg12 : i32
    %36 = arith.addi %35, %arg10 : i32
    %37 = arith.cmpi sgt, %36, %arg5 : i32
    %38 = arith.select %37, %arg5, %36 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.cmpi slt, %35, %c0_i32 : i32
    %41 = arith.select %40, %c0_i32, %35 : i32
    %42 = arith.index_cast %41 : i32 to index
    %43 = arith.addi %25, %33 : i32
    %44 = arith.muli %43, %arg9 : i32
    %45 = arith.index_cast %44 : i32 to index
    %46 = gpu.block_id  x
    %47 = arith.index_cast %46 : index to i32
    %48 = gpu.block_dim  x
    %49 = arith.index_cast %48 : index to i32
    %50 = arith.muli %47, %49 : i32
    %51 = gpu.thread_id  x
    %52 = arith.index_cast %51 : index to i32
    %53 = arith.addi %50, %52 : i32
    %54 = arith.muli %53, %arg11 : i32
    %55 = arith.subi %54, %arg12 : i32
    %56 = arith.cmpi slt, %55, %c0_i32 : i32
    %57 = arith.select %56, %c0_i32, %55 : i32
    %58 = arith.index_cast %57 : i32 to index
    %59 = arith.addi %55, %arg10 : i32
    %60 = arith.cmpi sgt, %59, %arg6 : i32
    %61 = arith.select %60, %arg6, %59 : i32
    %62 = arith.index_cast %61 : i32 to index
    %63 = arith.index_cast %53 : i32 to index
    %64 = arith.cmpi sge, %33, %arg8 : i32
    %65 = scf.if %64 -> (i1) {
      scf.yield %true : i1
    } else {
      %67 = arith.cmpi sge, %53, %arg9 : i32
      scf.yield %67 : i1
    }
    %66 = arith.xori %65, %true : i1
    scf.if %66 {
      %67 = scf.for %arg13 = %13 to %10 step %c1 iter_args(%arg14 = %cst) -> (f32) {
        %73 = scf.for %arg15 = %42 to %39 step %c1 iter_args(%arg16 = %arg14) -> (f32) {
          %74 = arith.subi %62, %58 : index
          %75 = scf.for %arg17 = %c0 to %74 step %c1 iter_args(%arg18 = %arg16) -> (f32) {
            %76 = arith.addi %arg17, %22 : index
            %77 = arith.addi %76, %58 : index
            %78 = arith.muli %arg13, %1 : index
            %79 = arith.addi %arg15, %78 : index
            %80 = arith.muli %79, %0 : index
            %81 = arith.addi %77, %80 : index
            %82 = memref.load %arg0[%81] : memref<?xf32>
            %83 = arith.addf %arg18, %82 : f32
            scf.yield %83 : f32
          }
          scf.yield %75 : f32
        }
        scf.yield %73 : f32
      }
      %68 = arith.muli %arg10, %arg10 : i32
      %69 = arith.muli %68, %arg10 : i32
      %70 = arith.sitofp %69 : i32 to f32
      %71 = arith.divf %67, %70 : f32
      %72 = arith.addi %45, %63 : index
      memref.store %71, %arg1[%72] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

