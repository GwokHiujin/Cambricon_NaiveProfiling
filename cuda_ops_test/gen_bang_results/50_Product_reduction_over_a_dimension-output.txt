warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z33__device_stub__prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z18prod_reduce_kernelPKfPfii(%arg0, %arg1, %arg2, %arg3) : (memref<?xf32>, memref<?xf32>, i32, i32) -> ()
    return
  }
  func.func private @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c256_i32 = arith.constant 256 : i32
    %cst = arith.constant 1.000000e+00 : f32
    %0 = arith.index_cast %arg2 : i32 to index
    %1 = arith.index_cast %arg2 : i32 to index
    %2 = arith.index_cast %arg2 : i32 to index
    %3 = arith.index_cast %arg2 : i32 to index
    %4 = arith.index_cast %arg2 : i32 to index
    %5 = arith.index_cast %arg2 : i32 to index
    %6 = arith.index_cast %arg2 : i32 to index
    %7 = arith.index_cast %arg2 : i32 to index
    %8 = arith.index_cast %arg2 : i32 to index
    %9 = arith.index_cast %arg2 : i32 to index
    %10 = gpu.block_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.muli %11, %c256_i32 : i32
    %13 = gpu.thread_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.addi %12, %14 : i32
    %16 = arith.index_cast %15 : i32 to index
    %17 = arith.index_cast %15 : i32 to index
    %18 = arith.index_cast %15 : i32 to index
    %19 = arith.index_cast %15 : i32 to index
    %20 = arith.index_cast %15 : i32 to index
    %21 = arith.index_cast %15 : i32 to index
    %22 = arith.index_cast %15 : i32 to index
    %23 = arith.index_cast %15 : i32 to index
    %24 = arith.index_cast %15 : i32 to index
    %25 = arith.index_cast %15 : i32 to index
    %26 = arith.index_cast %15 : i32 to index
    %27 = arith.cmpi slt, %15, %arg3 : i32
    scf.if %27 {
      %28 = affine.for %arg4 = 0 to 50 step 10 iter_args(%arg5 = %cst) -> (f32) {
        %29 = affine.load %arg0[%arg4 * symbol(%0) + symbol(%16)] : memref<?xf32>
        %30 = arith.mulf %arg5, %29 : f32
        %31 = affine.load %arg0[(%arg4 + 1) * symbol(%1) + symbol(%17)] : memref<?xf32>
        %32 = arith.mulf %30, %31 : f32
        %33 = affine.load %arg0[(%arg4 + 2) * symbol(%2) + symbol(%18)] : memref<?xf32>
        %34 = arith.mulf %32, %33 : f32
        %35 = affine.load %arg0[(%arg4 + 3) * symbol(%3) + symbol(%19)] : memref<?xf32>
        %36 = arith.mulf %34, %35 : f32
        %37 = affine.load %arg0[(%arg4 + 4) * symbol(%4) + symbol(%20)] : memref<?xf32>
        %38 = arith.mulf %36, %37 : f32
        %39 = affine.load %arg0[(%arg4 + 5) * symbol(%5) + symbol(%21)] : memref<?xf32>
        %40 = arith.mulf %38, %39 : f32
        %41 = affine.load %arg0[(%arg4 + 6) * symbol(%6) + symbol(%22)] : memref<?xf32>
        %42 = arith.mulf %40, %41 : f32
        %43 = affine.load %arg0[(%arg4 + 7) * symbol(%7) + symbol(%23)] : memref<?xf32>
        %44 = arith.mulf %42, %43 : f32
        %45 = affine.load %arg0[(%arg4 + 8) * symbol(%8) + symbol(%24)] : memref<?xf32>
        %46 = arith.mulf %44, %45 : f32
        %47 = affine.load %arg0[(%arg4 + 9) * symbol(%9) + symbol(%25)] : memref<?xf32>
        %48 = arith.mulf %46, %47 : f32
        affine.yield %48 : f32
      }
      affine.store %28, %arg1[symbol(%26)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c256_i32 = arith.constant 256 : i32
    %cst = arith.constant 1.000000e+00 : f32
    %0 = arith.index_cast %arg2 : i32 to index
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %2, %c256_i32 : i32
    %4 = gpu.thread_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.addi %3, %5 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.cmpi slt, %6, %arg3 : i32
    scf.if %8 {
      %9 = affine.for %arg4 = 0 to 50 step 10 iter_args(%arg5 = %cst) -> (f32) {
        %10 = affine.load %arg0[%arg4 * symbol(%0) + symbol(%7)] : memref<?xf32>
        %11 = arith.mulf %arg5, %10 : f32
        %12 = affine.load %arg0[(%arg4 + 1) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %13 = arith.mulf %11, %12 : f32
        %14 = affine.load %arg0[(%arg4 + 2) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %15 = arith.mulf %13, %14 : f32
        %16 = affine.load %arg0[(%arg4 + 3) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %17 = arith.mulf %15, %16 : f32
        %18 = affine.load %arg0[(%arg4 + 4) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %19 = arith.mulf %17, %18 : f32
        %20 = affine.load %arg0[(%arg4 + 5) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %21 = arith.mulf %19, %20 : f32
        %22 = affine.load %arg0[(%arg4 + 6) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %23 = arith.mulf %21, %22 : f32
        %24 = affine.load %arg0[(%arg4 + 7) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %25 = arith.mulf %23, %24 : f32
        %26 = affine.load %arg0[(%arg4 + 8) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %27 = arith.mulf %25, %26 : f32
        %28 = affine.load %arg0[(%arg4 + 9) * symbol(%0) + symbol(%7)] : memref<?xf32>
        %29 = arith.mulf %27, %28 : f32
        affine.yield %29 : f32
      }
      affine.store %9, %arg1[symbol(%7)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c9 = arith.constant 9 : index
    %c8 = arith.constant 8 : index
    %c7 = arith.constant 7 : index
    %c6 = arith.constant 6 : index
    %c5 = arith.constant 5 : index
    %c4 = arith.constant 4 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c10 = arith.constant 10 : index
    %c50 = arith.constant 50 : index
    %c0 = arith.constant 0 : index
    %c256_i32 = arith.constant 256 : i32
    %cst = arith.constant 1.000000e+00 : f32
    %0 = arith.index_cast %arg2 : i32 to index
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %2, %c256_i32 : i32
    %4 = gpu.thread_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.addi %3, %5 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.cmpi slt, %6, %arg3 : i32
    scf.if %8 {
      %9 = scf.for %arg4 = %c0 to %c50 step %c10 iter_args(%arg5 = %cst) -> (f32) {
        %10 = arith.muli %arg4, %0 : index
        %11 = arith.addi %10, %7 : index
        %12 = memref.load %arg0[%11] : memref<?xf32>
        %13 = arith.mulf %arg5, %12 : f32
        %14 = arith.addi %arg4, %c1 : index
        %15 = arith.muli %14, %0 : index
        %16 = arith.addi %15, %7 : index
        %17 = memref.load %arg0[%16] : memref<?xf32>
        %18 = arith.mulf %13, %17 : f32
        %19 = arith.addi %arg4, %c2 : index
        %20 = arith.muli %19, %0 : index
        %21 = arith.addi %20, %7 : index
        %22 = memref.load %arg0[%21] : memref<?xf32>
        %23 = arith.mulf %18, %22 : f32
        %24 = arith.addi %arg4, %c3 : index
        %25 = arith.muli %24, %0 : index
        %26 = arith.addi %25, %7 : index
        %27 = memref.load %arg0[%26] : memref<?xf32>
        %28 = arith.mulf %23, %27 : f32
        %29 = arith.addi %arg4, %c4 : index
        %30 = arith.muli %29, %0 : index
        %31 = arith.addi %30, %7 : index
        %32 = memref.load %arg0[%31] : memref<?xf32>
        %33 = arith.mulf %28, %32 : f32
        %34 = arith.addi %arg4, %c5 : index
        %35 = arith.muli %34, %0 : index
        %36 = arith.addi %35, %7 : index
        %37 = memref.load %arg0[%36] : memref<?xf32>
        %38 = arith.mulf %33, %37 : f32
        %39 = arith.addi %arg4, %c6 : index
        %40 = arith.muli %39, %0 : index
        %41 = arith.addi %40, %7 : index
        %42 = memref.load %arg0[%41] : memref<?xf32>
        %43 = arith.mulf %38, %42 : f32
        %44 = arith.addi %arg4, %c7 : index
        %45 = arith.muli %44, %0 : index
        %46 = arith.addi %45, %7 : index
        %47 = memref.load %arg0[%46] : memref<?xf32>
        %48 = arith.mulf %43, %47 : f32
        %49 = arith.addi %arg4, %c8 : index
        %50 = arith.muli %49, %0 : index
        %51 = arith.addi %50, %7 : index
        %52 = memref.load %arg0[%51] : memref<?xf32>
        %53 = arith.mulf %48, %52 : f32
        %54 = arith.addi %arg4, %c9 : index
        %55 = arith.muli %54, %0 : index
        %56 = arith.addi %55, %7 : index
        %57 = memref.load %arg0[%56] : memref<?xf32>
        %58 = arith.mulf %53, %57 : f32
        scf.yield %58 : f32
      }
      memref.store %9, %arg1[%7] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c9 = arith.constant 9 : index
      %c8 = arith.constant 8 : index
      %c7 = arith.constant 7 : index
      %c6 = arith.constant 6 : index
      %c5 = arith.constant 5 : index
      %c4 = arith.constant 4 : index
      %c3 = arith.constant 3 : index
      %c2 = arith.constant 2 : index
      %c1_0 = arith.constant 1 : index
      %c10 = arith.constant 10 : index
      %c50 = arith.constant 50 : index
      %c0_1 = arith.constant 0 : index
      %c256_i32 = arith.constant 256 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %0 = arith.index_cast %arg2 : i32 to index
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c256_i32 : i32
      %4 = arith.index_cast %arg4 : index to i32
      %5 = arith.addi %3, %4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.cmpi slt, %5, %arg3 : i32
      scf.if %7 {
        %8 = scf.for %arg5 = %c0_1 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
          %9 = arith.muli %arg5, %0 : index
          %10 = arith.addi %9, %6 : index
          %11 = memref.load %arg0[%10] : memref<?xf32>
          %12 = arith.mulf %arg6, %11 : f32
          %13 = arith.addi %arg5, %c1_0 : index
          %14 = arith.muli %13, %0 : index
          %15 = arith.addi %14, %6 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = arith.mulf %12, %16 : f32
          %18 = arith.addi %arg5, %c2 : index
          %19 = arith.muli %18, %0 : index
          %20 = arith.addi %19, %6 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.mulf %17, %21 : f32
          %23 = arith.addi %arg5, %c3 : index
          %24 = arith.muli %23, %0 : index
          %25 = arith.addi %24, %6 : index
          %26 = memref.load %arg0[%25] : memref<?xf32>
          %27 = arith.mulf %22, %26 : f32
          %28 = arith.addi %arg5, %c4 : index
          %29 = arith.muli %28, %0 : index
          %30 = arith.addi %29, %6 : index
          %31 = memref.load %arg0[%30] : memref<?xf32>
          %32 = arith.mulf %27, %31 : f32
          %33 = arith.addi %arg5, %c5 : index
          %34 = arith.muli %33, %0 : index
          %35 = arith.addi %34, %6 : index
          %36 = memref.load %arg0[%35] : memref<?xf32>
          %37 = arith.mulf %32, %36 : f32
          %38 = arith.addi %arg5, %c6 : index
          %39 = arith.muli %38, %0 : index
          %40 = arith.addi %39, %6 : index
          %41 = memref.load %arg0[%40] : memref<?xf32>
          %42 = arith.mulf %37, %41 : f32
          %43 = arith.addi %arg5, %c7 : index
          %44 = arith.muli %43, %0 : index
          %45 = arith.addi %44, %6 : index
          %46 = memref.load %arg0[%45] : memref<?xf32>
          %47 = arith.mulf %42, %46 : f32
          %48 = arith.addi %arg5, %c8 : index
          %49 = arith.muli %48, %0 : index
          %50 = arith.addi %49, %6 : index
          %51 = memref.load %arg0[%50] : memref<?xf32>
          %52 = arith.mulf %47, %51 : f32
          %53 = arith.addi %arg5, %c9 : index
          %54 = arith.muli %53, %0 : index
          %55 = arith.addi %54, %6 : index
          %56 = memref.load %arg0[%55] : memref<?xf32>
          %57 = arith.mulf %52, %56 : f32
          scf.yield %57 : f32
        }
        memref.store %8, %arg1[%6] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %c9 = arith.constant 9 : index
      %c8 = arith.constant 8 : index
      %c7 = arith.constant 7 : index
      %c6 = arith.constant 6 : index
      %c5 = arith.constant 5 : index
      %c4 = arith.constant 4 : index
      %c3 = arith.constant 3 : index
      %c2 = arith.constant 2 : index
      %c1_0 = arith.constant 1 : index
      %c10 = arith.constant 10 : index
      %c50 = arith.constant 50 : index
      %c0_1 = arith.constant 0 : index
      %c256_i32 = arith.constant 256 : i32
      %cst = arith.constant 1.000000e+00 : f32
      %0 = arith.index_cast %arg2 : i32 to index
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c256_i32 : i32
      %4 = arith.index_cast %arg4 : index to i32
      %5 = arith.addi %3, %4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.cmpi slt, %5, %arg3 : i32
      scf.if %7 {
        %8 = scf.for %arg5 = %c0_1 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
          %9 = arith.muli %arg5, %0 : index
          %10 = arith.addi %9, %6 : index
          %11 = memref.load %arg0[%10] : memref<?xf32>
          %12 = arith.mulf %arg6, %11 : f32
          %13 = arith.addi %arg5, %c1_0 : index
          %14 = arith.muli %13, %0 : index
          %15 = arith.addi %14, %6 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = arith.mulf %12, %16 : f32
          %18 = arith.addi %arg5, %c2 : index
          %19 = arith.muli %18, %0 : index
          %20 = arith.addi %19, %6 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.mulf %17, %21 : f32
          %23 = arith.addi %arg5, %c3 : index
          %24 = arith.muli %23, %0 : index
          %25 = arith.addi %24, %6 : index
          %26 = memref.load %arg0[%25] : memref<?xf32>
          %27 = arith.mulf %22, %26 : f32
          %28 = arith.addi %arg5, %c4 : index
          %29 = arith.muli %28, %0 : index
          %30 = arith.addi %29, %6 : index
          %31 = memref.load %arg0[%30] : memref<?xf32>
          %32 = arith.mulf %27, %31 : f32
          %33 = arith.addi %arg5, %c5 : index
          %34 = arith.muli %33, %0 : index
          %35 = arith.addi %34, %6 : index
          %36 = memref.load %arg0[%35] : memref<?xf32>
          %37 = arith.mulf %32, %36 : f32
          %38 = arith.addi %arg5, %c6 : index
          %39 = arith.muli %38, %0 : index
          %40 = arith.addi %39, %6 : index
          %41 = memref.load %arg0[%40] : memref<?xf32>
          %42 = arith.mulf %37, %41 : f32
          %43 = arith.addi %arg5, %c7 : index
          %44 = arith.muli %43, %0 : index
          %45 = arith.addi %44, %6 : index
          %46 = memref.load %arg0[%45] : memref<?xf32>
          %47 = arith.mulf %42, %46 : f32
          %48 = arith.addi %arg5, %c8 : index
          %49 = arith.muli %48, %0 : index
          %50 = arith.addi %49, %6 : index
          %51 = memref.load %arg0[%50] : memref<?xf32>
          %52 = arith.mulf %47, %51 : f32
          %53 = arith.addi %arg5, %c9 : index
          %54 = arith.muli %53, %0 : index
          %55 = arith.addi %54, %6 : index
          %56 = memref.load %arg0[%55] : memref<?xf32>
          %57 = arith.mulf %52, %56 : f32
          scf.yield %57 : f32
        }
        memref.store %8, %arg1[%6] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 1.000000e+00 : f32
    %c256_i32 = arith.constant 256 : i32
    %c50 = arith.constant 50 : index
    %c10 = arith.constant 10 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c4 = arith.constant 4 : index
    %c5 = arith.constant 5 : index
    %c6 = arith.constant 6 : index
    %c7 = arith.constant 7 : index
    %c8 = arith.constant 8 : index
    %c9 = arith.constant 9 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg2 : i32 to index
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %2, %c256_i32 : i32
    scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
      %4 = arith.index_cast %arg4 : index to i32
      %5 = arith.addi %3, %4 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.cmpi slt, %5, %arg3 : i32
      scf.if %7 {
        %8 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
          %9 = arith.muli %arg5, %0 : index
          %10 = arith.addi %9, %6 : index
          %11 = memref.load %arg0[%10] : memref<?xf32>
          %12 = arith.mulf %arg6, %11 : f32
          %13 = arith.addi %arg5, %c1 : index
          %14 = arith.muli %13, %0 : index
          %15 = arith.addi %14, %6 : index
          %16 = memref.load %arg0[%15] : memref<?xf32>
          %17 = arith.mulf %12, %16 : f32
          %18 = arith.addi %arg5, %c2 : index
          %19 = arith.muli %18, %0 : index
          %20 = arith.addi %19, %6 : index
          %21 = memref.load %arg0[%20] : memref<?xf32>
          %22 = arith.mulf %17, %21 : f32
          %23 = arith.addi %arg5, %c3 : index
          %24 = arith.muli %23, %0 : index
          %25 = arith.addi %24, %6 : index
          %26 = memref.load %arg0[%25] : memref<?xf32>
          %27 = arith.mulf %22, %26 : f32
          %28 = arith.addi %arg5, %c4 : index
          %29 = arith.muli %28, %0 : index
          %30 = arith.addi %29, %6 : index
          %31 = memref.load %arg0[%30] : memref<?xf32>
          %32 = arith.mulf %27, %31 : f32
          %33 = arith.addi %arg5, %c5 : index
          %34 = arith.muli %33, %0 : index
          %35 = arith.addi %34, %6 : index
          %36 = memref.load %arg0[%35] : memref<?xf32>
          %37 = arith.mulf %32, %36 : f32
          %38 = arith.addi %arg5, %c6 : index
          %39 = arith.muli %38, %0 : index
          %40 = arith.addi %39, %6 : index
          %41 = memref.load %arg0[%40] : memref<?xf32>
          %42 = arith.mulf %37, %41 : f32
          %43 = arith.addi %arg5, %c7 : index
          %44 = arith.muli %43, %0 : index
          %45 = arith.addi %44, %6 : index
          %46 = memref.load %arg0[%45] : memref<?xf32>
          %47 = arith.mulf %42, %46 : f32
          %48 = arith.addi %arg5, %c8 : index
          %49 = arith.muli %48, %0 : index
          %50 = arith.addi %49, %6 : index
          %51 = memref.load %arg0[%50] : memref<?xf32>
          %52 = arith.mulf %47, %51 : f32
          %53 = arith.addi %arg5, %c9 : index
          %54 = arith.muli %53, %0 : index
          %55 = arith.addi %54, %6 : index
          %56 = memref.load %arg0[%55] : memref<?xf32>
          %57 = arith.mulf %52, %56 : f32
          scf.yield %57 : f32
        }
        memref.store %8, %arg1[%6] : memref<?xf32>
      }
      scf.yield
    }
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18prod_reduce_kernelPKfPfii_0 {
    gpu.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 1.000000e+00 : f32
      %c256_i32 = arith.constant 256 : i32
      %c50 = arith.constant 50 : index
      %c10 = arith.constant 10 : index
      %c2 = arith.constant 2 : index
      %c3 = arith.constant 3 : index
      %c4 = arith.constant 4 : index
      %c5 = arith.constant 5 : index
      %c6 = arith.constant 6 : index
      %c7 = arith.constant 7 : index
      %c8 = arith.constant 8 : index
      %c9 = arith.constant 9 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg2 : i32 to index
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c256_i32 : i32
      scf.parallel (%arg4) = (%c0) to (%c32) step (%c1) {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.cmpi slt, %5, %arg3 : i32
        scf.if %7 {
          %8 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
            %9 = arith.muli %arg5, %0 : index
            %10 = arith.addi %9, %6 : index
            %11 = memref.load %arg0[%10] : memref<?xf32>
            %12 = arith.mulf %arg6, %11 : f32
            %13 = arith.addi %arg5, %c1 : index
            %14 = arith.muli %13, %0 : index
            %15 = arith.addi %14, %6 : index
            %16 = memref.load %arg0[%15] : memref<?xf32>
            %17 = arith.mulf %12, %16 : f32
            %18 = arith.addi %arg5, %c2 : index
            %19 = arith.muli %18, %0 : index
            %20 = arith.addi %19, %6 : index
            %21 = memref.load %arg0[%20] : memref<?xf32>
            %22 = arith.mulf %17, %21 : f32
            %23 = arith.addi %arg5, %c3 : index
            %24 = arith.muli %23, %0 : index
            %25 = arith.addi %24, %6 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.mulf %22, %26 : f32
            %28 = arith.addi %arg5, %c4 : index
            %29 = arith.muli %28, %0 : index
            %30 = arith.addi %29, %6 : index
            %31 = memref.load %arg0[%30] : memref<?xf32>
            %32 = arith.mulf %27, %31 : f32
            %33 = arith.addi %arg5, %c5 : index
            %34 = arith.muli %33, %0 : index
            %35 = arith.addi %34, %6 : index
            %36 = memref.load %arg0[%35] : memref<?xf32>
            %37 = arith.mulf %32, %36 : f32
            %38 = arith.addi %arg5, %c6 : index
            %39 = arith.muli %38, %0 : index
            %40 = arith.addi %39, %6 : index
            %41 = memref.load %arg0[%40] : memref<?xf32>
            %42 = arith.mulf %37, %41 : f32
            %43 = arith.addi %arg5, %c7 : index
            %44 = arith.muli %43, %0 : index
            %45 = arith.addi %44, %6 : index
            %46 = memref.load %arg0[%45] : memref<?xf32>
            %47 = arith.mulf %42, %46 : f32
            %48 = arith.addi %arg5, %c8 : index
            %49 = arith.muli %48, %0 : index
            %50 = arith.addi %49, %6 : index
            %51 = memref.load %arg0[%50] : memref<?xf32>
            %52 = arith.mulf %47, %51 : f32
            %53 = arith.addi %arg5, %c9 : index
            %54 = arith.muli %53, %0 : index
            %55 = arith.addi %54, %6 : index
            %56 = memref.load %arg0[%55] : memref<?xf32>
            %57 = arith.mulf %52, %56 : f32
            scf.yield %57 : f32
          }
          memref.store %8, %arg1[%6] : memref<?xf32>
        }
        scf.yield
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18prod_reduce_kernelPKfPfii_0 {
    gpu.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 1.000000e+00 : f32
      %c256_i32 = arith.constant 256 : i32
      %c50 = arith.constant 50 : index
      %c10 = arith.constant 10 : index
      %c2 = arith.constant 2 : index
      %c3 = arith.constant 3 : index
      %c4 = arith.constant 4 : index
      %c5 = arith.constant 5 : index
      %c6 = arith.constant 6 : index
      %c7 = arith.constant 7 : index
      %c8 = arith.constant 8 : index
      %c9 = arith.constant 9 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg2 : i32 to index
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %2, %c256_i32 : i32
      %c1_0 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_0 {
        %4 = arith.index_cast %arg4 : index to i32
        %5 = arith.addi %3, %4 : i32
        %6 = arith.index_cast %5 : i32 to index
        %7 = arith.cmpi slt, %5, %arg3 : i32
        scf.if %7 {
          %8 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
            %9 = arith.muli %arg5, %0 : index
            %10 = arith.addi %9, %6 : index
            %11 = memref.load %arg0[%10] : memref<?xf32>
            %12 = arith.mulf %arg6, %11 : f32
            %13 = arith.addi %arg5, %c1 : index
            %14 = arith.muli %13, %0 : index
            %15 = arith.addi %14, %6 : index
            %16 = memref.load %arg0[%15] : memref<?xf32>
            %17 = arith.mulf %12, %16 : f32
            %18 = arith.addi %arg5, %c2 : index
            %19 = arith.muli %18, %0 : index
            %20 = arith.addi %19, %6 : index
            %21 = memref.load %arg0[%20] : memref<?xf32>
            %22 = arith.mulf %17, %21 : f32
            %23 = arith.addi %arg5, %c3 : index
            %24 = arith.muli %23, %0 : index
            %25 = arith.addi %24, %6 : index
            %26 = memref.load %arg0[%25] : memref<?xf32>
            %27 = arith.mulf %22, %26 : f32
            %28 = arith.addi %arg5, %c4 : index
            %29 = arith.muli %28, %0 : index
            %30 = arith.addi %29, %6 : index
            %31 = memref.load %arg0[%30] : memref<?xf32>
            %32 = arith.mulf %27, %31 : f32
            %33 = arith.addi %arg5, %c5 : index
            %34 = arith.muli %33, %0 : index
            %35 = arith.addi %34, %6 : index
            %36 = memref.load %arg0[%35] : memref<?xf32>
            %37 = arith.mulf %32, %36 : f32
            %38 = arith.addi %arg5, %c6 : index
            %39 = arith.muli %38, %0 : index
            %40 = arith.addi %39, %6 : index
            %41 = memref.load %arg0[%40] : memref<?xf32>
            %42 = arith.mulf %37, %41 : f32
            %43 = arith.addi %arg5, %c7 : index
            %44 = arith.muli %43, %0 : index
            %45 = arith.addi %44, %6 : index
            %46 = memref.load %arg0[%45] : memref<?xf32>
            %47 = arith.mulf %42, %46 : f32
            %48 = arith.addi %arg5, %c8 : index
            %49 = arith.muli %48, %0 : index
            %50 = arith.addi %49, %6 : index
            %51 = memref.load %arg0[%50] : memref<?xf32>
            %52 = arith.mulf %47, %51 : f32
            %53 = arith.addi %arg5, %c9 : index
            %54 = arith.muli %53, %0 : index
            %55 = arith.addi %54, %6 : index
            %56 = memref.load %arg0[%55] : memref<?xf32>
            %57 = arith.mulf %52, %56 : f32
            scf.yield %57 : f32
          }
          memref.store %8, %arg1[%6] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg2 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%2 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%4 = arith.index_cast %3 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%8 = arith.index_cast %arg4 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%11 = arith.index_cast %10 : i32 to index
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18prod_reduce_kernelPKfPfii_0 {
    gpu.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 1.000000e+00 : f32
      %c256_i32 = arith.constant 256 : i32
      %c50 = arith.constant 50 : index
      %c10 = arith.constant 10 : index
      %c2 = arith.constant 2 : index
      %c3 = arith.constant 3 : index
      %c4 = arith.constant 4 : index
      %c5 = arith.constant 5 : index
      %c6 = arith.constant 6 : index
      %c7 = arith.constant 7 : index
      %c8 = arith.constant 8 : index
      %c9 = arith.constant 9 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg2 : i32 to index
      %1 = "npu.block_id"() : () -> i64
      %2 = emitc.cast %1 : i64 to i32
      %3 = arith.muli %2, %c256_i32 : i32
      %c1_0 = arith.constant 1 : index
      scf.for %arg4 = %c0 to %c32 step %c1_0 {
        %4 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %5 = emitc.cast %4 : i64 to i32
        %6 = arith.addi %3, %5 : i32
        %7 = emitc.cast %6 : i32 to index
        %8 = arith.cmpi slt, %6, %arg3 : i32
        scf.if %8 {
          %9 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
            %10 = arith.muli %arg5, %0 : index
            %11 = arith.addi %10, %7 : index
            %12 = memref.load %arg0[%11] : memref<?xf32>
            %13 = emitc.mul %arg6, %12 : (f32, f32) -> f32
            %14 = arith.addi %arg5, %c1 : index
            %15 = arith.muli %14, %0 : index
            %16 = arith.addi %15, %7 : index
            %17 = memref.load %arg0[%16] : memref<?xf32>
            %18 = emitc.mul %13, %17 : (f32, f32) -> f32
            %19 = arith.addi %arg5, %c2 : index
            %20 = arith.muli %19, %0 : index
            %21 = arith.addi %20, %7 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = emitc.mul %18, %22 : (f32, f32) -> f32
            %24 = arith.addi %arg5, %c3 : index
            %25 = arith.muli %24, %0 : index
            %26 = arith.addi %25, %7 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = emitc.mul %23, %27 : (f32, f32) -> f32
            %29 = arith.addi %arg5, %c4 : index
            %30 = arith.muli %29, %0 : index
            %31 = arith.addi %30, %7 : index
            %32 = memref.load %arg0[%31] : memref<?xf32>
            %33 = emitc.mul %28, %32 : (f32, f32) -> f32
            %34 = arith.addi %arg5, %c5 : index
            %35 = arith.muli %34, %0 : index
            %36 = arith.addi %35, %7 : index
            %37 = memref.load %arg0[%36] : memref<?xf32>
            %38 = emitc.mul %33, %37 : (f32, f32) -> f32
            %39 = arith.addi %arg5, %c6 : index
            %40 = arith.muli %39, %0 : index
            %41 = arith.addi %40, %7 : index
            %42 = memref.load %arg0[%41] : memref<?xf32>
            %43 = emitc.mul %38, %42 : (f32, f32) -> f32
            %44 = arith.addi %arg5, %c7 : index
            %45 = arith.muli %44, %0 : index
            %46 = arith.addi %45, %7 : index
            %47 = memref.load %arg0[%46] : memref<?xf32>
            %48 = emitc.mul %43, %47 : (f32, f32) -> f32
            %49 = arith.addi %arg5, %c8 : index
            %50 = arith.muli %49, %0 : index
            %51 = arith.addi %50, %7 : index
            %52 = memref.load %arg0[%51] : memref<?xf32>
            %53 = emitc.mul %48, %52 : (f32, f32) -> f32
            %54 = arith.addi %arg5, %c9 : index
            %55 = arith.muli %54, %0 : index
            %56 = arith.addi %55, %7 : index
            %57 = memref.load %arg0[%56] : memref<?xf32>
            %58 = emitc.mul %53, %57 : (f32, f32) -> f32
            scf.yield %58 : f32
          }
          memref.store %9, %arg1[%7] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18prod_reduce_kernelPKfPfii_0 {
    gpu.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 1.000000e+00 : f32
      %c256_i32 = arith.constant 256 : i32
      %c50 = arith.constant 50 : index
      %c10 = arith.constant 10 : index
      %c2 = arith.constant 2 : index
      %c3 = arith.constant 3 : index
      %c4 = arith.constant 4 : index
      %c5 = arith.constant 5 : index
      %c6 = arith.constant 6 : index
      %c7 = arith.constant 7 : index
      %c8 = arith.constant 8 : index
      %c9 = arith.constant 9 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg2 : i32 to index
      %1 = "npu.block_id"() : () -> i64
      %2 = emitc.cast %1 : i64 to i32
      %3 = arith.muli %2, %c256_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %4 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %5 = emitc.cast %4 : i64 to i32
        %6 = arith.addi %3, %5 : i32
        %7 = emitc.cast %6 : i32 to index
        %8 = arith.cmpi slt, %6, %arg3 : i32
        scf.if %8 {
          %9 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
            %10 = arith.muli %arg5, %0 : index
            %11 = arith.addi %10, %7 : index
            %12 = memref.load %arg0[%11] : memref<?xf32>
            %13 = emitc.mul %arg6, %12 : (f32, f32) -> f32
            %14 = arith.addi %arg5, %c1 : index
            %15 = arith.muli %14, %0 : index
            %16 = arith.addi %15, %7 : index
            %17 = memref.load %arg0[%16] : memref<?xf32>
            %18 = emitc.mul %13, %17 : (f32, f32) -> f32
            %19 = arith.addi %arg5, %c2 : index
            %20 = arith.muli %19, %0 : index
            %21 = arith.addi %20, %7 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = emitc.mul %18, %22 : (f32, f32) -> f32
            %24 = arith.addi %arg5, %c3 : index
            %25 = arith.muli %24, %0 : index
            %26 = arith.addi %25, %7 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = emitc.mul %23, %27 : (f32, f32) -> f32
            %29 = arith.addi %arg5, %c4 : index
            %30 = arith.muli %29, %0 : index
            %31 = arith.addi %30, %7 : index
            %32 = memref.load %arg0[%31] : memref<?xf32>
            %33 = emitc.mul %28, %32 : (f32, f32) -> f32
            %34 = arith.addi %arg5, %c5 : index
            %35 = arith.muli %34, %0 : index
            %36 = arith.addi %35, %7 : index
            %37 = memref.load %arg0[%36] : memref<?xf32>
            %38 = emitc.mul %33, %37 : (f32, f32) -> f32
            %39 = arith.addi %arg5, %c6 : index
            %40 = arith.muli %39, %0 : index
            %41 = arith.addi %40, %7 : index
            %42 = memref.load %arg0[%41] : memref<?xf32>
            %43 = emitc.mul %38, %42 : (f32, f32) -> f32
            %44 = arith.addi %arg5, %c7 : index
            %45 = arith.muli %44, %0 : index
            %46 = arith.addi %45, %7 : index
            %47 = memref.load %arg0[%46] : memref<?xf32>
            %48 = emitc.mul %43, %47 : (f32, f32) -> f32
            %49 = arith.addi %arg5, %c8 : index
            %50 = arith.muli %49, %0 : index
            %51 = arith.addi %50, %7 : index
            %52 = memref.load %arg0[%51] : memref<?xf32>
            %53 = emitc.mul %48, %52 : (f32, f32) -> f32
            %54 = arith.addi %arg5, %c9 : index
            %55 = arith.muli %54, %0 : index
            %56 = arith.addi %55, %7 : index
            %57 = memref.load %arg0[%56] : memref<?xf32>
            %58 = emitc.mul %53, %57 : (f32, f32) -> f32
            scf.yield %58 : f32
          }
          memref.store %9, %arg1[%7] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z18prod_reduce_kernelPKfPfii_0 {
    gpu.func @_Z18prod_reduce_kernelPKfPfii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32) {
      %cst = arith.constant 1.000000e+00 : f32
      %c256_i32 = arith.constant 256 : i32
      %c50 = arith.constant 50 : index
      %c10 = arith.constant 10 : index
      %c2 = arith.constant 2 : index
      %c3 = arith.constant 3 : index
      %c4 = arith.constant 4 : index
      %c5 = arith.constant 5 : index
      %c6 = arith.constant 6 : index
      %c7 = arith.constant 7 : index
      %c8 = arith.constant 8 : index
      %c9 = arith.constant 9 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = emitc.cast %arg2 : i32 to index
      %1 = "npu.block_id"() : () -> i64
      %2 = emitc.cast %1 : i64 to i32
      %3 = arith.muli %2, %c256_i32 : i32
      scf.for %arg4 = %c0 to %c32 step %c1 {
        %4 = builtin.unrealized_conversion_cast %arg4 : index to i64
        %5 = emitc.cast %4 : i64 to i32
        %6 = arith.addi %3, %5 : i32
        %7 = emitc.cast %6 : i32 to index
        %8 = arith.cmpi slt, %6, %arg3 : i32
        emitc.if %8 {
          %9 = scf.for %arg5 = %c0 to %c50 step %c10 iter_args(%arg6 = %cst) -> (f32) {
            %10 = arith.muli %arg5, %0 : index
            %11 = arith.addi %10, %7 : index
            %12 = memref.load %arg0[%11] : memref<?xf32>
            %13 = emitc.mul %arg6, %12 : (f32, f32) -> f32
            %14 = arith.addi %arg5, %c1 : index
            %15 = arith.muli %14, %0 : index
            %16 = arith.addi %15, %7 : index
            %17 = memref.load %arg0[%16] : memref<?xf32>
            %18 = emitc.mul %13, %17 : (f32, f32) -> f32
            %19 = arith.addi %arg5, %c2 : index
            %20 = arith.muli %19, %0 : index
            %21 = arith.addi %20, %7 : index
            %22 = memref.load %arg0[%21] : memref<?xf32>
            %23 = emitc.mul %18, %22 : (f32, f32) -> f32
            %24 = arith.addi %arg5, %c3 : index
            %25 = arith.muli %24, %0 : index
            %26 = arith.addi %25, %7 : index
            %27 = memref.load %arg0[%26] : memref<?xf32>
            %28 = emitc.mul %23, %27 : (f32, f32) -> f32
            %29 = arith.addi %arg5, %c4 : index
            %30 = arith.muli %29, %0 : index
            %31 = arith.addi %30, %7 : index
            %32 = memref.load %arg0[%31] : memref<?xf32>
            %33 = emitc.mul %28, %32 : (f32, f32) -> f32
            %34 = arith.addi %arg5, %c5 : index
            %35 = arith.muli %34, %0 : index
            %36 = arith.addi %35, %7 : index
            %37 = memref.load %arg0[%36] : memref<?xf32>
            %38 = emitc.mul %33, %37 : (f32, f32) -> f32
            %39 = arith.addi %arg5, %c6 : index
            %40 = arith.muli %39, %0 : index
            %41 = arith.addi %40, %7 : index
            %42 = memref.load %arg0[%41] : memref<?xf32>
            %43 = emitc.mul %38, %42 : (f32, f32) -> f32
            %44 = arith.addi %arg5, %c7 : index
            %45 = arith.muli %44, %0 : index
            %46 = arith.addi %45, %7 : index
            %47 = memref.load %arg0[%46] : memref<?xf32>
            %48 = emitc.mul %43, %47 : (f32, f32) -> f32
            %49 = arith.addi %arg5, %c8 : index
            %50 = arith.muli %49, %0 : index
            %51 = arith.addi %50, %7 : index
            %52 = memref.load %arg0[%51] : memref<?xf32>
            %53 = emitc.mul %48, %52 : (f32, f32) -> f32
            %54 = arith.addi %arg5, %c9 : index
            %55 = arith.muli %54, %0 : index
            %56 = arith.addi %55, %7 : index
            %57 = memref.load %arg0[%56] : memref<?xf32>
            %58 = emitc.mul %53, %57 : (f32, f32) -> f32
            scf.yield %58 : f32
          }
          memref.store %9, %arg1[%7] : memref<?xf32>
        }
      }
      gpu.return
    }
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

[ict-debug] driver.cc: After emitc::translateToCpp:

