warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __nvvm_ldg_f
warning: we failed to emit call to builtin function __nvvm_shfl_sync_down_f32
warning: we failed to emit call to builtin function __nvvm_shfl_sync_down_i32
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z38__device_stub__warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0, %arg1, %arg2, %arg3, %arg4) : (memref<?xf32>, memref<?xi64>, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32 = arith.constant 32 : index
    %c2_i32 = arith.constant 2 : i32
    %c16_i32 = arith.constant 16 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = llvm.mlir.undef : i32
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %arg2, %arg4 : i32
    %4 = arith.cmpi slt, %2, %3 : i32
    %5 = scf.if %4 -> (i32) {
      %10 = arith.divsi %2, %arg4 : i32
      %11 = arith.remsi %2, %arg4 : i32
      %12 = arith.muli %arg3, %arg4 : i32
      %13 = arith.muli %10, %12 : i32
      %14 = arith.addi %13, %11 : i32
      %15 = gpu.thread_id  x
      %16 = arith.index_cast %arg3 : i32 to index
      %17:2 = scf.for %arg5 = %15 to %16 step %c32 iter_args(%arg6 = %c0_i32, %arg7 = %cst) -> (i32, f32) {
        %19 = arith.index_cast %arg5 : index to i32
        %20 = arith.muli %19, %arg4 : i32
        %21 = arith.addi %14, %20 : i32
        %22 = arith.index_cast %21 : i32 to index
        %23 = "polygeist.subindex"(%arg0, %22) : (memref<?xf32>, index) -> memref<?xf32>
        %24 = func.call @_Z5__ldgPKf(%23) : (memref<?xf32>) -> f32
        %25 = arith.cmpf ogt, %24, %arg7 : f32
        %26 = arith.select %25, %24, %arg7 : f32
        %27 = scf.if %25 -> (i32) {
          scf.yield %19 : i32
        } else {
          %28 = arith.cmpf oeq, %24, %arg7 : f32
          %29 = scf.if %28 -> (i32) {
            %30 = arith.cmpi slt, %19, %arg6 : i32
            %31 = arith.select %30, %19, %arg6 : i32
            scf.yield %31 : i32
          } else {
            scf.yield %arg6 : i32
          }
          scf.yield %29 : i32
        }
        scf.yield %27, %26 : i32, f32
      }
      %18:3 = scf.while (%arg5 = %c16_i32, %arg6 = %17#0, %arg7 = %17#1) : (i32, i32, f32) -> (i32, i32, f32) {
        %19 = arith.cmpi sgt, %arg5, %c0_i32 : i32
        scf.condition(%19) %arg6, %arg5, %arg7 : i32, i32, f32
      } do {
      ^bb0(%arg5: i32, %arg6: i32, %arg7: f32):
        %19 = func.call @_Z16__shfl_down_syncjfji(%c-1_i32, %arg7, %arg6, %c32_i32) : (i32, f32, i32, i32) -> f32
        %20 = func.call @_Z16__shfl_down_syncjiji(%c-1_i32, %arg5, %arg6, %c32_i32) : (i32, i32, i32, i32) -> i32
        %21 = arith.cmpf ogt, %19, %arg7 : f32
        %22 = arith.select %21, %19, %arg7 : f32
        %23 = scf.if %21 -> (i32) {
          scf.yield %20 : i32
        } else {
          %25 = arith.cmpf oeq, %19, %arg7 : f32
          %26 = scf.if %25 -> (i32) {
            %27 = arith.cmpi slt, %20, %arg5 : i32
            %28 = arith.select %27, %20, %arg5 : i32
            scf.yield %28 : i32
          } else {
            scf.yield %arg5 : i32
          }
          scf.yield %26 : i32
        }
        %24 = arith.divsi %arg6, %c2_i32 : i32
        scf.yield %24, %23, %22 : i32, i32, f32
      }
      scf.yield %18#0 : i32
    } else {
      scf.yield %0 : i32
    }
    %6 = gpu.thread_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.andi %4, %8 : i1
    scf.if %9 {
      %10 = arith.extsi %5 : i32 to i64
      affine.store %10, %arg1[symbol(%1)] : memref<?xi64>
    }
    return
  }
  func.func private @_Z5__ldgPKf(%arg0: memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = call @__nvvm_ldg_f(%arg0) : (memref<?xf32>) -> f32
    return %0 : f32
  }
  func.func private @_Z16__shfl_down_syncjfji(%arg0: i32, %arg1: f32, %arg2: i32, %arg3: i32) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = arith.subi %c32_i32, %arg3 : i32
    %1 = arith.shli %0, %c8_i32 : i32
    %2 = arith.ori %1, %c31_i32 : i32
    %3 = call @__nvvm_shfl_sync_down_f32(%arg0, %arg1, %arg2, %2) : (i32, f32, i32, i32) -> f32
    return %3 : f32
  }
  func.func private @_Z16__shfl_down_syncjiji(%arg0: i32, %arg1: i32, %arg2: i32, %arg3: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = arith.subi %c32_i32, %arg3 : i32
    %1 = arith.shli %0, %c8_i32 : i32
    %2 = arith.ori %1, %c31_i32 : i32
    %3 = call @__nvvm_shfl_sync_down_i32(%arg0, %arg1, %arg2, %2) : (i32, i32, i32, i32) -> i32
    return %3 : i32
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %c32 = arith.constant 32 : index
    %c2_i32 = arith.constant 2 : i32
    %c16_i32 = arith.constant 16 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = llvm.mlir.undef : i32
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %arg2, %arg4 : i32
    %4 = arith.cmpi slt, %2, %3 : i32
    %5 = scf.if %4 -> (i32) {
      %10 = arith.divsi %2, %arg4 : i32
      %11 = arith.remsi %2, %arg4 : i32
      %12 = arith.muli %arg3, %arg4 : i32
      %13 = arith.muli %10, %12 : i32
      %14 = arith.addi %13, %11 : i32
      %15 = gpu.thread_id  x
      %16 = arith.index_cast %arg3 : i32 to index
      %17:2 = scf.for %arg5 = %15 to %16 step %c32 iter_args(%arg6 = %c0_i32, %arg7 = %cst) -> (i32, f32) {
        %19 = arith.index_cast %arg5 : index to i32
        %20 = arith.muli %19, %arg4 : i32
        %21 = arith.addi %14, %20 : i32
        %22 = arith.index_cast %21 : i32 to index
        %23 = "polygeist.subindex"(%arg0, %22) : (memref<?xf32>, index) -> memref<?xf32>
        %24 = func.call @__nvvm_ldg_f(%23) : (memref<?xf32>) -> f32
        %25 = arith.cmpf ogt, %24, %arg7 : f32
        %26 = arith.select %25, %24, %arg7 : f32
        %27 = scf.if %25 -> (i32) {
          scf.yield %19 : i32
        } else {
          %28 = arith.cmpf oeq, %24, %arg7 : f32
          %29 = scf.if %28 -> (i32) {
            %30 = arith.cmpi slt, %19, %arg6 : i32
            %31 = arith.select %30, %19, %arg6 : i32
            scf.yield %31 : i32
          } else {
            scf.yield %arg6 : i32
          }
          scf.yield %29 : i32
        }
        scf.yield %27, %26 : i32, f32
      }
      %18:3 = scf.while (%arg5 = %c16_i32, %arg6 = %17#0, %arg7 = %17#1) : (i32, i32, f32) -> (i32, i32, f32) {
        %19 = arith.cmpi sgt, %arg5, %c0_i32 : i32
        scf.condition(%19) %arg6, %arg5, %arg7 : i32, i32, f32
      } do {
      ^bb0(%arg5: i32, %arg6: i32, %arg7: f32):
        %19 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg7, %arg6, %c31_i32) : (i32, f32, i32, i32) -> f32
        %20 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg5, %arg6, %c31_i32) : (i32, i32, i32, i32) -> i32
        %21 = arith.cmpf ogt, %19, %arg7 : f32
        %22 = arith.select %21, %19, %arg7 : f32
        %23 = scf.if %21 -> (i32) {
          scf.yield %20 : i32
        } else {
          %25 = arith.cmpf oeq, %19, %arg7 : f32
          %26 = scf.if %25 -> (i32) {
            %27 = arith.cmpi slt, %20, %arg5 : i32
            %28 = arith.select %27, %20, %arg5 : i32
            scf.yield %28 : i32
          } else {
            scf.yield %arg5 : i32
          }
          scf.yield %26 : i32
        }
        %24 = arith.divsi %arg6, %c2_i32 : i32
        scf.yield %24, %23, %22 : i32, i32, f32
      }
      scf.yield %18#0 : i32
    } else {
      scf.yield %0 : i32
    }
    %6 = gpu.thread_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.andi %4, %8 : i1
    scf.if %9 {
      %10 = arith.extsi %5 : i32 to i64
      affine.store %10, %arg1[symbol(%1)] : memref<?xi64>
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c31_i32 = arith.constant 31 : i32
    %c32 = arith.constant 32 : index
    %c2_i32 = arith.constant 2 : i32
    %c16_i32 = arith.constant 16 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant -3.40282347E+38 : f32
    %0 = llvm.mlir.undef : i32
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %arg2, %arg4 : i32
    %4 = arith.cmpi slt, %2, %3 : i32
    %5 = scf.if %4 -> (i32) {
      %10 = arith.divsi %2, %arg4 : i32
      %11 = arith.remsi %2, %arg4 : i32
      %12 = arith.muli %arg3, %arg4 : i32
      %13 = arith.muli %10, %12 : i32
      %14 = arith.addi %13, %11 : i32
      %15 = gpu.thread_id  x
      %16 = arith.index_cast %arg3 : i32 to index
      %17:2 = scf.for %arg5 = %15 to %16 step %c32 iter_args(%arg6 = %c0_i32, %arg7 = %cst) -> (i32, f32) {
        %19 = arith.index_cast %arg5 : index to i32
        %20 = arith.muli %19, %arg4 : i32
        %21 = arith.addi %14, %20 : i32
        %22 = arith.index_cast %21 : i32 to index
        %23 = "polygeist.subindex"(%arg0, %22) : (memref<?xf32>, index) -> memref<?xf32>
        %24 = func.call @__nvvm_ldg_f(%23) : (memref<?xf32>) -> f32
        %25 = arith.cmpf ogt, %24, %arg7 : f32
        %26 = arith.select %25, %24, %arg7 : f32
        %27 = scf.if %25 -> (i32) {
          scf.yield %19 : i32
        } else {
          %28 = arith.cmpf oeq, %24, %arg7 : f32
          %29 = scf.if %28 -> (i32) {
            %30 = arith.cmpi slt, %19, %arg6 : i32
            %31 = arith.select %30, %19, %arg6 : i32
            scf.yield %31 : i32
          } else {
            scf.yield %arg6 : i32
          }
          scf.yield %29 : i32
        }
        scf.yield %27, %26 : i32, f32
      }
      %18:3 = scf.while (%arg5 = %c16_i32, %arg6 = %17#0, %arg7 = %17#1) : (i32, i32, f32) -> (i32, i32, f32) {
        %19 = arith.cmpi sgt, %arg5, %c0_i32 : i32
        scf.condition(%19) %arg6, %arg5, %arg7 : i32, i32, f32
      } do {
      ^bb0(%arg5: i32, %arg6: i32, %arg7: f32):
        %19 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg7, %arg6, %c31_i32) : (i32, f32, i32, i32) -> f32
        %20 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg5, %arg6, %c31_i32) : (i32, i32, i32, i32) -> i32
        %21 = arith.cmpf ogt, %19, %arg7 : f32
        %22 = arith.select %21, %19, %arg7 : f32
        %23 = scf.if %21 -> (i32) {
          scf.yield %20 : i32
        } else {
          %25 = arith.cmpf oeq, %19, %arg7 : f32
          %26 = scf.if %25 -> (i32) {
            %27 = arith.cmpi slt, %20, %arg5 : i32
            %28 = arith.select %27, %20, %arg5 : i32
            scf.yield %28 : i32
          } else {
            scf.yield %arg5 : i32
          }
          scf.yield %26 : i32
        }
        %24 = arith.divsi %arg6, %c2_i32 : i32
        scf.yield %24, %23, %22 : i32, i32, f32
      }
      scf.yield %18#0 : i32
    } else {
      scf.yield %0 : i32
    }
    %6 = gpu.thread_id  x
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.cmpi eq, %7, %c0_i32 : i32
    %9 = arith.andi %4, %8 : i1
    scf.if %9 {
      %10 = arith.extsi %5 : i32 to i64
      memref.store %10, %arg1[%1] : memref<?xi64>
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_shfl_sync_down_f32. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_shfl_sync_down_i32. func.getBlocks().size() == 0! this function is empty, skip it.

WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c31_i32 = arith.constant 31 : i32
      %c32_0 = arith.constant 32 : index
      %c2_i32 = arith.constant 2 : i32
      %c16_i32 = arith.constant 16 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = llvm.mlir.undef : i32
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %arg2, %arg4 : i32
      %4 = arith.cmpi slt, %2, %3 : i32
      %5 = scf.if %4 -> (i32) {
        %9 = arith.divsi %2, %arg4 : i32
        %10 = arith.remsi %2, %arg4 : i32
        %11 = arith.muli %arg3, %arg4 : i32
        %12 = arith.muli %9, %11 : i32
        %13 = arith.addi %12, %10 : i32
        %14 = arith.index_cast %arg3 : i32 to index
        %15:2 = scf.for %arg6 = %arg5 to %14 step %c32_0 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
          %17 = arith.index_cast %arg6 : index to i32
          %18 = arith.muli %17, %arg4 : i32
          %19 = arith.addi %13, %18 : i32
          %20 = arith.index_cast %19 : i32 to index
          %21 = "polygeist.subindex"(%arg0, %20) : (memref<?xf32>, index) -> memref<?xf32>
          %22 = func.call @__nvvm_ldg_f(%21) : (memref<?xf32>) -> f32
          %23 = arith.cmpf ogt, %22, %arg8 : f32
          %24 = arith.select %23, %22, %arg8 : f32
          %25 = scf.if %23 -> (i32) {
            scf.yield %17 : i32
          } else {
            %26 = arith.cmpf oeq, %22, %arg8 : f32
            %27 = scf.if %26 -> (i32) {
              %28 = arith.cmpi slt, %17, %arg7 : i32
              %29 = arith.select %28, %17, %arg7 : i32
              scf.yield %29 : i32
            } else {
              scf.yield %arg7 : i32
            }
            scf.yield %27 : i32
          }
          scf.yield %25, %24 : i32, f32
        }
        %16:3 = scf.while (%arg6 = %c16_i32, %arg7 = %15#0, %arg8 = %15#1) : (i32, i32, f32) -> (i32, i32, f32) {
          %17 = arith.cmpi sgt, %arg6, %c0_i32 : i32
          scf.condition(%17) %arg7, %arg6, %arg8 : i32, i32, f32
        } do {
        ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
          %17 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
          %18 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
          %19 = arith.cmpf ogt, %17, %arg8 : f32
          %20 = arith.select %19, %17, %arg8 : f32
          %21 = scf.if %19 -> (i32) {
            scf.yield %18 : i32
          } else {
            %23 = arith.cmpf oeq, %17, %arg8 : f32
            %24 = scf.if %23 -> (i32) {
              %25 = arith.cmpi slt, %18, %arg6 : i32
              %26 = arith.select %25, %18, %arg6 : i32
              scf.yield %26 : i32
            } else {
              scf.yield %arg6 : i32
            }
            scf.yield %24 : i32
          }
          %22 = arith.divsi %arg7, %c2_i32 : i32
          scf.yield %22, %21, %20 : i32, i32, f32
        }
        scf.yield %16#0 : i32
      } else {
        scf.yield %0 : i32
      }
      %6 = arith.index_cast %arg5 : index to i32
      %7 = arith.cmpi eq, %6, %c0_i32 : i32
      %8 = arith.andi %4, %7 : i1
      scf.if %8 {
        %9 = arith.extsi %5 : i32 to i64
        memref.store %9, %arg1[%1] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %c31_i32 = arith.constant 31 : i32
      %c32_0 = arith.constant 32 : index
      %c2_i32 = arith.constant 2 : i32
      %c16_i32 = arith.constant 16 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = llvm.mlir.undef : i32
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %arg2, %arg4 : i32
      %4 = arith.cmpi slt, %2, %3 : i32
      %5 = scf.if %4 -> (i32) {
        %9 = arith.divsi %2, %arg4 : i32
        %10 = arith.remsi %2, %arg4 : i32
        %11 = arith.muli %arg3, %arg4 : i32
        %12 = arith.muli %9, %11 : i32
        %13 = arith.addi %12, %10 : i32
        %14 = arith.index_cast %arg3 : i32 to index
        %15:2 = scf.for %arg6 = %arg5 to %14 step %c32_0 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
          %17 = arith.index_cast %arg6 : index to i32
          %18 = arith.muli %17, %arg4 : i32
          %19 = arith.addi %13, %18 : i32
          %20 = arith.index_cast %19 : i32 to index
          %21 = "polygeist.subindex"(%arg0, %20) : (memref<?xf32>, index) -> memref<?xf32>
          %22 = func.call @__nvvm_ldg_f(%21) : (memref<?xf32>) -> f32
          %23 = arith.cmpf ogt, %22, %arg8 : f32
          %24 = arith.select %23, %22, %arg8 : f32
          %25 = scf.if %23 -> (i32) {
            scf.yield %17 : i32
          } else {
            %26 = arith.cmpf oeq, %22, %arg8 : f32
            %27 = scf.if %26 -> (i32) {
              %28 = arith.cmpi slt, %17, %arg7 : i32
              %29 = arith.select %28, %17, %arg7 : i32
              scf.yield %29 : i32
            } else {
              scf.yield %arg7 : i32
            }
            scf.yield %27 : i32
          }
          scf.yield %25, %24 : i32, f32
        }
        %16:3 = scf.while (%arg6 = %c16_i32, %arg7 = %15#0, %arg8 = %15#1) : (i32, i32, f32) -> (i32, i32, f32) {
          %17 = arith.cmpi sgt, %arg6, %c0_i32 : i32
          scf.condition(%17) %arg7, %arg6, %arg8 : i32, i32, f32
        } do {
        ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
          %17 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
          %18 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
          %19 = arith.cmpf ogt, %17, %arg8 : f32
          %20 = arith.select %19, %17, %arg8 : f32
          %21 = scf.if %19 -> (i32) {
            scf.yield %18 : i32
          } else {
            %23 = arith.cmpf oeq, %17, %arg8 : f32
            %24 = scf.if %23 -> (i32) {
              %25 = arith.cmpi slt, %18, %arg6 : i32
              %26 = arith.select %25, %18, %arg6 : i32
              scf.yield %26 : i32
            } else {
              scf.yield %arg6 : i32
            }
            scf.yield %24 : i32
          }
          %22 = arith.divsi %arg7, %c2_i32 : i32
          scf.yield %22, %21, %20 : i32, i32, f32
        }
        scf.yield %16#0 : i32
      } else {
        scf.yield %0 : i32
      }
      %6 = arith.index_cast %arg5 : index to i32
      %7 = arith.cmpi eq, %6, %c0_i32 : i32
      %8 = arith.andi %4, %7 : i1
      scf.if %8 {
        %9 = arith.extsi %5 : i32 to i64
        memref.store %9, %arg1[%1] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant -3.40282347E+38 : f32
    %c0_i32 = arith.constant 0 : i32
    %c-1_i32 = arith.constant -1 : i32
    %c16_i32 = arith.constant 16 : i32
    %c2_i32 = arith.constant 2 : i32
    %c31_i32 = arith.constant 31 : i32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = llvm.mlir.undef : i32
    %1 = gpu.block_id  x
    %2 = arith.index_cast %1 : index to i32
    %3 = arith.muli %arg2, %arg4 : i32
    %4 = arith.cmpi slt, %2, %3 : i32
    %5 = arith.divsi %2, %arg4 : i32
    %6 = arith.remsi %2, %arg4 : i32
    %7 = arith.muli %arg3, %arg4 : i32
    %8 = arith.muli %5, %7 : i32
    %9 = arith.addi %8, %6 : i32
    %10 = arith.index_cast %arg3 : i32 to index
    scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
      %11 = scf.if %4 -> (i32) {
        %15:2 = scf.for %arg6 = %arg5 to %10 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
          %17 = arith.index_cast %arg6 : index to i32
          %18 = arith.muli %17, %arg4 : i32
          %19 = arith.addi %9, %18 : i32
          %20 = arith.index_cast %19 : i32 to index
          %21 = "polygeist.subindex"(%arg0, %20) : (memref<?xf32>, index) -> memref<?xf32>
          %22 = func.call @__nvvm_ldg_f(%21) : (memref<?xf32>) -> f32
          %23 = arith.cmpf ogt, %22, %arg8 : f32
          %24 = arith.select %23, %22, %arg8 : f32
          %25 = scf.if %23 -> (i32) {
            scf.yield %17 : i32
          } else {
            %26 = arith.cmpf oeq, %22, %arg8 : f32
            %27 = scf.if %26 -> (i32) {
              %28 = arith.cmpi slt, %17, %arg7 : i32
              %29 = arith.select %28, %17, %arg7 : i32
              scf.yield %29 : i32
            } else {
              scf.yield %arg7 : i32
            }
            scf.yield %27 : i32
          }
          scf.yield %25, %24 : i32, f32
        }
        %16:3 = scf.while (%arg6 = %c16_i32, %arg7 = %15#0, %arg8 = %15#1) : (i32, i32, f32) -> (i32, i32, f32) {
          %17 = arith.cmpi sgt, %arg6, %c0_i32 : i32
          scf.condition(%17) %arg7, %arg6, %arg8 : i32, i32, f32
        } do {
        ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
          %17 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
          %18 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
          %19 = arith.cmpf ogt, %17, %arg8 : f32
          %20 = arith.select %19, %17, %arg8 : f32
          %21 = scf.if %19 -> (i32) {
            scf.yield %18 : i32
          } else {
            %23 = arith.cmpf oeq, %17, %arg8 : f32
            %24 = scf.if %23 -> (i32) {
              %25 = arith.cmpi slt, %18, %arg6 : i32
              %26 = arith.select %25, %18, %arg6 : i32
              scf.yield %26 : i32
            } else {
              scf.yield %arg6 : i32
            }
            scf.yield %24 : i32
          }
          %22 = arith.divsi %arg7, %c2_i32 : i32
          scf.yield %22, %21, %20 : i32, i32, f32
        }
        scf.yield %16#0 : i32
      } else {
        scf.yield %0 : i32
      }
      %12 = arith.index_cast %arg5 : index to i32
      %13 = arith.cmpi eq, %12, %c0_i32 : i32
      %14 = arith.andi %4, %13 : i1
      scf.if %14 {
        %15 = arith.extsi %11 : i32 to i64
        memref.store %15, %arg1[%1] : memref<?xi64>
      }
      scf.yield
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_shfl_sync_down_f32. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_shfl_sync_down_i32. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23warp_argmax_nosm_kernelPKfPliii_0 {
    gpu.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c0_i32 = arith.constant 0 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c16_i32 = arith.constant 16 : i32
      %c2_i32 = arith.constant 2 : i32
      %c31_i32 = arith.constant 31 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = llvm.mlir.undef : i32
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %arg2, %arg4 : i32
      %4 = arith.cmpi slt, %2, %3 : i32
      %5 = arith.divsi %2, %arg4 : i32
      %6 = arith.remsi %2, %arg4 : i32
      %7 = arith.muli %arg3, %arg4 : i32
      %8 = arith.muli %5, %7 : i32
      %9 = arith.addi %8, %6 : i32
      %10 = arith.index_cast %arg3 : i32 to index
      scf.parallel (%arg5) = (%c0) to (%c32) step (%c1) {
        %11 = scf.if %4 -> (i32) {
          %15:2 = scf.for %arg6 = %arg5 to %10 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
            %17 = arith.index_cast %arg6 : index to i32
            %18 = arith.muli %17, %arg4 : i32
            %19 = arith.addi %9, %18 : i32
            %20 = arith.index_cast %19 : i32 to index
            %21 = "polygeist.subindex"(%arg0, %20) : (memref<?xf32>, index) -> memref<?xf32>
            %22 = func.call @__nvvm_ldg_f(%21) : (memref<?xf32>) -> f32
            %23 = arith.cmpf ogt, %22, %arg8 : f32
            %24 = arith.select %23, %22, %arg8 : f32
            %25 = scf.if %23 -> (i32) {
              scf.yield %17 : i32
            } else {
              %26 = arith.cmpf oeq, %22, %arg8 : f32
              %27 = scf.if %26 -> (i32) {
                %28 = arith.cmpi slt, %17, %arg7 : i32
                %29 = arith.select %28, %17, %arg7 : i32
                scf.yield %29 : i32
              } else {
                scf.yield %arg7 : i32
              }
              scf.yield %27 : i32
            }
            scf.yield %25, %24 : i32, f32
          }
          %16:3 = scf.while (%arg6 = %c16_i32, %arg7 = %15#0, %arg8 = %15#1) : (i32, i32, f32) -> (i32, i32, f32) {
            %17 = arith.cmpi sgt, %arg6, %c0_i32 : i32
            scf.condition(%17) %arg7, %arg6, %arg8 : i32, i32, f32
          } do {
          ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
            %17 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
            %18 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
            %19 = arith.cmpf ogt, %17, %arg8 : f32
            %20 = arith.select %19, %17, %arg8 : f32
            %21 = scf.if %19 -> (i32) {
              scf.yield %18 : i32
            } else {
              %23 = arith.cmpf oeq, %17, %arg8 : f32
              %24 = scf.if %23 -> (i32) {
                %25 = arith.cmpi slt, %18, %arg6 : i32
                %26 = arith.select %25, %18, %arg6 : i32
                scf.yield %26 : i32
              } else {
                scf.yield %arg6 : i32
              }
              scf.yield %24 : i32
            }
            %22 = arith.divsi %arg7, %c2_i32 : i32
            scf.yield %22, %21, %20 : i32, i32, f32
          }
          scf.yield %16#0 : i32
        } else {
          scf.yield %0 : i32
        }
        %12 = arith.index_cast %arg5 : index to i32
        %13 = arith.cmpi eq, %12, %c0_i32 : i32
        %14 = arith.andi %4, %13 : i1
        scf.if %14 {
          %15 = arith.extsi %11 : i32 to i64
          memref.store %15, %arg1[%1] : memref<?xi64>
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23warp_argmax_nosm_kernelPKfPliii_0 {
    gpu.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %cst = arith.constant -3.40282347E+38 : f32
      %c0_i32 = arith.constant 0 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c16_i32 = arith.constant 16 : i32
      %c2_i32 = arith.constant 2 : i32
      %c31_i32 = arith.constant 31 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = llvm.mlir.undef : i32
      %1 = gpu.block_id  x
      %2 = arith.index_cast %1 : index to i32
      %3 = arith.muli %arg2, %arg4 : i32
      %4 = arith.cmpi slt, %2, %3 : i32
      %5 = arith.divsi %2, %arg4 : i32
      %6 = arith.remsi %2, %arg4 : i32
      %7 = arith.muli %arg3, %arg4 : i32
      %8 = arith.muli %5, %7 : i32
      %9 = arith.addi %8, %6 : i32
      %10 = arith.index_cast %arg3 : i32 to index
      %c1_0 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_0 {
        %11 = scf.if %4 -> (i32) {
          %15:2 = scf.for %arg6 = %arg5 to %10 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
            %17 = arith.index_cast %arg6 : index to i32
            %18 = arith.muli %17, %arg4 : i32
            %19 = arith.addi %9, %18 : i32
            %20 = arith.index_cast %19 : i32 to index
            %21 = "polygeist.subindex"(%arg0, %20) : (memref<?xf32>, index) -> memref<?xf32>
            %22 = func.call @__nvvm_ldg_f(%21) : (memref<?xf32>) -> f32
            %23 = arith.cmpf ogt, %22, %arg8 : f32
            %24 = arith.select %23, %22, %arg8 : f32
            %25 = scf.if %23 -> (i32) {
              scf.yield %17 : i32
            } else {
              %26 = arith.cmpf oeq, %22, %arg8 : f32
              %27 = scf.if %26 -> (i32) {
                %28 = arith.cmpi slt, %17, %arg7 : i32
                %29 = arith.select %28, %17, %arg7 : i32
                scf.yield %29 : i32
              } else {
                scf.yield %arg7 : i32
              }
              scf.yield %27 : i32
            }
            scf.yield %25, %24 : i32, f32
          }
          %16:3 = scf.while (%arg6 = %c16_i32, %arg7 = %15#0, %arg8 = %15#1) : (i32, i32, f32) -> (i32, i32, f32) {
            %17 = arith.cmpi sgt, %arg6, %c0_i32 : i32
            scf.condition(%17) %arg7, %arg6, %arg8 : i32, i32, f32
          } do {
          ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
            %17 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
            %18 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
            %19 = arith.cmpf ogt, %17, %arg8 : f32
            %20 = arith.select %19, %17, %arg8 : f32
            %21 = scf.if %19 -> (i32) {
              scf.yield %18 : i32
            } else {
              %23 = arith.cmpf oeq, %17, %arg8 : f32
              %24 = scf.if %23 -> (i32) {
                %25 = arith.cmpi slt, %18, %arg6 : i32
                %26 = arith.select %25, %18, %arg6 : i32
                scf.yield %26 : i32
              } else {
                scf.yield %arg6 : i32
              }
              scf.yield %24 : i32
            }
            %22 = arith.divsi %arg7, %c2_i32 : i32
            scf.yield %22, %21, %20 : i32, i32, f32
          }
          scf.yield %16#0 : i32
        } else {
          scf.yield %0 : i32
        }
        %12 = arith.index_cast %arg5 : index to i32
        %13 = arith.cmpi eq, %12, %c0_i32 : i32
        %14 = arith.andi %4, %13 : i1
        scf.if %14 {
          %15 = arith.extsi %11 : i32 to i64
          memref.store %15, %arg1[%1] : memref<?xi64>
        }
      }
      gpu.return
    }
    func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] GPUBlockIdToNPULowering: process op: 

%1 = gpu.block_id  x
[ict-debug] CastLikeOpToNPULowering: process op: 

%3 = arith.index_cast %2 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%12 = arith.index_cast %arg3 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%21 = arith.index_cast %arg6 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%25 = arith.index_cast %24 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%17 = arith.index_cast %arg5 : index to i32
[ict-debug] CastLikeOpToNPULowering: process op: 

%21 = arith.extsi %16 : i32 to i64
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23warp_argmax_nosm_kernelPKfPliii_0 {
    gpu.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %0 = builtin.unrealized_conversion_cast %arg0 : memref<?xf32> to !llvm.ptr
      %cst = arith.constant -3.40282347E+38 : f32
      %c0_i32 = arith.constant 0 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c16_i32 = arith.constant 16 : i32
      %c2_i32 = arith.constant 2 : i32
      %c31_i32 = arith.constant 31 : i32
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %1 = llvm.mlir.undef : i32
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %arg2, %arg4 : i32
      %6 = arith.cmpi slt, %4, %5 : i32
      %7 = arith.divsi %4, %arg4 : i32
      %8 = arith.remsi %4, %arg4 : i32
      %9 = arith.muli %arg3, %arg4 : i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.addi %10, %8 : i32
      %12 = emitc.cast %arg3 : i32 to index
      %c1_0 = arith.constant 1 : index
      scf.for %arg5 = %c0 to %c32 step %c1_0 {
        %13 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %14 = scf.if %6 -> (i32) {
          %18:2 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
            %20 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %21 = emitc.cast %20 : i64 to i32
            %22 = arith.muli %21, %arg4 : i32
            %23 = arith.addi %11, %22 : i32
            %24 = emitc.cast %23 : i32 to index
            %25 = builtin.unrealized_conversion_cast %24 : index to i64
            %26 = llvm.getelementptr %0[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
            %27 = llvm.bitcast %26 : !llvm.ptr to !llvm.ptr
            %28 = builtin.unrealized_conversion_cast %27 : !llvm.ptr to memref<?xf32>
            %29 = func.call @__nvvm_ldg_f(%28) : (memref<?xf32>) -> f32
            %30 = arith.cmpf ogt, %29, %arg8 : f32
            %31 = arith.select %30, %29, %arg8 : f32
            %32 = scf.if %30 -> (i32) {
              scf.yield %21 : i32
            } else {
              %33 = arith.cmpf oeq, %29, %arg8 : f32
              %34 = scf.if %33 -> (i32) {
                %35 = arith.cmpi slt, %21, %arg7 : i32
                %36 = arith.select %35, %21, %arg7 : i32
                scf.yield %36 : i32
              } else {
                scf.yield %arg7 : i32
              }
              scf.yield %34 : i32
            }
            scf.yield %32, %31 : i32, f32
          }
          %19:3 = scf.while (%arg6 = %c16_i32, %arg7 = %18#0, %arg8 = %18#1) : (i32, i32, f32) -> (i32, i32, f32) {
            %20 = arith.cmpi sgt, %arg6, %c0_i32 : i32
            scf.condition(%20) %arg7, %arg6, %arg8 : i32, i32, f32
          } do {
          ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
            %20 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
            %21 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
            %22 = arith.cmpf ogt, %20, %arg8 : f32
            %23 = arith.select %22, %20, %arg8 : f32
            %24 = scf.if %22 -> (i32) {
              scf.yield %21 : i32
            } else {
              %26 = arith.cmpf oeq, %20, %arg8 : f32
              %27 = scf.if %26 -> (i32) {
                %28 = arith.cmpi slt, %21, %arg6 : i32
                %29 = arith.select %28, %21, %arg6 : i32
                scf.yield %29 : i32
              } else {
                scf.yield %arg6 : i32
              }
              scf.yield %27 : i32
            }
            %25 = arith.divsi %arg7, %c2_i32 : i32
            scf.yield %25, %24, %23 : i32, i32, f32
          }
          scf.yield %19#0 : i32
        } else {
          scf.yield %1 : i32
        }
        %15 = emitc.cast %13 : i64 to i32
        %16 = arith.cmpi eq, %15, %c0_i32 : i32
        %17 = arith.andi %6, %16 : i1
        scf.if %17 {
          %18 = emitc.cast %14 : i32 to i64
          memref.store %18, %arg1[%3] : memref<?xi64>
        }
      }
      gpu.return
    }
    func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23warp_argmax_nosm_kernelPKfPliii_0 {
    gpu.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %c32 = arith.constant 32 : index
      %c1 = arith.constant 1 : index
      %c0 = arith.constant 0 : index
      %c31_i32 = arith.constant 31 : i32
      %c2_i32 = arith.constant 2 : i32
      %c16_i32 = arith.constant 16 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = builtin.unrealized_conversion_cast %arg0 : memref<?xf32> to !llvm.ptr
      %1 = llvm.mlir.undef : i32
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %arg2, %arg4 : i32
      %6 = arith.cmpi slt, %4, %5 : i32
      %7 = arith.divsi %4, %arg4 : i32
      %8 = arith.remsi %4, %arg4 : i32
      %9 = arith.muli %arg3, %arg4 : i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.addi %10, %8 : i32
      %12 = emitc.cast %arg3 : i32 to index
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %13 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %14 = scf.if %6 -> (i32) {
          %18:2 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
            %20 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %21 = emitc.cast %20 : i64 to i32
            %22 = arith.muli %21, %arg4 : i32
            %23 = arith.addi %11, %22 : i32
            %24 = emitc.cast %23 : i32 to index
            %25 = builtin.unrealized_conversion_cast %24 : index to i64
            %26 = llvm.getelementptr %0[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
            %27 = builtin.unrealized_conversion_cast %26 : !llvm.ptr to memref<?xf32>
            %28 = func.call @__nvvm_ldg_f(%27) : (memref<?xf32>) -> f32
            %29 = arith.cmpf ogt, %28, %arg8 : f32
            %30 = arith.select %29, %28, %arg8 : f32
            %31 = scf.if %29 -> (i32) {
              scf.yield %21 : i32
            } else {
              %32 = arith.cmpf oeq, %28, %arg8 : f32
              %33 = scf.if %32 -> (i32) {
                %34 = arith.cmpi slt, %21, %arg7 : i32
                %35 = arith.select %34, %21, %arg7 : i32
                scf.yield %35 : i32
              } else {
                scf.yield %arg7 : i32
              }
              scf.yield %33 : i32
            }
            scf.yield %31, %30 : i32, f32
          }
          %19:3 = scf.while (%arg6 = %c16_i32, %arg7 = %18#0, %arg8 = %18#1) : (i32, i32, f32) -> (i32, i32, f32) {
            %20 = arith.cmpi sgt, %arg6, %c0_i32 : i32
            scf.condition(%20) %arg7, %arg6, %arg8 : i32, i32, f32
          } do {
          ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
            %20 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
            %21 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
            %22 = arith.cmpf ogt, %20, %arg8 : f32
            %23 = arith.select %22, %20, %arg8 : f32
            %24 = scf.if %22 -> (i32) {
              scf.yield %21 : i32
            } else {
              %26 = arith.cmpf oeq, %20, %arg8 : f32
              %27 = scf.if %26 -> (i32) {
                %28 = arith.cmpi slt, %21, %arg6 : i32
                %29 = arith.select %28, %21, %arg6 : i32
                scf.yield %29 : i32
              } else {
                scf.yield %arg6 : i32
              }
              scf.yield %27 : i32
            }
            %25 = arith.divsi %arg7, %c2_i32 : i32
            scf.yield %25, %24, %23 : i32, i32, f32
          }
          scf.yield %19#0 : i32
        } else {
          scf.yield %1 : i32
        }
        %15 = emitc.cast %13 : i64 to i32
        %16 = arith.cmpi eq, %15, %c0_i32 : i32
        %17 = arith.andi %6, %16 : i1
        scf.if %17 {
          %18 = emitc.cast %14 : i32 to i64
          memref.store %18, %arg1[%3] : memref<?xi64>
        }
      }
      gpu.return
    }
    func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z23warp_argmax_nosm_kernelPKfPliii_0 {
    gpu.func @_Z23warp_argmax_nosm_kernelPKfPliii(%arg0: memref<?xf32>, %arg1: memref<?xi64>, %arg2: i32, %arg3: i32, %arg4: i32) {
      %c32 = arith.constant 32 : index
      %c1 = arith.constant 1 : index
      %c0 = arith.constant 0 : index
      %c31_i32 = arith.constant 31 : i32
      %c2_i32 = arith.constant 2 : i32
      %c16_i32 = arith.constant 16 : i32
      %c-1_i32 = arith.constant -1 : i32
      %c0_i32 = arith.constant 0 : i32
      %cst = arith.constant -3.40282347E+38 : f32
      %0 = builtin.unrealized_conversion_cast %arg0 : memref<?xf32> to !llvm.ptr
      %1 = llvm.mlir.undef : i32
      %2 = "npu.block_id"() : () -> i64
      %3 = builtin.unrealized_conversion_cast %2 : i64 to index
      %4 = emitc.cast %2 : i64 to i32
      %5 = arith.muli %arg2, %arg4 : i32
      %6 = arith.cmpi slt, %4, %5 : i32
      %7 = arith.divsi %4, %arg4 : i32
      %8 = arith.remsi %4, %arg4 : i32
      %9 = arith.muli %arg3, %arg4 : i32
      %10 = arith.muli %7, %9 : i32
      %11 = arith.addi %10, %8 : i32
      %12 = emitc.cast %arg3 : i32 to index
      scf.for %arg5 = %c0 to %c32 step %c1 {
        %13 = builtin.unrealized_conversion_cast %arg5 : index to i64
        %14 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
        emitc.if %6 {
          %18:2 = scf.for %arg6 = %arg5 to %12 step %c32 iter_args(%arg7 = %c0_i32, %arg8 = %cst) -> (i32, f32) {
            %20 = builtin.unrealized_conversion_cast %arg6 : index to i64
            %21 = emitc.cast %20 : i64 to i32
            %22 = arith.muli %21, %arg4 : i32
            %23 = arith.addi %11, %22 : i32
            %24 = emitc.cast %23 : i32 to index
            %25 = builtin.unrealized_conversion_cast %24 : index to i64
            %26 = llvm.getelementptr %0[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
            %27 = builtin.unrealized_conversion_cast %26 : !llvm.ptr to memref<?xf32>
            %28 = func.call @__nvvm_ldg_f(%27) : (memref<?xf32>) -> f32
            %29 = arith.cmpf ogt, %28, %arg8 : f32
            %30 = arith.select %29, %28, %arg8 : f32
            %31 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
            emitc.if %29 {
              emitc.assign %21 : i32 to %31 : i32
            } else {
              %32 = arith.cmpf oeq, %28, %arg8 : f32
              %33 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
              emitc.if %32 {
                %34 = arith.cmpi slt, %21, %arg7 : i32
                %35 = arith.select %34, %21, %arg7 : i32
                emitc.assign %35 : i32 to %33 : i32
              } else {
                emitc.assign %arg7 : i32 to %33 : i32
              }
              emitc.assign %33 : i32 to %31 : i32
            }
            scf.yield %31, %30 : i32, f32
          }
          %19:3 = scf.while (%arg6 = %c16_i32, %arg7 = %18#0, %arg8 = %18#1) : (i32, i32, f32) -> (i32, i32, f32) {
            %20 = arith.cmpi sgt, %arg6, %c0_i32 : i32
            scf.condition(%20) %arg7, %arg6, %arg8 : i32, i32, f32
          } do {
          ^bb0(%arg6: i32, %arg7: i32, %arg8: f32):
            %20 = func.call @__nvvm_shfl_sync_down_f32(%c-1_i32, %arg8, %arg7, %c31_i32) : (i32, f32, i32, i32) -> f32
            %21 = func.call @__nvvm_shfl_sync_down_i32(%c-1_i32, %arg6, %arg7, %c31_i32) : (i32, i32, i32, i32) -> i32
            %22 = arith.cmpf ogt, %20, %arg8 : f32
            %23 = arith.select %22, %20, %arg8 : f32
            %24 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
            emitc.if %22 {
              emitc.assign %21 : i32 to %24 : i32
            } else {
              %26 = arith.cmpf oeq, %20, %arg8 : f32
              %27 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i32
              emitc.if %26 {
                %28 = arith.cmpi slt, %21, %arg6 : i32
                %29 = arith.select %28, %21, %arg6 : i32
                emitc.assign %29 : i32 to %27 : i32
              } else {
                emitc.assign %arg6 : i32 to %27 : i32
              }
              emitc.assign %27 : i32 to %24 : i32
            }
            %25 = arith.divsi %arg7, %c2_i32 : i32
            scf.yield %25, %24, %23 : i32, i32, f32
          }
          emitc.assign %19#0 : i32 to %14 : i32
        } else {
          emitc.assign %1 : i32 to %14 : i32
        }
        %15 = emitc.cast %13 : i64 to i32
        %16 = arith.cmpi eq, %15, %c0_i32 : i32
        %17 = arith.andi %6, %16 : i1
        emitc.if %17 {
          %18 = emitc.cast %14 : i32 to i64
          memref.store %18, %arg1[%3] : memref<?xi64>
        }
      }
      gpu.return
    }
    func.func private @__nvvm_shfl_sync_down_f32(i32, f32, i32, i32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_shfl_sync_down_i32(i32, i32, i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
    func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

loc("./cuda_ops/51_Argmax_over_a_dimension.cu":12:17): error: ICT_ERROR(): cannot emit MemRef element type: 'memref<?xi64, 1>'
[ict-debug] driver.cc: After emitc::translateToCpp:

