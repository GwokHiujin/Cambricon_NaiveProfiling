warning: CUDA version 12.1 is only partially supported
cleanup of materialized not handledCXXOperatorCallExpr 0x563a6d89cb90 'dim3':'struct dim3' lvalue '='
|-ImplicitCastExpr 0x563a6d89cb78 'dim3 &(*)(dim3 &&) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563a6d89c700 'dim3 &(dim3 &&) noexcept' lvalue CXXMethod 0x563a6d89c4d8 'operator=' 'dim3 &(dim3 &&) noexcept'
|-DeclRefExpr 0x563a6d89c1a0 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
`-MaterializeTemporaryExpr 0x563a6d89c6e8 'dim3':'struct dim3' xvalue
  `-CXXTemporaryObjectExpr 0x563a6d89c260 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
    |-ImplicitCastExpr 0x563a6d89c210 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89c1d0 'int' 8
    |-ImplicitCastExpr 0x563a6d89c228 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89c1f0 'int' 8
    `-CXXDefaultArgExpr 0x563a6d89c240 'unsigned int'
cleanup not handled
cleanup of materialized not handledCXXOperatorCallExpr 0x563a6d89ce60 'dim3':'struct dim3' lvalue '='
|-ImplicitCastExpr 0x563a6d89ce48 'dim3 &(*)(dim3 &&) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563a6d89ce28 'dim3 &(dim3 &&) noexcept' lvalue CXXMethod 0x563a6d89c4d8 'operator=' 'dim3 &(dim3 &&) noexcept'
|-DeclRefExpr 0x563a6d89cd08 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
`-MaterializeTemporaryExpr 0x563a6d89ce10 'dim3':'struct dim3' xvalue
  `-CXXTemporaryObjectExpr 0x563a6d89cdc8 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
    |-ImplicitCastExpr 0x563a6d89cd78 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89cd38 'int' 16
    |-ImplicitCastExpr 0x563a6d89cd90 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89cd58 'int' 8
    `-CXXDefaultArgExpr 0x563a6d89cda8 'unsigned int'
cleanup not handled
cleanup of materialized not handledCXXOperatorCallExpr 0x563a6d89d130 'dim3':'struct dim3' lvalue '='
|-ImplicitCastExpr 0x563a6d89d118 'dim3 &(*)(dim3 &&) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563a6d89d0f8 'dim3 &(dim3 &&) noexcept' lvalue CXXMethod 0x563a6d89c4d8 'operator=' 'dim3 &(dim3 &&) noexcept'
|-DeclRefExpr 0x563a6d89cfd8 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
`-MaterializeTemporaryExpr 0x563a6d89d0e0 'dim3':'struct dim3' xvalue
  `-CXXTemporaryObjectExpr 0x563a6d89d098 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
    |-ImplicitCastExpr 0x563a6d89d048 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89d008 'int' 16
    |-ImplicitCastExpr 0x563a6d89d060 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89d028 'int' 16
    `-CXXDefaultArgExpr 0x563a6d89d078 'unsigned int'
cleanup not handled
cleanup of materialized not handledCXXOperatorCallExpr 0x563a6d89d2f0 'dim3':'struct dim3' lvalue '='
|-ImplicitCastExpr 0x563a6d89d2d8 'dim3 &(*)(dim3 &&) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563a6d89d2b8 'dim3 &(dim3 &&) noexcept' lvalue CXXMethod 0x563a6d89c4d8 'operator=' 'dim3 &(dim3 &&) noexcept'
|-DeclRefExpr 0x563a6d89d198 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
`-MaterializeTemporaryExpr 0x563a6d89d2a0 'dim3':'struct dim3' xvalue
  `-CXXTemporaryObjectExpr 0x563a6d89d258 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
    |-ImplicitCastExpr 0x563a6d89d208 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89d1c8 'int' 32
    |-ImplicitCastExpr 0x563a6d89d220 'unsigned int' <IntegralCast>
    | `-IntegerLiteral 0x563a6d89d1e8 'int' 16
    `-CXXDefaultArgExpr 0x563a6d89d238 'unsigned int'
cleanup not handled
cleanup of materialized not handledCXXOperatorCallExpr 0x563a6d89d908 'dim3':'struct dim3' lvalue '='
|-ImplicitCastExpr 0x563a6d89d8f0 'dim3 &(*)(dim3 &&) noexcept' <FunctionToPointerDecay>
| `-DeclRefExpr 0x563a6d89d8d0 'dim3 &(dim3 &&) noexcept' lvalue CXXMethod 0x563a6d89c4d8 'operator=' 'dim3 &(dim3 &&) noexcept'
|-DeclRefExpr 0x563a6d89d3e8 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bd40 'grid_dim' 'dim3 &'
`-MaterializeTemporaryExpr 0x563a6d89d8b8 'dim3':'struct dim3' xvalue
  `-CXXTemporaryObjectExpr 0x563a6d89d870 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
    |-BinaryOperator 0x563a6d89d5d0 'unsigned int' '/'
    | |-ParenExpr 0x563a6d89d548 'unsigned int'
    | | `-BinaryOperator 0x563a6d89d528 'unsigned int' '-'
    | |   |-BinaryOperator 0x563a6d89d4d0 'unsigned int' '+'
    | |   | |-ImplicitCastExpr 0x563a6d89d4b8 'unsigned int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x563a6d89d488 'int' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x563a6d89d418 'int' lvalue ParmVar 0x563a6d89bbe0 'W_out' 'int'
    | |   | `-ImplicitCastExpr 0x563a6d89d4a0 'unsigned int' <LValueToRValue>
    | |   |   `-MemberExpr 0x563a6d89d458 'unsigned int' lvalue .x 0x563a6cfd8608
    | |   |     `-DeclRefExpr 0x563a6d89d438 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
    | |   `-ImplicitCastExpr 0x563a6d89d510 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x563a6d89d4f0 'int' 1
    | `-ImplicitCastExpr 0x563a6d89d5b8 'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x563a6d89d588 'unsigned int' lvalue .x 0x563a6cfd8608
    |     `-DeclRefExpr 0x563a6d89d568 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
    |-BinaryOperator 0x563a6d89d7a8 'unsigned int' '/'
    | |-ParenExpr 0x563a6d89d720 'unsigned int'
    | | `-BinaryOperator 0x563a6d89d700 'unsigned int' '-'
    | |   |-BinaryOperator 0x563a6d89d6a8 'unsigned int' '+'
    | |   | |-ImplicitCastExpr 0x563a6d89d690 'unsigned int' <IntegralCast>
    | |   | | `-ImplicitCastExpr 0x563a6d89d660 'int' <LValueToRValue>
    | |   | |   `-DeclRefExpr 0x563a6d89d5f0 'int' lvalue ParmVar 0x563a6d89bb60 'H_out' 'int'
    | |   | `-ImplicitCastExpr 0x563a6d89d678 'unsigned int' <LValueToRValue>
    | |   |   `-MemberExpr 0x563a6d89d630 'unsigned int' lvalue .y 0x563a6cfd8670
    | |   |     `-DeclRefExpr 0x563a6d89d610 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
    | |   `-ImplicitCastExpr 0x563a6d89d6e8 'unsigned int' <IntegralCast>
    | |     `-IntegerLiteral 0x563a6d89d6c8 'int' 1
    | `-ImplicitCastExpr 0x563a6d89d790 'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x563a6d89d760 'unsigned int' lvalue .y 0x563a6cfd8670
    |     `-DeclRefExpr 0x563a6d89d740 'dim3':'struct dim3' lvalue ParmVar 0x563a6d89bcc0 'block_dim' 'dim3 &'
    `-ImplicitCastExpr 0x563a6d89d858 'unsigned int' <IntegralCast>
      `-BinaryOperator 0x563a6d89d838 'int' '*'
        |-ImplicitCastExpr 0x563a6d89d808 'int' <LValueToRValue>
        | `-DeclRefExpr 0x563a6d89d7c8 'int' lvalue ParmVar 0x563a6d89bdc0 'N' 'int'
        `-ImplicitCastExpr 0x563a6d89d820 'int' <LValueToRValue>
          `-DeclRefExpr 0x563a6d89d7e8 'int' lvalue ParmVar 0x563a6d89be40 'C_out' 'int'
cleanup not handled
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = affine.load %alloca_16[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      affine.store %15, %alloca_14[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = affine.load %alloca_12[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        affine.store %17, %alloca_10[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = affine.load %alloca_8[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          affine.store %19, %alloca_6[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = affine.load %alloca_4[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          affine.store %19, %alloca_2[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = affine.load %alloca_0[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    affine.store %13, %alloca[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %4 = llvm.getelementptr %3[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %6 = llvm.getelementptr %5[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.load %6 : !llvm.ptr -> i32
    llvm.store %7, %4 : i32, !llvm.ptr
    %8 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %9 = llvm.getelementptr %8[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %10 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %11 = llvm.getelementptr %10[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %12 = llvm.load %11 : !llvm.ptr -> i32
    llvm.store %12, %9 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = affine.load %alloca_16[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      affine.store %15, %alloca_14[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = affine.load %alloca_12[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        affine.store %17, %alloca_10[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = affine.load %alloca_8[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          affine.store %19, %alloca_6[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = affine.load %alloca_4[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          affine.store %19, %alloca_2[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = affine.load %alloca_0[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    affine.store %13, %alloca[0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After convert to NPU: end

[ict-debug] driver.cc: Before convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = scf.if %0 -> (i1) {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      scf.yield %15 : i1
    } else {
      scf.yield %false : i1
    }
    scf.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = scf.if %15 -> (i1) {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        scf.yield %17 : i1
      } else {
        scf.yield %false : i1
      }
      scf.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = scf.if %17 -> (i1) {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          scf.yield %19 : i1
        } else {
          scf.yield %false : i1
        }
        scf.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: Before convert to EmitC dialect: end

[ict-debug] driver.cc: After convert to EmitC dialect:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z24get_optimal_block_configiiR4dim3S0_ii(%arg0: i32, %arg1: i32, %arg2: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg3: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0 = arith.constant 0 : index
    %c-1_i32 = arith.constant -1 : i32
    %c32_i32 = arith.constant 32 : i32
    %c16_i32 = arith.constant 16 : i32
    %c1_i32 = arith.constant 1 : i32
    %false = arith.constant false
    %c8_i32 = arith.constant 8 : i32
    %alloca = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast = memref.cast %alloca : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_0 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_1 = memref.cast %alloca_0 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_2 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_3 = memref.cast %alloca_2 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_4 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_5 = memref.cast %alloca_4 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_6 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_7 = memref.cast %alloca_6 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_8 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_9 = memref.cast %alloca_8 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_10 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_11 = memref.cast %alloca_10 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_12 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_13 = memref.cast %alloca_12 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_14 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_15 = memref.cast %alloca_14 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %alloca_16 = memref.alloca() : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %cast_17 = memref.cast %alloca_16 : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> to memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %0 = arith.cmpi sle, %arg0, %c8_i32 : i32
    %1 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i1
    emitc.if %0 {
      %15 = arith.cmpi sle, %arg1, %c8_i32 : i32
      emitc.assign %15 : i1 to %1 : i1
    } else {
      emitc.assign %false : i1 to %1 : i1
    }
    emitc.if %1 {
      func.call @_ZN4dim3C1Ejjj(%cast_17, %c8_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
      %15 = memref.load %alloca_16[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      memref.store %15, %alloca_14[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      %16 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_15) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    } else {
      %15 = arith.cmpi sle, %arg0, %c16_i32 : i32
      %16 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i1
      emitc.if %15 {
        %17 = arith.cmpi sle, %arg1, %c16_i32 : i32
        emitc.assign %17 : i1 to %16 : i1
      } else {
        emitc.assign %false : i1 to %16 : i1
      }
      emitc.if %16 {
        func.call @_ZN4dim3C1Ejjj(%cast_13, %c16_i32, %c8_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
        %17 = memref.load %alloca_12[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        memref.store %17, %alloca_10[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        %18 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_11) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
      } else {
        %17 = arith.cmpi sle, %arg0, %c32_i32 : i32
        %18 = "emitc.variable"() <{value = #emitc.opaque<"">}> : () -> i1
        emitc.if %17 {
          %19 = arith.cmpi sle, %arg1, %c32_i32 : i32
          emitc.assign %19 : i1 to %18 : i1
        } else {
          emitc.assign %false : i1 to %18 : i1
        }
        emitc.if %18 {
          func.call @_ZN4dim3C1Ejjj(%cast_9, %c16_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_8[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_6[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_7) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        } else {
          func.call @_ZN4dim3C1Ejjj(%cast_5, %c32_i32, %c16_i32, %c1_i32) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
          %19 = memref.load %alloca_4[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          memref.store %19, %alloca_2[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
          %20 = func.call @_ZN4dim3aSEOS_(%arg2, %cast_3) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
        }
      }
    }
    %2 = "polygeist.memref2pointer"(%arg2) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %3 = llvm.load %2 : !llvm.ptr -> i32
    %4 = arith.addi %arg1, %3 : i32
    %5 = arith.addi %4, %c-1_i32 : i32
    %6 = arith.divui %5, %3 : i32
    %7 = llvm.getelementptr %2[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    %9 = arith.addi %arg0, %8 : i32
    %10 = arith.addi %9, %c-1_i32 : i32
    %11 = arith.divui %10, %8 : i32
    %12 = arith.muli %arg4, %arg5 : i32
    call @_ZN4dim3C1Ejjj(%cast_1, %6, %11, %12) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, i32, i32, i32) -> ()
    %13 = memref.load %alloca_0[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    memref.store %13, %alloca[%c0] : memref<1x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    %14 = call @_ZN4dim3aSEOS_(%arg3, %cast) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
    return
  }
  func.func private @_ZN4dim3aSEOS_(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>> attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %1 = "polygeist.memref2pointer"(%arg1) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    %2 = llvm.load %1 : !llvm.ptr -> i32
    llvm.store %2, %0 : i32, !llvm.ptr
    %3 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %4 = llvm.getelementptr %1[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %5 = llvm.load %4 : !llvm.ptr -> i32
    llvm.store %5, %3 : i32, !llvm.ptr
    %6 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %7 = llvm.getelementptr %1[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    %8 = llvm.load %7 : !llvm.ptr -> i32
    llvm.store %8, %6 : i32, !llvm.ptr
    return %arg0 : memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>
  }
  func.func private @_ZN4dim3C1Ejjj(%arg0: memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>, %arg1: i32, %arg2: i32, %arg3: i32) attributes {llvm.linkage = #llvm.linkage<linkonce_odr>} {
    %0 = "polygeist.memref2pointer"(%arg0) : (memref<?x!llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>>) -> !llvm.ptr
    llvm.store %arg1, %0 : i32, !llvm.ptr
    %1 = llvm.getelementptr %0[0, 1] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg2, %1 : i32, !llvm.ptr
    %2 = llvm.getelementptr %0[0, 2] : (!llvm.ptr) -> !llvm.ptr, !llvm.struct<"opaque@polygeist@mlir@struct.dim3", (i32, i32, i32)>
    llvm.store %arg3, %2 : i32, !llvm.ptr
    return
  }
}
[ict-debug] driver.cc: After convert to EmitC dialect: end

error: 'memref.alloca' op unable to find printer for op
[ict-debug] driver.cc: After emitc::translateToCpp:

