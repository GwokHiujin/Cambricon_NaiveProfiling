warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z27__device_stub__MatmulKernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z12MatmulKernelPKfS0_Pfiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z12MatmulKernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c15_i32 = arith.constant 15 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %4, %c16_i32 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg5 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %13, %c16_i32 : i32
    %15 = gpu.thread_id  x
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.addi %14, %16 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.index_cast %17 : i32 to index
    %20 = arith.addi %arg4, %c15_i32 : i32
    %21 = arith.divsi %20, %c16_i32 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = gpu.thread_id  x
    %24 = gpu.thread_id  y
    %25 = gpu.thread_id  y
    %26 = gpu.thread_id  x
    %27 = gpu.thread_id  y
    %28 = gpu.thread_id  x
    %29 = gpu.thread_id  y
    %30 = gpu.thread_id  x
    %31 = arith.muli %8, %arg4 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = affine.for %arg6 = 0 to %22 iter_args(%arg7 = %cst) -> (f32) {
      %37 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (-s0 + s1 - 1 >= 0, d0 * -16 - s2 + s3 - 1 >= 0)>(%arg6)[%9, %0, %23, %1] -> f32 {
        %40 = affine.load %arg0[%arg6 * 16 + symbol(%32) + symbol(%23)] : memref<?xf32>
        affine.yield %40 : f32
      } else {
        affine.yield %cst : f32
      }
      affine.store %37, %alloca_0[symbol(%25), symbol(%26)] : memref<16x16xf32, 5>
      %38 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * -16 - s0 + s1 - 1 >= 0, -s2 + s3 - 1 >= 0)>(%arg6)[%24, %1, %18, %2] -> f32 {
        %40 = affine.load %arg1[(%arg6 * 16 + symbol(%24)) * symbol(%2) + symbol(%18)] : memref<?xf32>
        affine.yield %40 : f32
      } else {
        affine.yield %cst : f32
      }
      affine.store %38, %alloca[symbol(%27), symbol(%28)] : memref<16x16xf32, 5>
      nvvm.barrier0
      %39 = affine.for %arg8 = 0 to 16 iter_args(%arg9 = %arg7) -> (f32) {
        %40 = affine.load %alloca_0[symbol(%29), %arg8] : memref<16x16xf32, 5>
        %41 = affine.load %alloca[%arg8, symbol(%30)] : memref<16x16xf32, 5>
        %42 = arith.mulf %40, %41 : f32
        %43 = arith.addf %arg9, %42 : f32
        affine.yield %43 : f32
      }
      nvvm.barrier0
      affine.yield %39 : f32
    }
    %34 = arith.cmpi slt, %8, %arg3 : i32
    %35 = arith.cmpi slt, %17, %arg5 : i32
    %36 = arith.andi %34, %35 : i1
    scf.if %36 {
      affine.store %33, %arg2[symbol(%11) + symbol(%19)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z12MatmulKernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c15_i32 = arith.constant 15 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %4, %c16_i32 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg5 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %13, %c16_i32 : i32
    %15 = gpu.thread_id  x
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.addi %14, %16 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.addi %arg4, %c15_i32 : i32
    %20 = arith.divsi %19, %c16_i32 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %8, %arg4 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = affine.for %arg6 = 0 to %21 iter_args(%arg7 = %cst) -> (f32) {
      %28 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (s0 - s1 - 1 >= 0, d0 * -16 - s2 + s3 - 1 >= 0)>(%arg6)[%0, %9, %15, %1] -> f32 {
        %31 = affine.load %arg0[%arg6 * 16 + symbol(%23) + symbol(%15)] : memref<?xf32>
        affine.yield %31 : f32
      } else {
        affine.yield %cst : f32
      }
      affine.store %28, %alloca_0[symbol(%6), symbol(%15)] : memref<16x16xf32, 5>
      %29 = affine.if affine_set<(d0)[s0, s1, s2, s3] : (d0 * -16 - s0 + s1 - 1 >= 0, s2 - s3 - 1 >= 0)>(%arg6)[%6, %1, %2, %18] -> f32 {
        %31 = affine.load %arg1[(%arg6 * 16 + symbol(%6)) * symbol(%2) + symbol(%18)] : memref<?xf32>
        affine.yield %31 : f32
      } else {
        affine.yield %cst : f32
      }
      affine.store %29, %alloca[symbol(%6), symbol(%15)] : memref<16x16xf32, 5>
      nvvm.barrier0
      %30 = affine.for %arg8 = 0 to 16 iter_args(%arg9 = %arg7) -> (f32) {
        %31 = affine.load %alloca_0[symbol(%6), %arg8] : memref<16x16xf32, 5>
        %32 = affine.load %alloca[%arg8, symbol(%15)] : memref<16x16xf32, 5>
        %33 = arith.mulf %31, %32 : f32
        %34 = arith.addf %arg9, %33 : f32
        affine.yield %34 : f32
      }
      nvvm.barrier0
      affine.yield %30 : f32
    }
    %25 = arith.cmpi slt, %8, %arg3 : i32
    %26 = arith.cmpi slt, %17, %arg5 : i32
    %27 = arith.andi %25, %26 : i1
    scf.if %27 {
      affine.store %24, %arg2[symbol(%11) + symbol(%18)] : memref<?xf32>
    }
    return
  }
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z12MatmulKernelPKfS0_Pfiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: i32, %arg5: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c16 = arith.constant 16 : index
    %c-16 = arith.constant -16 : index
    %c-1 = arith.constant -1 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c16_i32 = arith.constant 16 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %c15_i32 = arith.constant 15 : i32
    %0 = arith.index_cast %arg3 : i32 to index
    %1 = arith.index_cast %arg4 : i32 to index
    %2 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16x16xf32, 5>
    %alloca_0 = memref.alloca() : memref<16x16xf32, 5>
    %3 = gpu.block_id  y
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.muli %4, %c16_i32 : i32
    %6 = gpu.thread_id  y
    %7 = arith.index_cast %6 : index to i32
    %8 = arith.addi %5, %7 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.muli %8, %arg5 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %13, %c16_i32 : i32
    %15 = gpu.thread_id  x
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.addi %14, %16 : i32
    %18 = arith.index_cast %17 : i32 to index
    %19 = arith.addi %arg4, %c15_i32 : i32
    %20 = arith.divsi %19, %c16_i32 : i32
    %21 = arith.index_cast %20 : i32 to index
    %22 = arith.muli %8, %arg4 : i32
    %23 = arith.index_cast %22 : i32 to index
    %24 = scf.for %arg6 = %c0 to %21 step %c1 iter_args(%arg7 = %cst) -> (f32) {
      %28 = arith.subi %0, %9 : index
      %29 = arith.addi %28, %c-1 : index
      %30 = arith.cmpi sge, %29, %c0 : index
      %31 = arith.muli %arg6, %c-16 : index
      %32 = arith.subi %31, %15 : index
      %33 = arith.addi %32, %1 : index
      %34 = arith.addi %33, %c-1 : index
      %35 = arith.cmpi sge, %34, %c0 : index
      %36 = arith.andi %30, %35 : i1
      %37 = scf.if %36 -> (f32) {
        %48 = arith.muli %arg6, %c16 : index
        %49 = arith.addi %48, %23 : index
        %50 = arith.addi %49, %15 : index
        %51 = memref.load %arg0[%50] : memref<?xf32>
        scf.yield %51 : f32
      } else {
        scf.yield %cst : f32
      }
      memref.store %37, %alloca_0[%6, %15] : memref<16x16xf32, 5>
      %38 = arith.subi %31, %6 : index
      %39 = arith.addi %38, %1 : index
      %40 = arith.addi %39, %c-1 : index
      %41 = arith.cmpi sge, %40, %c0 : index
      %42 = arith.subi %2, %18 : index
      %43 = arith.addi %42, %c-1 : index
      %44 = arith.cmpi sge, %43, %c0 : index
      %45 = arith.andi %41, %44 : i1
      %46 = scf.if %45 -> (f32) {
        %48 = arith.muli %arg6, %c16 : index
        %49 = arith.addi %48, %6 : index
        %50 = arith.muli %49, %2 : index
        %51 = arith.addi %50, %18 : index
        %52 = memref.load %arg1[%51] : memref<?xf32>
        scf.yield %52 : f32
      } else {
        scf.yield %cst : f32
      }
      memref.store %46, %alloca[%6, %15] : memref<16x16xf32, 5>
      nvvm.barrier0
      %47 = scf.for %arg8 = %c0 to %c16 step %c1 iter_args(%arg9 = %arg7) -> (f32) {
        %48 = memref.load %alloca_0[%6, %arg8] : memref<16x16xf32, 5>
        %49 = memref.load %alloca[%arg8, %15] : memref<16x16xf32, 5>
        %50 = arith.mulf %48, %49 : f32
        %51 = arith.addf %arg9, %50 : f32
        scf.yield %51 : f32
      }
      nvvm.barrier0
      scf.yield %47 : f32
    }
    %25 = arith.cmpi slt, %8, %arg3 : i32
    %26 = arith.cmpi slt, %17, %arg5 : i32
    %27 = arith.andi %25, %26 : i1
    scf.if %27 {
      %28 = arith.addi %11, %18 : index
      memref.store %24, %arg2[%28] : memref<?xf32>
    }
    return
  }
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

