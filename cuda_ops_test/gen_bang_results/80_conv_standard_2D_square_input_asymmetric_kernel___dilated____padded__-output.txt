warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __nvvm_ldg_f
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z28__device_stub__conv2d_kernelPKfS0_S0_Pfiiiiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32, %arg15: i32, %arg16: i32, %arg17: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z13conv2d_kernelPKfS0_S0_Pfiiiiiiiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z13conv2d_kernelPKfS0_S0_Pfiiiiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32, %arg15: i32, %arg16: i32, %arg17: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %c3_i32 = arith.constant 3 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c4_i32 = arith.constant 4 : i32
    %0 = arith.index_cast %arg14 : i32 to index
    %1 = arith.index_cast %arg16 : i32 to index
    %2 = arith.index_cast %arg15 : i32 to index
    %3 = arith.index_cast %arg17 : i32 to index
    %4 = arith.index_cast %arg10 : i32 to index
    %5 = arith.muli %arg9, %arg10 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %arg5, %arg9 : i32
    %8 = arith.muli %7, %arg10 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.index_cast %arg8 : i32 to index
    %11 = arith.index_cast %arg12 : i32 to index
    %12 = arith.index_cast %arg11 : i32 to index
    %13 = arith.index_cast %arg5 : i32 to index
    %14 = arith.index_cast %arg9 : i32 to index
    %15 = arith.index_cast %arg10 : i32 to index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %alloca_0 = memref.alloca() : memref<4xf32>
    %16 = gpu.thread_id  x
    %17 = arith.index_cast %16 : index to i32
    %18 = gpu.thread_id  y
    %19 = arith.index_cast %18 : index to i32
    %20 = gpu.block_id  x
    %21 = arith.index_cast %20 : index to i32
    %22 = gpu.block_id  y
    %23 = arith.index_cast %22 : index to i32
    %24 = gpu.block_id  z
    %25 = arith.index_cast %24 : index to i32
    %26 = gpu.block_dim  x
    %27 = arith.index_cast %26 : index to i32
    %28 = gpu.block_dim  y
    %29 = arith.index_cast %28 : index to i32
    %30 = arith.muli %23, %29 : i32
    %31 = arith.addi %30, %19 : i32
    %32 = arith.muli %31, %arg13 : i32
    %33 = arith.index_cast %32 : i32 to index
    %34 = arith.muli %31, %arg12 : i32
    %35 = arith.index_cast %34 : i32 to index
    %36 = arith.muli %21, %27 : i32
    %37 = arith.addi %36, %17 : i32
    %38 = arith.muli %37, %arg13 : i32
    %39 = arith.index_cast %38 : i32 to index
    %40 = arith.index_cast %37 : i32 to index
    %41 = arith.addi %arg8, %c3_i32 : i32
    %42 = arith.divsi %41, %c4_i32 : i32
    %43 = arith.divsi %25, %42 : i32
    %44 = arith.muli %43, %arg8 : i32
    %45 = arith.muli %44, %arg11 : i32
    %46 = arith.muli %45, %arg12 : i32
    %47 = arith.index_cast %46 : i32 to index
    %48 = arith.remsi %25, %42 : i32
    %49 = arith.index_cast %48 : i32 to index
    %50 = arith.index_cast %48 : i32 to index
    %51 = arith.index_cast %48 : i32 to index
    %52 = arith.index_cast %48 : i32 to index
    %53 = arith.muli %48, %c4_i32 : i32
    %54 = arith.cmpi sge, %31, %arg11 : i32
    %55 = scf.if %54 -> (i1) {
      scf.yield %true : i1
    } else {
      %58 = arith.cmpi sge, %37, %arg12 : i32
      scf.yield %58 : i1
    }
    %56 = scf.if %55 -> (i1) {
      scf.yield %true : i1
    } else {
      %58 = arith.cmpi sge, %43, %arg4 : i32
      scf.yield %58 : i1
    }
    %57 = arith.xori %56, %true : i1
    scf.if %57 {
      affine.store %cst, %alloca_0[0] : memref<4xf32>
      affine.store %cst, %alloca_0[1] : memref<4xf32>
      affine.store %cst, %alloca_0[2] : memref<4xf32>
      affine.store %cst, %alloca_0[3] : memref<4xf32>
      %58 = llvm.mlir.zero : !llvm.ptr
      %59 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %60 = llvm.icmp "ne" %59, %58 : !llvm.ptr
      affine.for %arg18 = 0 to 4 {
        affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 * 4 + s1 - 1 >= 0)>(%arg18)[%49, %10] {
          %79 = scf.if %60 -> (f32) {
            %80 = affine.load %arg2[%arg18 + symbol(%50) * 4] : memref<?xf32>
            scf.yield %80 : f32
          } else {
            scf.yield %cst : f32
          }
          affine.store %79, %alloca_0[%arg18] : memref<4xf32>
        }
      }
      %61 = arith.muli %arg5, %c4_i32 : i32
      %62 = arith.muli %61, %arg9 : i32
      %63 = arith.muli %62, %arg10 : i32
      %64 = arith.muli %19, %27 : i32
      %65 = arith.addi %64, %17 : i32
      %66 = arith.muli %27, %29 : i32
      %67 = arith.index_cast %63 : i32 to index
      %68 = arith.index_cast %65 : i32 to index
      %69 = arith.index_cast %66 : i32 to index
      %70 = arith.index_cast %66 : i32 to index
      %71 = arith.index_cast %65 : i32 to index
      %72 = arith.muli %arg5, %arg9 : i32
      %73 = arith.muli %72, %arg10 : i32
      %74 = arith.muli %arg5, %arg9 : i32
      %75 = arith.muli %74, %arg10 : i32
      scf.for %arg18 = %68 to %67 step %69 {
        %79 = arith.subi %arg18, %68 : index
        %80 = arith.divui %79, %69 : index
        %81 = arith.muli %80, %70 : index
        %82 = arith.addi %71, %81 : index
        %83 = arith.index_cast %82 : index to i32
        %84 = arith.divsi %83, %73 : i32
        %85 = arith.remsi %83, %75 : i32
        %86 = arith.addi %53, %84 : i32
        %87 = arith.cmpi slt, %86, %arg8 : i32
        %88 = scf.if %87 -> (f32) {
          %89 = arith.muli %86, %arg5 : i32
          %90 = arith.muli %89, %arg9 : i32
          %91 = arith.muli %90, %arg10 : i32
          %92 = arith.addi %91, %85 : i32
          %93 = arith.index_cast %92 : i32 to index
          %94 = memref.load %arg1[%93] : memref<?xf32>
          scf.yield %94 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %88, %alloca[%82] : memref<1xf32, 5>
      }
      nvvm.barrier0
      %76 = arith.muli %43, %arg5 : i32
      %77 = arith.muli %76, %arg6 : i32
      %78 = arith.muli %77, %arg7 : i32
      affine.for %arg18 = 0 to %13 {
        %79 = arith.index_cast %arg18 : index to i32
        %80 = arith.muli %79, %arg6 : i32
        %81 = arith.muli %80, %arg7 : i32
        %82 = arith.addi %78, %81 : i32
        affine.for %arg19 = 0 to %14 {
          %83 = arith.index_cast %arg19 : index to i32
          %84 = arith.muli %83, %arg16 : i32
          %85 = arith.addi %32, %84 : i32
          %86 = arith.subi %85, %arg14 : i32
          %87 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 * s1 + s0 - s2 >= 0)>(%arg19)[%33, %1, %0] -> i1 {
            %90 = arith.cmpi slt, %86, %arg6 : i32
            affine.yield %90 : i1
          } else {
            affine.yield %false : i1
          }
          %88 = arith.muli %86, %arg7 : i32
          %89 = arith.addi %82, %88 : i32
          affine.for %arg20 = 0 to %15 {
            %90 = arith.index_cast %arg20 : index to i32
            %91 = arith.muli %90, %arg17 : i32
            %92 = arith.addi %38, %91 : i32
            %93 = arith.subi %92, %arg15 : i32
            %94 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 * s1 + s0 - s2 >= 0)>(%arg20)[%39, %3, %2] -> i1 {
              %97 = arith.cmpi slt, %93, %arg7 : i32
              affine.yield %97 : i1
            } else {
              affine.yield %false : i1
            }
            %95 = arith.andi %87, %94 : i1
            %96 = scf.if %95 -> (f32) {
              %97 = arith.addi %89, %93 : i32
              %98 = arith.index_cast %97 : i32 to index
              %99 = "polygeist.subindex"(%arg0, %98) : (memref<?xf32>, index) -> memref<?xf32>
              %100 = func.call @_Z5__ldgPKf(%99) : (memref<?xf32>) -> f32
              scf.yield %100 : f32
            } else {
              scf.yield %cst : f32
            }
            affine.for %arg21 = 0 to 4 {
              %97 = affine.load %alloca[%arg20 + %arg19 * symbol(%4) + %arg21 * symbol(%9) + %arg18 * symbol(%6)] : memref<1xf32, 5>
              %98 = arith.mulf %96, %97 : f32
              %99 = affine.load %alloca_0[%arg21] : memref<4xf32>
              %100 = arith.addf %99, %98 : f32
              affine.store %100, %alloca_0[%arg21] : memref<4xf32>
            }
          }
        }
      }
      affine.for %arg18 = 0 to 4 {
        affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 * 4 + s1 - 1 >= 0)>(%arg18)[%51, %10] {
          %79 = affine.load %alloca_0[%arg18] : memref<4xf32>
          affine.store %79, %arg3[((%arg18 + symbol(%52) * 4) * symbol(%12)) * symbol(%11) + symbol(%47) + symbol(%35) + symbol(%40)] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @_Z5__ldgPKf(%arg0: memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = call @__nvvm_ldg_f(%arg0) : (memref<?xf32>) -> f32
    return %0 : f32
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13conv2d_kernelPKfS0_S0_Pfiiiiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32, %arg15: i32, %arg16: i32, %arg17: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %true = arith.constant true
    %c3_i32 = arith.constant 3 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c4_i32 = arith.constant 4 : i32
    %0 = arith.index_cast %arg14 : i32 to index
    %1 = arith.index_cast %arg16 : i32 to index
    %2 = arith.index_cast %arg15 : i32 to index
    %3 = arith.index_cast %arg17 : i32 to index
    %4 = arith.index_cast %arg10 : i32 to index
    %5 = arith.muli %arg9, %arg10 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %arg5, %arg9 : i32
    %8 = arith.muli %7, %arg10 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.index_cast %arg8 : i32 to index
    %11 = arith.index_cast %arg12 : i32 to index
    %12 = arith.index_cast %arg11 : i32 to index
    %13 = arith.index_cast %arg5 : i32 to index
    %14 = arith.index_cast %arg9 : i32 to index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %alloca_0 = memref.alloca() : memref<4xf32>
    %15 = gpu.thread_id  x
    %16 = arith.index_cast %15 : index to i32
    %17 = gpu.thread_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = gpu.block_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = gpu.block_id  y
    %22 = arith.index_cast %21 : index to i32
    %23 = gpu.block_id  z
    %24 = arith.index_cast %23 : index to i32
    %25 = gpu.block_dim  x
    %26 = arith.index_cast %25 : index to i32
    %27 = gpu.block_dim  y
    %28 = arith.index_cast %27 : index to i32
    %29 = arith.muli %22, %28 : i32
    %30 = arith.addi %29, %18 : i32
    %31 = arith.muli %30, %arg13 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.muli %30, %arg12 : i32
    %34 = arith.index_cast %33 : i32 to index
    %35 = arith.muli %20, %26 : i32
    %36 = arith.addi %35, %16 : i32
    %37 = arith.muli %36, %arg13 : i32
    %38 = arith.index_cast %37 : i32 to index
    %39 = arith.index_cast %36 : i32 to index
    %40 = arith.addi %arg8, %c3_i32 : i32
    %41 = arith.divsi %40, %c4_i32 : i32
    %42 = arith.divsi %24, %41 : i32
    %43 = arith.muli %42, %arg8 : i32
    %44 = arith.muli %43, %arg11 : i32
    %45 = arith.muli %44, %arg12 : i32
    %46 = arith.index_cast %45 : i32 to index
    %47 = arith.remsi %24, %41 : i32
    %48 = arith.index_cast %47 : i32 to index
    %49 = arith.muli %47, %c4_i32 : i32
    %50 = arith.cmpi sge, %30, %arg11 : i32
    %51 = scf.if %50 -> (i1) {
      scf.yield %true : i1
    } else {
      %54 = arith.cmpi sge, %36, %arg12 : i32
      scf.yield %54 : i1
    }
    %52 = scf.if %51 -> (i1) {
      scf.yield %true : i1
    } else {
      %54 = arith.cmpi sge, %42, %arg4 : i32
      scf.yield %54 : i1
    }
    %53 = arith.xori %52, %true : i1
    scf.if %53 {
      affine.store %cst, %alloca_0[0] : memref<4xf32>
      affine.store %cst, %alloca_0[1] : memref<4xf32>
      affine.store %cst, %alloca_0[2] : memref<4xf32>
      affine.store %cst, %alloca_0[3] : memref<4xf32>
      %54 = llvm.mlir.zero : !llvm.ptr
      %55 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %56 = llvm.icmp "ne" %55, %54 : !llvm.ptr
      affine.for %arg18 = 0 to 4 {
        affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 * 4 + s1 - 1 >= 0)>(%arg18)[%48, %10] {
          %69 = scf.if %56 -> (f32) {
            %70 = affine.load %arg2[%arg18 + symbol(%48) * 4] : memref<?xf32>
            scf.yield %70 : f32
          } else {
            scf.yield %cst : f32
          }
          affine.store %69, %alloca_0[%arg18] : memref<4xf32>
        }
      }
      %57 = arith.muli %arg5, %c4_i32 : i32
      %58 = arith.muli %57, %arg9 : i32
      %59 = arith.muli %58, %arg10 : i32
      %60 = arith.muli %18, %26 : i32
      %61 = arith.addi %60, %16 : i32
      %62 = arith.muli %26, %28 : i32
      %63 = arith.index_cast %59 : i32 to index
      %64 = arith.index_cast %61 : i32 to index
      %65 = arith.index_cast %62 : i32 to index
      scf.for %arg18 = %64 to %63 step %65 {
        %69 = arith.subi %arg18, %64 : index
        %70 = arith.divui %69, %65 : index
        %71 = arith.muli %70, %65 : index
        %72 = arith.addi %64, %71 : index
        %73 = arith.index_cast %72 : index to i32
        %74 = arith.divsi %73, %8 : i32
        %75 = arith.remsi %73, %8 : i32
        %76 = arith.addi %49, %74 : i32
        %77 = arith.cmpi slt, %76, %arg8 : i32
        %78 = scf.if %77 -> (f32) {
          %79 = arith.muli %76, %arg5 : i32
          %80 = arith.muli %79, %arg9 : i32
          %81 = arith.muli %80, %arg10 : i32
          %82 = arith.addi %81, %75 : i32
          %83 = arith.index_cast %82 : i32 to index
          %84 = memref.load %arg1[%83] : memref<?xf32>
          scf.yield %84 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %78, %alloca[%72] : memref<1xf32, 5>
      }
      nvvm.barrier0
      %66 = arith.muli %42, %arg5 : i32
      %67 = arith.muli %66, %arg6 : i32
      %68 = arith.muli %67, %arg7 : i32
      affine.for %arg18 = 0 to %13 {
        %69 = arith.index_cast %arg18 : index to i32
        %70 = arith.muli %69, %arg6 : i32
        %71 = arith.muli %70, %arg7 : i32
        %72 = arith.addi %68, %71 : i32
        affine.for %arg19 = 0 to %14 {
          %73 = arith.index_cast %arg19 : index to i32
          %74 = arith.muli %73, %arg16 : i32
          %75 = arith.addi %31, %74 : i32
          %76 = arith.subi %75, %arg14 : i32
          %77 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 * s0 + s1 - s2 >= 0)>(%arg19)[%1, %32, %0] -> i1 {
            %80 = arith.cmpi slt, %76, %arg6 : i32
            affine.yield %80 : i1
          } else {
            affine.yield %false : i1
          }
          %78 = arith.muli %76, %arg7 : i32
          %79 = arith.addi %72, %78 : i32
          affine.for %arg20 = 0 to %4 {
            %80 = arith.index_cast %arg20 : index to i32
            %81 = arith.muli %80, %arg17 : i32
            %82 = arith.addi %37, %81 : i32
            %83 = arith.subi %82, %arg15 : i32
            %84 = affine.if affine_set<(d0)[s0, s1, s2] : (d0 * s0 + s1 - s2 >= 0)>(%arg20)[%3, %38, %2] -> i1 {
              %87 = arith.cmpi slt, %83, %arg7 : i32
              affine.yield %87 : i1
            } else {
              affine.yield %false : i1
            }
            %85 = arith.andi %77, %84 : i1
            %86 = scf.if %85 -> (f32) {
              %87 = arith.addi %79, %83 : i32
              %88 = arith.index_cast %87 : i32 to index
              %89 = "polygeist.subindex"(%arg0, %88) : (memref<?xf32>, index) -> memref<?xf32>
              %90 = func.call @__nvvm_ldg_f(%89) : (memref<?xf32>) -> f32
              scf.yield %90 : f32
            } else {
              scf.yield %cst : f32
            }
            affine.for %arg21 = 0 to 4 {
              %87 = affine.load %alloca[%arg18 * symbol(%6) + %arg20 + %arg21 * symbol(%9) + %arg19 * symbol(%4)] : memref<1xf32, 5>
              %88 = arith.mulf %86, %87 : f32
              %89 = affine.load %alloca_0[%arg21] : memref<4xf32>
              %90 = arith.addf %89, %88 : f32
              affine.store %90, %alloca_0[%arg21] : memref<4xf32>
            }
          }
        }
      }
      affine.for %arg18 = 0 to 4 {
        affine.if affine_set<(d0)[s0, s1] : (-d0 - s0 * 4 + s1 - 1 >= 0)>(%arg18)[%48, %10] {
          %69 = affine.load %alloca_0[%arg18] : memref<4xf32>
          affine.store %69, %arg3[((%arg18 + symbol(%48) * 4) * symbol(%12)) * symbol(%11) + symbol(%46) + symbol(%34) + symbol(%39)] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z13conv2d_kernelPKfS0_S0_Pfiiiiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32, %arg15: i32, %arg16: i32, %arg17: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-4 = arith.constant -4 : index
    %c-1 = arith.constant -1 : index
    %c4 = arith.constant 4 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %true = arith.constant true
    %c3_i32 = arith.constant 3 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %false = arith.constant false
    %c4_i32 = arith.constant 4 : i32
    %0 = arith.index_cast %arg14 : i32 to index
    %1 = arith.index_cast %arg16 : i32 to index
    %2 = arith.index_cast %arg15 : i32 to index
    %3 = arith.index_cast %arg17 : i32 to index
    %4 = arith.index_cast %arg10 : i32 to index
    %5 = arith.muli %arg9, %arg10 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = arith.muli %arg5, %arg9 : i32
    %8 = arith.muli %7, %arg10 : i32
    %9 = arith.index_cast %8 : i32 to index
    %10 = arith.index_cast %arg8 : i32 to index
    %11 = arith.index_cast %arg12 : i32 to index
    %12 = arith.index_cast %arg11 : i32 to index
    %13 = arith.index_cast %arg5 : i32 to index
    %14 = arith.index_cast %arg9 : i32 to index
    %alloca = memref.alloca() : memref<1xf32, 5>
    %alloca_0 = memref.alloca() : memref<4xf32>
    %15 = gpu.thread_id  x
    %16 = arith.index_cast %15 : index to i32
    %17 = gpu.thread_id  y
    %18 = arith.index_cast %17 : index to i32
    %19 = gpu.block_id  x
    %20 = arith.index_cast %19 : index to i32
    %21 = gpu.block_id  y
    %22 = arith.index_cast %21 : index to i32
    %23 = gpu.block_id  z
    %24 = arith.index_cast %23 : index to i32
    %25 = gpu.block_dim  x
    %26 = arith.index_cast %25 : index to i32
    %27 = gpu.block_dim  y
    %28 = arith.index_cast %27 : index to i32
    %29 = arith.muli %22, %28 : i32
    %30 = arith.addi %29, %18 : i32
    %31 = arith.muli %30, %arg13 : i32
    %32 = arith.index_cast %31 : i32 to index
    %33 = arith.muli %30, %arg12 : i32
    %34 = arith.index_cast %33 : i32 to index
    %35 = arith.muli %20, %26 : i32
    %36 = arith.addi %35, %16 : i32
    %37 = arith.muli %36, %arg13 : i32
    %38 = arith.index_cast %37 : i32 to index
    %39 = arith.index_cast %36 : i32 to index
    %40 = arith.addi %arg8, %c3_i32 : i32
    %41 = arith.divsi %40, %c4_i32 : i32
    %42 = arith.divsi %24, %41 : i32
    %43 = arith.muli %42, %arg8 : i32
    %44 = arith.muli %43, %arg11 : i32
    %45 = arith.muli %44, %arg12 : i32
    %46 = arith.index_cast %45 : i32 to index
    %47 = arith.remsi %24, %41 : i32
    %48 = arith.index_cast %47 : i32 to index
    %49 = arith.muli %47, %c4_i32 : i32
    %50 = arith.cmpi sge, %30, %arg11 : i32
    %51 = scf.if %50 -> (i1) {
      scf.yield %true : i1
    } else {
      %54 = arith.cmpi sge, %36, %arg12 : i32
      scf.yield %54 : i1
    }
    %52 = scf.if %51 -> (i1) {
      scf.yield %true : i1
    } else {
      %54 = arith.cmpi sge, %42, %arg4 : i32
      scf.yield %54 : i1
    }
    %53 = arith.xori %52, %true : i1
    scf.if %53 {
      memref.store %cst, %alloca_0[%c0] : memref<4xf32>
      memref.store %cst, %alloca_0[%c1] : memref<4xf32>
      memref.store %cst, %alloca_0[%c2] : memref<4xf32>
      memref.store %cst, %alloca_0[%c3] : memref<4xf32>
      %54 = llvm.mlir.zero : !llvm.ptr
      %55 = "polygeist.memref2pointer"(%arg2) : (memref<?xf32>) -> !llvm.ptr
      %56 = llvm.icmp "ne" %55, %54 : !llvm.ptr
      scf.for %arg18 = %c0 to %c4 step %c1 {
        %69 = arith.muli %48, %c-4 : index
        %70 = arith.subi %69, %arg18 : index
        %71 = arith.addi %70, %10 : index
        %72 = arith.addi %71, %c-1 : index
        %73 = arith.cmpi sge, %72, %c0 : index
        scf.if %73 {
          %74 = scf.if %56 -> (f32) {
            %75 = arith.muli %48, %c4 : index
            %76 = arith.addi %arg18, %75 : index
            %77 = memref.load %arg2[%76] : memref<?xf32>
            scf.yield %77 : f32
          } else {
            scf.yield %cst : f32
          }
          memref.store %74, %alloca_0[%arg18] : memref<4xf32>
        }
      }
      %57 = arith.muli %arg5, %c4_i32 : i32
      %58 = arith.muli %57, %arg9 : i32
      %59 = arith.muli %58, %arg10 : i32
      %60 = arith.muli %18, %26 : i32
      %61 = arith.addi %60, %16 : i32
      %62 = arith.muli %26, %28 : i32
      %63 = arith.index_cast %59 : i32 to index
      %64 = arith.index_cast %61 : i32 to index
      %65 = arith.index_cast %62 : i32 to index
      scf.for %arg18 = %64 to %63 step %65 {
        %69 = arith.subi %arg18, %64 : index
        %70 = arith.divui %69, %65 : index
        %71 = arith.muli %70, %65 : index
        %72 = arith.addi %64, %71 : index
        %73 = arith.index_cast %72 : index to i32
        %74 = arith.divsi %73, %8 : i32
        %75 = arith.remsi %73, %8 : i32
        %76 = arith.addi %49, %74 : i32
        %77 = arith.cmpi slt, %76, %arg8 : i32
        %78 = scf.if %77 -> (f32) {
          %79 = arith.muli %76, %arg5 : i32
          %80 = arith.muli %79, %arg9 : i32
          %81 = arith.muli %80, %arg10 : i32
          %82 = arith.addi %81, %75 : i32
          %83 = arith.index_cast %82 : i32 to index
          %84 = memref.load %arg1[%83] : memref<?xf32>
          scf.yield %84 : f32
        } else {
          scf.yield %cst : f32
        }
        memref.store %78, %alloca[%72] : memref<1xf32, 5>
      }
      nvvm.barrier0
      %66 = arith.muli %42, %arg5 : i32
      %67 = arith.muli %66, %arg6 : i32
      %68 = arith.muli %67, %arg7 : i32
      scf.for %arg18 = %c0 to %13 step %c1 {
        %69 = arith.index_cast %arg18 : index to i32
        %70 = arith.muli %69, %arg6 : i32
        %71 = arith.muli %70, %arg7 : i32
        %72 = arith.addi %68, %71 : i32
        scf.for %arg19 = %c0 to %14 step %c1 {
          %73 = arith.index_cast %arg19 : index to i32
          %74 = arith.muli %73, %arg16 : i32
          %75 = arith.addi %31, %74 : i32
          %76 = arith.subi %75, %arg14 : i32
          %77 = arith.muli %arg19, %1 : index
          %78 = arith.addi %77, %32 : index
          %79 = arith.subi %78, %0 : index
          %80 = arith.cmpi sge, %79, %c0 : index
          %81 = scf.if %80 -> (i1) {
            %84 = arith.cmpi slt, %76, %arg6 : i32
            scf.yield %84 : i1
          } else {
            scf.yield %false : i1
          }
          %82 = arith.muli %76, %arg7 : i32
          %83 = arith.addi %72, %82 : i32
          scf.for %arg20 = %c0 to %4 step %c1 {
            %84 = arith.index_cast %arg20 : index to i32
            %85 = arith.muli %84, %arg17 : i32
            %86 = arith.addi %37, %85 : i32
            %87 = arith.subi %86, %arg15 : i32
            %88 = arith.muli %arg20, %3 : index
            %89 = arith.addi %88, %38 : index
            %90 = arith.subi %89, %2 : index
            %91 = arith.cmpi sge, %90, %c0 : index
            %92 = scf.if %91 -> (i1) {
              %95 = arith.cmpi slt, %87, %arg7 : i32
              scf.yield %95 : i1
            } else {
              scf.yield %false : i1
            }
            %93 = arith.andi %81, %92 : i1
            %94 = scf.if %93 -> (f32) {
              %95 = arith.addi %83, %87 : i32
              %96 = arith.index_cast %95 : i32 to index
              %97 = "polygeist.subindex"(%arg0, %96) : (memref<?xf32>, index) -> memref<?xf32>
              %98 = func.call @__nvvm_ldg_f(%97) : (memref<?xf32>) -> f32
              scf.yield %98 : f32
            } else {
              scf.yield %cst : f32
            }
            scf.for %arg21 = %c0 to %c4 step %c1 {
              %95 = arith.muli %arg18, %6 : index
              %96 = arith.addi %95, %arg20 : index
              %97 = arith.muli %arg21, %9 : index
              %98 = arith.addi %96, %97 : index
              %99 = arith.muli %arg19, %4 : index
              %100 = arith.addi %98, %99 : index
              %101 = memref.load %alloca[%100] : memref<1xf32, 5>
              %102 = arith.mulf %94, %101 : f32
              %103 = memref.load %alloca_0[%arg21] : memref<4xf32>
              %104 = arith.addf %103, %102 : f32
              memref.store %104, %alloca_0[%arg21] : memref<4xf32>
            }
          }
        }
      }
      scf.for %arg18 = %c0 to %c4 step %c1 {
        %69 = arith.muli %48, %c-4 : index
        %70 = arith.subi %69, %arg18 : index
        %71 = arith.addi %70, %10 : index
        %72 = arith.addi %71, %c-1 : index
        %73 = arith.cmpi sge, %72, %c0 : index
        scf.if %73 {
          %74 = memref.load %alloca_0[%arg18] : memref<4xf32>
          %75 = arith.muli %48, %c4 : index
          %76 = arith.addi %arg18, %75 : index
          %77 = arith.muli %76, %12 : index
          %78 = arith.muli %77, %11 : index
          %79 = arith.addi %46, %34 : index
          %80 = arith.addi %79, %39 : index
          %81 = arith.addi %78, %80 : index
          memref.store %74, %arg3[%81] : memref<?xf32>
        }
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

