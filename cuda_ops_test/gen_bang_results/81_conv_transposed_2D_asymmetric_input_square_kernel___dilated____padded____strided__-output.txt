warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
warning: we failed to emit call to builtin function __nvvm_ldg_f
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z63__device_stub__conv_transpose2d_forward_kernel_thread_block_mapPKfS0_S0_Pfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z48conv_transpose2d_forward_kernel_thread_block_mapPKfS0_S0_Pfiiiiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z48conv_transpose2d_forward_kernel_thread_block_mapPKfS0_S0_Pfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg11 : i32 to index
    %1 = arith.index_cast %arg10 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %3 = arith.index_cast %arg9 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16xi32>
    %alloca_0 = memref.alloca() : memref<16xi32>
    %alloca_1 = memref.alloca() : memref<16xi32>
    %alloca_2 = memref.alloca() : memref<16xi32>
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.addi %9, %11 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  y
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  y
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = gpu.block_id  z
    %24 = arith.index_cast %23 : index to i32
    %25 = arith.muli %24, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.cmpi sge, %21, %arg10 : i32
    %28 = scf.if %27 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %12, %arg11 : i32
      scf.yield %31 : i1
    }
    %29 = scf.if %28 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %24, %arg4 : i32
      scf.yield %31 : i1
    }
    %30 = arith.xori %29, %true : i1
    scf.if %30 {
      %31 = arith.addi %21, %arg13 : i32
      %32 = arith.addi %12, %arg13 : i32
      %33 = arith.muli %24, %arg5 : i32
      affine.for %arg15 = 0 to %2 {
        %34 = arith.index_cast %arg15 : index to i32
        %35 = affine.for %arg16 = 0 to %3 iter_args(%arg17 = %c0_i32) -> (i32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.muli %42, %arg14 : i32
          %44 = arith.cmpi sge, %31, %43 : i32
          %45 = arith.subi %31, %43 : i32
          %46 = arith.remsi %45, %arg12 : i32
          %47 = arith.cmpi eq, %46, %c0_i32 : i32
          %48 = arith.divsi %45, %arg12 : i32
          %49 = arith.cmpi slt, %48, %arg7 : i32
          %50 = arith.andi %47, %49 : i1
          %51 = arith.andi %44, %50 : i1
          %52 = scf.if %51 -> (i32) {
            %53 = arith.index_cast %arg17 : i32 to index
            memref.store %42, %alloca_2[%53] : memref<16xi32>
            %54 = arith.index_cast %arg17 : i32 to index
            memref.store %48, %alloca_1[%54] : memref<16xi32>
            %55 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %55 : i32
          } else {
            scf.yield %arg17 : i32
          }
          affine.yield %52 : i32
        }
        %36 = affine.for %arg16 = 0 to %3 iter_args(%arg17 = %c0_i32) -> (i32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.muli %42, %arg14 : i32
          %44 = arith.cmpi sge, %32, %43 : i32
          %45 = arith.subi %32, %43 : i32
          %46 = arith.remsi %45, %arg12 : i32
          %47 = arith.cmpi eq, %46, %c0_i32 : i32
          %48 = arith.divsi %45, %arg12 : i32
          %49 = arith.cmpi slt, %48, %arg8 : i32
          %50 = arith.andi %47, %49 : i1
          %51 = arith.andi %44, %50 : i1
          %52 = scf.if %51 -> (i32) {
            %53 = arith.index_cast %arg17 : i32 to index
            memref.store %42, %alloca_0[%53] : memref<16xi32>
            %54 = arith.index_cast %arg17 : i32 to index
            memref.store %48, %alloca[%54] : memref<16xi32>
            %55 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %55 : i32
          } else {
            scf.yield %arg17 : i32
          }
          affine.yield %52 : i32
        }
        %37 = "polygeist.subindex"(%arg2, %arg15) : (memref<?xf32>, index) -> memref<?xf32>
        %38 = func.call @_Z5__ldgPKf(%37) : (memref<?xf32>) -> f32
        %39 = arith.index_cast %35 : i32 to index
        %40 = arith.index_cast %36 : i32 to index
        %41 = affine.for %arg16 = 0 to %4 iter_args(%arg17 = %38) -> (f32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.addi %33, %42 : i32
          %44 = arith.muli %43, %arg7 : i32
          %45 = arith.muli %42, %arg6 : i32
          %46 = arith.addi %45, %34 : i32
          %47 = arith.muli %46, %arg9 : i32
          %48 = scf.for %arg18 = %c0 to %39 step %c1 iter_args(%arg19 = %arg17) -> (f32) {
            %49 = memref.load %alloca_2[%arg18] : memref<16xi32>
            %50 = memref.load %alloca_1[%arg18] : memref<16xi32>
            %51 = arith.addi %44, %50 : i32
            %52 = arith.muli %51, %arg8 : i32
            %53 = arith.addi %47, %49 : i32
            %54 = arith.muli %53, %arg9 : i32
            %55 = scf.for %arg20 = %c0 to %40 step %c1 iter_args(%arg21 = %arg19) -> (f32) {
              %56 = memref.load %alloca_0[%arg20] : memref<16xi32>
              %57 = memref.load %alloca[%arg20] : memref<16xi32>
              %58 = arith.addi %52, %57 : i32
              %59 = arith.addi %54, %56 : i32
              %60 = arith.index_cast %58 : i32 to index
              %61 = "polygeist.subindex"(%arg0, %60) : (memref<?xf32>, index) -> memref<?xf32>
              %62 = func.call @_Z5__ldgPKf(%61) : (memref<?xf32>) -> f32
              %63 = arith.index_cast %59 : i32 to index
              %64 = "polygeist.subindex"(%arg1, %63) : (memref<?xf32>, index) -> memref<?xf32>
              %65 = func.call @_Z5__ldgPKf(%64) : (memref<?xf32>) -> f32
              %66 = arith.mulf %62, %65 : f32
              %67 = arith.addf %arg21, %66 : f32
              scf.yield %67 : f32
            }
            scf.yield %55 : f32
          }
          affine.yield %48 : f32
        }
        affine.store %41, %arg3[((%arg15 + symbol(%26)) * symbol(%1) + symbol(%22)) * symbol(%0) + symbol(%13)] : memref<?xf32>
      }
    }
    return
  }
  func.func private @_Z5__ldgPKf(%arg0: memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %0 = call @__nvvm_ldg_f(%arg0) : (memref<?xf32>) -> f32
    return %0 : f32
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z48conv_transpose2d_forward_kernel_thread_block_mapPKfS0_S0_Pfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg11 : i32 to index
    %1 = arith.index_cast %arg10 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %3 = arith.index_cast %arg9 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16xi32>
    %alloca_0 = memref.alloca() : memref<16xi32>
    %alloca_1 = memref.alloca() : memref<16xi32>
    %alloca_2 = memref.alloca() : memref<16xi32>
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.addi %9, %11 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  y
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  y
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = gpu.block_id  z
    %24 = arith.index_cast %23 : index to i32
    %25 = arith.muli %24, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.cmpi sge, %21, %arg10 : i32
    %28 = scf.if %27 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %12, %arg11 : i32
      scf.yield %31 : i1
    }
    %29 = scf.if %28 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %24, %arg4 : i32
      scf.yield %31 : i1
    }
    %30 = arith.xori %29, %true : i1
    scf.if %30 {
      %31 = arith.addi %21, %arg13 : i32
      %32 = arith.addi %12, %arg13 : i32
      %33 = arith.muli %24, %arg5 : i32
      affine.for %arg15 = 0 to %2 {
        %34 = arith.index_cast %arg15 : index to i32
        %35 = affine.for %arg16 = 0 to %3 iter_args(%arg17 = %c0_i32) -> (i32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.muli %42, %arg14 : i32
          %44 = arith.cmpi sge, %31, %43 : i32
          %45 = arith.subi %31, %43 : i32
          %46 = arith.remsi %45, %arg12 : i32
          %47 = arith.cmpi eq, %46, %c0_i32 : i32
          %48 = arith.divsi %45, %arg12 : i32
          %49 = arith.cmpi slt, %48, %arg7 : i32
          %50 = arith.andi %47, %49 : i1
          %51 = arith.andi %44, %50 : i1
          %52 = scf.if %51 -> (i32) {
            %53 = arith.index_cast %arg17 : i32 to index
            memref.store %42, %alloca_2[%53] : memref<16xi32>
            memref.store %48, %alloca_1[%53] : memref<16xi32>
            %54 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %54 : i32
          } else {
            scf.yield %arg17 : i32
          }
          affine.yield %52 : i32
        }
        %36 = affine.for %arg16 = 0 to %3 iter_args(%arg17 = %c0_i32) -> (i32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.muli %42, %arg14 : i32
          %44 = arith.cmpi sge, %32, %43 : i32
          %45 = arith.subi %32, %43 : i32
          %46 = arith.remsi %45, %arg12 : i32
          %47 = arith.cmpi eq, %46, %c0_i32 : i32
          %48 = arith.divsi %45, %arg12 : i32
          %49 = arith.cmpi slt, %48, %arg8 : i32
          %50 = arith.andi %47, %49 : i1
          %51 = arith.andi %44, %50 : i1
          %52 = scf.if %51 -> (i32) {
            %53 = arith.index_cast %arg17 : i32 to index
            memref.store %42, %alloca_0[%53] : memref<16xi32>
            memref.store %48, %alloca[%53] : memref<16xi32>
            %54 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %54 : i32
          } else {
            scf.yield %arg17 : i32
          }
          affine.yield %52 : i32
        }
        %37 = "polygeist.subindex"(%arg2, %arg15) : (memref<?xf32>, index) -> memref<?xf32>
        %38 = func.call @__nvvm_ldg_f(%37) : (memref<?xf32>) -> f32
        %39 = arith.index_cast %35 : i32 to index
        %40 = arith.index_cast %36 : i32 to index
        %41 = affine.for %arg16 = 0 to %4 iter_args(%arg17 = %38) -> (f32) {
          %42 = arith.index_cast %arg16 : index to i32
          %43 = arith.addi %33, %42 : i32
          %44 = arith.muli %43, %arg7 : i32
          %45 = arith.muli %42, %arg6 : i32
          %46 = arith.addi %45, %34 : i32
          %47 = arith.muli %46, %arg9 : i32
          %48 = scf.for %arg18 = %c0 to %39 step %c1 iter_args(%arg19 = %arg17) -> (f32) {
            %49 = memref.load %alloca_2[%arg18] : memref<16xi32>
            %50 = memref.load %alloca_1[%arg18] : memref<16xi32>
            %51 = arith.addi %44, %50 : i32
            %52 = arith.muli %51, %arg8 : i32
            %53 = arith.addi %47, %49 : i32
            %54 = arith.muli %53, %arg9 : i32
            %55 = scf.for %arg20 = %c0 to %40 step %c1 iter_args(%arg21 = %arg19) -> (f32) {
              %56 = memref.load %alloca_0[%arg20] : memref<16xi32>
              %57 = memref.load %alloca[%arg20] : memref<16xi32>
              %58 = arith.addi %52, %57 : i32
              %59 = arith.addi %54, %56 : i32
              %60 = arith.index_cast %58 : i32 to index
              %61 = "polygeist.subindex"(%arg0, %60) : (memref<?xf32>, index) -> memref<?xf32>
              %62 = func.call @__nvvm_ldg_f(%61) : (memref<?xf32>) -> f32
              %63 = arith.index_cast %59 : i32 to index
              %64 = "polygeist.subindex"(%arg1, %63) : (memref<?xf32>, index) -> memref<?xf32>
              %65 = func.call @__nvvm_ldg_f(%64) : (memref<?xf32>) -> f32
              %66 = arith.mulf %62, %65 : f32
              %67 = arith.addf %arg21, %66 : f32
              scf.yield %67 : f32
            }
            scf.yield %55 : f32
          }
          affine.yield %48 : f32
        }
        affine.store %41, %arg3[((%arg15 + symbol(%26)) * symbol(%1) + symbol(%22)) * symbol(%0) + symbol(%13)] : memref<?xf32>
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z48conv_transpose2d_forward_kernel_thread_block_mapPKfS0_S0_Pfiiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32, %arg14: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %true = arith.constant true
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = arith.index_cast %arg11 : i32 to index
    %1 = arith.index_cast %arg10 : i32 to index
    %2 = arith.index_cast %arg6 : i32 to index
    %3 = arith.index_cast %arg9 : i32 to index
    %4 = arith.index_cast %arg5 : i32 to index
    %alloca = memref.alloca() : memref<16xi32>
    %alloca_0 = memref.alloca() : memref<16xi32>
    %alloca_1 = memref.alloca() : memref<16xi32>
    %alloca_2 = memref.alloca() : memref<16xi32>
    %5 = gpu.block_id  x
    %6 = arith.index_cast %5 : index to i32
    %7 = gpu.block_dim  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %6, %8 : i32
    %10 = gpu.thread_id  x
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.addi %9, %11 : i32
    %13 = arith.index_cast %12 : i32 to index
    %14 = gpu.block_id  y
    %15 = arith.index_cast %14 : index to i32
    %16 = gpu.block_dim  y
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.muli %15, %17 : i32
    %19 = gpu.thread_id  y
    %20 = arith.index_cast %19 : index to i32
    %21 = arith.addi %18, %20 : i32
    %22 = arith.index_cast %21 : i32 to index
    %23 = gpu.block_id  z
    %24 = arith.index_cast %23 : index to i32
    %25 = arith.muli %24, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.cmpi sge, %21, %arg10 : i32
    %28 = scf.if %27 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %12, %arg11 : i32
      scf.yield %31 : i1
    }
    %29 = scf.if %28 -> (i1) {
      scf.yield %true : i1
    } else {
      %31 = arith.cmpi sge, %24, %arg4 : i32
      scf.yield %31 : i1
    }
    %30 = arith.xori %29, %true : i1
    scf.if %30 {
      %31 = arith.addi %21, %arg13 : i32
      %32 = arith.addi %12, %arg13 : i32
      %33 = arith.muli %24, %arg5 : i32
      scf.for %arg15 = %c0 to %2 step %c1 {
        %34 = arith.index_cast %arg15 : index to i32
        %35 = scf.for %arg16 = %c0 to %3 step %c1 iter_args(%arg17 = %c0_i32) -> (i32) {
          %47 = arith.index_cast %arg16 : index to i32
          %48 = arith.muli %47, %arg14 : i32
          %49 = arith.cmpi sge, %31, %48 : i32
          %50 = arith.subi %31, %48 : i32
          %51 = arith.remsi %50, %arg12 : i32
          %52 = arith.cmpi eq, %51, %c0_i32 : i32
          %53 = arith.divsi %50, %arg12 : i32
          %54 = arith.cmpi slt, %53, %arg7 : i32
          %55 = arith.andi %52, %54 : i1
          %56 = arith.andi %49, %55 : i1
          %57 = scf.if %56 -> (i32) {
            %58 = arith.index_cast %arg17 : i32 to index
            memref.store %47, %alloca_2[%58] : memref<16xi32>
            memref.store %53, %alloca_1[%58] : memref<16xi32>
            %59 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %59 : i32
          } else {
            scf.yield %arg17 : i32
          }
          scf.yield %57 : i32
        }
        %36 = scf.for %arg16 = %c0 to %3 step %c1 iter_args(%arg17 = %c0_i32) -> (i32) {
          %47 = arith.index_cast %arg16 : index to i32
          %48 = arith.muli %47, %arg14 : i32
          %49 = arith.cmpi sge, %32, %48 : i32
          %50 = arith.subi %32, %48 : i32
          %51 = arith.remsi %50, %arg12 : i32
          %52 = arith.cmpi eq, %51, %c0_i32 : i32
          %53 = arith.divsi %50, %arg12 : i32
          %54 = arith.cmpi slt, %53, %arg8 : i32
          %55 = arith.andi %52, %54 : i1
          %56 = arith.andi %49, %55 : i1
          %57 = scf.if %56 -> (i32) {
            %58 = arith.index_cast %arg17 : i32 to index
            memref.store %47, %alloca_0[%58] : memref<16xi32>
            memref.store %53, %alloca[%58] : memref<16xi32>
            %59 = arith.addi %arg17, %c1_i32 : i32
            scf.yield %59 : i32
          } else {
            scf.yield %arg17 : i32
          }
          scf.yield %57 : i32
        }
        %37 = "polygeist.subindex"(%arg2, %arg15) : (memref<?xf32>, index) -> memref<?xf32>
        %38 = func.call @__nvvm_ldg_f(%37) : (memref<?xf32>) -> f32
        %39 = arith.index_cast %35 : i32 to index
        %40 = arith.index_cast %36 : i32 to index
        %41 = scf.for %arg16 = %c0 to %4 step %c1 iter_args(%arg17 = %38) -> (f32) {
          %47 = arith.index_cast %arg16 : index to i32
          %48 = arith.addi %33, %47 : i32
          %49 = arith.muli %48, %arg7 : i32
          %50 = arith.muli %47, %arg6 : i32
          %51 = arith.addi %50, %34 : i32
          %52 = arith.muli %51, %arg9 : i32
          %53 = scf.for %arg18 = %c0 to %39 step %c1 iter_args(%arg19 = %arg17) -> (f32) {
            %54 = memref.load %alloca_2[%arg18] : memref<16xi32>
            %55 = memref.load %alloca_1[%arg18] : memref<16xi32>
            %56 = arith.addi %49, %55 : i32
            %57 = arith.muli %56, %arg8 : i32
            %58 = arith.addi %52, %54 : i32
            %59 = arith.muli %58, %arg9 : i32
            %60 = scf.for %arg20 = %c0 to %40 step %c1 iter_args(%arg21 = %arg19) -> (f32) {
              %61 = memref.load %alloca_0[%arg20] : memref<16xi32>
              %62 = memref.load %alloca[%arg20] : memref<16xi32>
              %63 = arith.addi %57, %62 : i32
              %64 = arith.addi %59, %61 : i32
              %65 = arith.index_cast %63 : i32 to index
              %66 = "polygeist.subindex"(%arg0, %65) : (memref<?xf32>, index) -> memref<?xf32>
              %67 = func.call @__nvvm_ldg_f(%66) : (memref<?xf32>) -> f32
              %68 = arith.index_cast %64 : i32 to index
              %69 = "polygeist.subindex"(%arg1, %68) : (memref<?xf32>, index) -> memref<?xf32>
              %70 = func.call @__nvvm_ldg_f(%69) : (memref<?xf32>) -> f32
              %71 = arith.mulf %67, %70 : f32
              %72 = arith.addf %arg21, %71 : f32
              scf.yield %72 : f32
            }
            scf.yield %60 : f32
          }
          scf.yield %53 : f32
        }
        %42 = arith.addi %arg15, %26 : index
        %43 = arith.muli %42, %1 : index
        %44 = arith.addi %43, %22 : index
        %45 = arith.muli %44, %0 : index
        %46 = arith.addi %45, %13 : index
        memref.store %41, %arg3[%46] : memref<?xf32>
      }
    }
    return
  }
  func.func private @__nvvm_ldg_f(memref<?xf32>) -> f32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nvvm_ldg_f. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-error] WrapAndReplaceBarrierPass::runOnOperation(): gpuThreadIdOp.getDimension() != gpu::Dimension::x

