warning: CUDA version 12.1 is only partially supported
warning: CUDA version 12.1 is only partially supported
[ict-debug] driver.cc: After return 5, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z45__device_stub__hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    call @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> ()
    return
  }
  func.func private @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c32_i32 = arith.constant 32 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = arith.index_cast %arg8 : i32 to index
    %1 = llvm.mlir.undef : i32
    %2 = llvm.mlir.undef : f32
    %3 = gpu.thread_id  x
    %4 = arith.index_cast %3 : index to i32
    %5 = arith.divui %4, %c32_i32 : i32
    %6 = arith.index_cast %5 : i32 to index
    %7 = gpu.thread_id  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.remui %8, %c32_i32 : i32
    %10 = gpu.block_id  y
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.muli %11, %c32_i32 : i32
    %13 = gpu.block_id  x
    %14 = arith.index_cast %13 : index to i32
    %15 = arith.muli %14, %c32_i32 : i32
    %16 = gpu.block_id  z
    %17 = arith.index_cast %16 : index to i32
    %18 = arith.divsi %17, %arg5 : i32
    %19 = arith.remsi %17, %arg5 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.cmpi slt, %18, %arg4 : i32
    scf.if %21 {
      %22 = arith.muli %5, %c8_i32 : i32
      %23 = arith.addi %12, %22 : i32
      %24 = affine.load %arg2[symbol(%20)] : memref<?xf32>
      %25 = arith.addi %15, %9 : i32
      %26 = arith.addi %15, %c32_i32 : i32
      %27 = arith.muli %18, %arg5 : i32
      %28 = arith.addi %27, %19 : i32
      %29 = arith.muli %28, %arg8 : i32
      %30:2 = affine.for %arg14 = 0 to 8 iter_args(%arg15 = %1, %arg16 = %2) -> (i32, f32) {
        %31 = arith.index_cast %arg14 : index to i32
        %32 = arith.addi %23, %31 : i32
        %33:2 = affine.if affine_set<(d0)[s0, s1, s2] : (-d0 - s0 * 32 - s1 * 8 + s2 - 1 >= 0)>(%arg14)[%10, %6, %0] -> (i32, f32) {
          %34 = arith.addi %29, %32 : i32
          %35 = arith.muli %34, %arg9 : i32
          %36:3 = scf.while (%arg17 = %arg15, %arg18 = %arg16, %arg19 = %25) : (i32, f32, i32) -> (i32, f32, i32) {
            %37 = func.call @_ZL3minii(%26, %arg9) : (i32, i32) -> i32
            %38 = arith.cmpi slt, %arg19, %37 : i32
            scf.condition(%38) %arg17, %arg18, %arg19 : i32, f32, i32
          } do {
          ^bb0(%arg17: i32, %arg18: f32, %arg19: i32):
            %37 = func.call @_Z18compute_conv_pixelPKfS0_iiiiiiiiiii(%arg0, %arg1, %18, %19, %32, %arg19, %arg6, %arg7, %arg5, %arg10, %arg11, %arg12, %arg13) : (memref<?xf32>, memref<?xf32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) -> f32
            %38 = arith.addf %37, %24 : f32
            %39 = arith.addi %35, %arg19 : i32
            %40 = arith.index_cast %39 : i32 to index
            memref.store %38, %arg3[%40] : memref<?xf32>
            %41 = arith.addi %arg19, %c32_i32 : i32
            scf.yield %39, %38, %41 : i32, f32, i32
          }
          affine.yield %36#0, %36#1 : i32, f32
        } else {
          affine.yield %arg15, %arg16 : i32, f32
        }
        affine.yield %33#0, %33#1 : i32, f32
      }
    }
    return
  }
  func.func private @_ZL3minii(%arg0: i32, %arg1: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<internal>, polygeist.device_only_func = "1"} {
    %0 = call @__nv_min(%arg0, %arg1) : (i32, i32) -> i32
    return %0 : i32
  }
  func.func private @_Z18compute_conv_pixelPKfS0_iiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32) -> f32 attributes {llvm.linkage = #llvm.linkage<linkonce_odr>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg6 : i32 to index
    %1 = arith.index_cast %arg12 : i32 to index
    %2 = arith.index_cast %arg7 : i32 to index
    %3 = arith.index_cast %arg12 : i32 to index
    %4 = arith.index_cast %arg9 : i32 to index
    %5 = arith.muli %arg4, %arg10 : i32
    %6 = arith.subi %5, %arg11 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.index_cast %6 : i32 to index
    %9 = arith.muli %arg5, %arg10 : i32
    %10 = arith.subi %9, %arg11 : i32
    %11 = arith.index_cast %10 : i32 to index
    %12 = arith.muli %arg2, %arg8 : i32
    %13 = arith.addi %12, %arg3 : i32
    %14 = arith.muli %13, %arg6 : i32
    %15 = arith.index_cast %14 : i32 to index
    %16 = arith.muli %arg3, %arg9 : i32
    %17 = arith.index_cast %16 : i32 to index
    %18 = affine.for %arg13 = 0 to %4 iter_args(%arg14 = %cst) -> (f32) {
      %19 = affine.if affine_set<(d0)[s0, s1, s2, s3, s4] : (d0 * s1 + s0 >= 0, -(d0 * s1) - s0 + s2 - 1 >= 0, s3 >= 0, -s3 + s4 - 1 >= 0)>(%arg13)[%7, %1, %0, %11, %2] -> f32 {
        %20 = affine.load %arg0[(%arg13 * symbol(%3) + symbol(%15) + symbol(%8)) * symbol(%2) + symbol(%11)] : memref<?xf32>
        %21 = affine.load %arg1[%arg13 + symbol(%17)] : memref<?xf32>
        %22 = arith.mulf %20, %21 : f32
        %23 = arith.addf %arg14, %22 : f32
        affine.yield %23 : f32
      } else {
        affine.yield %arg14 : f32
      }
      affine.yield %19 : f32
    }
    return %18 : f32
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 5, module: end

[ict-debug] driver.cc: After return 6, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg8 : i32 to index
    %2 = llvm.mlir.undef : i32
    %3 = llvm.mlir.undef : f32
    %4 = gpu.thread_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.divui %5, %c32_i32 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.remui %5, %c32_i32 : i32
    %9 = gpu.block_id  y
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %10, %c32_i32 : i32
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %13, %c32_i32 : i32
    %15 = gpu.block_id  z
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.divsi %16, %arg5 : i32
    %18 = arith.remsi %16, %arg5 : i32
    %19 = arith.muli %18, %arg10 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.index_cast %18 : i32 to index
    %22 = arith.cmpi slt, %17, %arg4 : i32
    scf.if %22 {
      %23 = arith.muli %6, %c8_i32 : i32
      %24 = arith.addi %11, %23 : i32
      %25 = affine.load %arg2[symbol(%21)] : memref<?xf32>
      %26 = arith.addi %14, %8 : i32
      %27 = arith.addi %14, %c32_i32 : i32
      %28 = arith.muli %17, %arg5 : i32
      %29 = arith.addi %28, %18 : i32
      %30 = arith.muli %29, %arg8 : i32
      %31 = arith.index_cast %arg6 : i32 to index
      %32 = arith.index_cast %arg13 : i32 to index
      %33 = arith.index_cast %arg7 : i32 to index
      %34 = arith.muli %29, %arg6 : i32
      %35 = arith.index_cast %34 : i32 to index
      %36:2 = affine.for %arg14 = 0 to 8 iter_args(%arg15 = %2, %arg16 = %3) -> (i32, f32) {
        %37 = arith.index_cast %arg14 : index to i32
        %38 = arith.addi %24, %37 : i32
        %39:2 = affine.if affine_set<(d0)[s0, s1, s2] : (-d0 - s0 * 32 - s1 * 8 + s2 - 1 >= 0)>(%arg14)[%9, %7, %1] -> (i32, f32) {
          %40 = arith.addi %30, %38 : i32
          %41 = arith.muli %40, %arg9 : i32
          %42 = arith.muli %38, %arg11 : i32
          %43 = arith.subi %42, %arg12 : i32
          %44 = arith.index_cast %43 : i32 to index
          %45 = arith.addi %35, %44 : index
          %46:3 = scf.while (%arg17 = %arg15, %arg18 = %arg16, %arg19 = %26) : (i32, f32, i32) -> (i32, f32, i32) {
            %47 = func.call @__nv_min(%27, %arg9) : (i32, i32) -> i32
            %48 = arith.cmpi slt, %arg19, %47 : i32
            scf.condition(%48) %arg17, %arg18, %arg19 : i32, f32, i32
          } do {
          ^bb0(%arg17: i32, %arg18: f32, %arg19: i32):
            %47 = arith.muli %arg19, %arg11 : i32
            %48 = arith.subi %47, %arg12 : i32
            %49 = arith.index_cast %48 : i32 to index
            %50 = arith.cmpi sge, %49, %c0 : index
            %51 = arith.subi %33, %49 : index
            %52 = arith.addi %51, %c-1 : index
            %53 = arith.cmpi sge, %52, %c0 : index
            %54 = affine.for %arg20 = 0 to %0 iter_args(%arg21 = %cst) -> (f32) {
              %59 = arith.muli %arg20, %32 : index
              %60 = arith.addi %59, %44 : index
              %61 = arith.cmpi sge, %60, %c0 : index
              %62 = arith.muli %59, %c-1 : index
              %63 = arith.subi %62, %44 : index
              %64 = arith.addi %63, %31 : index
              %65 = arith.addi %64, %c-1 : index
              %66 = arith.cmpi sge, %65, %c0 : index
              %67 = arith.andi %61, %66 : i1
              %68 = arith.andi %67, %50 : i1
              %69 = arith.andi %68, %53 : i1
              %70 = scf.if %69 -> (f32) {
                %71 = arith.addi %59, %45 : index
                %72 = arith.muli %71, %33 : index
                %73 = arith.addi %72, %49 : index
                %74 = memref.load %arg0[%73] : memref<?xf32>
                %75 = affine.load %arg1[%arg20 + symbol(%20)] : memref<?xf32>
                %76 = arith.mulf %74, %75 : f32
                %77 = arith.addf %arg21, %76 : f32
                scf.yield %77 : f32
              } else {
                scf.yield %arg21 : f32
              }
              affine.yield %70 : f32
            }
            %55 = arith.addf %54, %25 : f32
            %56 = arith.addi %41, %arg19 : i32
            %57 = arith.index_cast %56 : i32 to index
            memref.store %55, %arg3[%57] : memref<?xf32>
            %58 = arith.addi %arg19, %c32_i32 : i32
            scf.yield %56, %55, %58 : i32, f32, i32
          }
          affine.yield %46#0, %46#1 : i32, f32
        } else {
          affine.yield %arg15, %arg16 : i32, f32
        }
        affine.yield %39#0, %39#1 : i32, f32
      }
    }
    return
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 6, module: end

WrapAndReplaceBarrierPass::runOnOperation(): before execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func private @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c-8 = arith.constant -8 : index
    %c-32 = arith.constant -32 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    %c8_i32 = arith.constant 8 : i32
    %c32_i32 = arith.constant 32 : i32
    %c0 = arith.constant 0 : index
    %c-1 = arith.constant -1 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg8 : i32 to index
    %2 = llvm.mlir.undef : i32
    %3 = llvm.mlir.undef : f32
    %4 = gpu.thread_id  x
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.divui %5, %c32_i32 : i32
    %7 = arith.index_cast %6 : i32 to index
    %8 = arith.remui %5, %c32_i32 : i32
    %9 = gpu.block_id  y
    %10 = arith.index_cast %9 : index to i32
    %11 = arith.muli %10, %c32_i32 : i32
    %12 = gpu.block_id  x
    %13 = arith.index_cast %12 : index to i32
    %14 = arith.muli %13, %c32_i32 : i32
    %15 = gpu.block_id  z
    %16 = arith.index_cast %15 : index to i32
    %17 = arith.divsi %16, %arg5 : i32
    %18 = arith.remsi %16, %arg5 : i32
    %19 = arith.muli %18, %arg10 : i32
    %20 = arith.index_cast %19 : i32 to index
    %21 = arith.index_cast %18 : i32 to index
    %22 = arith.cmpi slt, %17, %arg4 : i32
    scf.if %22 {
      %23 = arith.muli %6, %c8_i32 : i32
      %24 = arith.addi %11, %23 : i32
      %25 = memref.load %arg2[%21] : memref<?xf32>
      %26 = arith.addi %14, %8 : i32
      %27 = arith.addi %14, %c32_i32 : i32
      %28 = arith.muli %17, %arg5 : i32
      %29 = arith.addi %28, %18 : i32
      %30 = arith.muli %29, %arg8 : i32
      %31 = arith.index_cast %arg6 : i32 to index
      %32 = arith.index_cast %arg13 : i32 to index
      %33 = arith.index_cast %arg7 : i32 to index
      %34 = arith.muli %29, %arg6 : i32
      %35 = arith.index_cast %34 : i32 to index
      %36:2 = scf.for %arg14 = %c0 to %c8 step %c1 iter_args(%arg15 = %2, %arg16 = %3) -> (i32, f32) {
        %37 = arith.index_cast %arg14 : index to i32
        %38 = arith.addi %24, %37 : i32
        %39 = arith.muli %9, %c-32 : index
        %40 = arith.subi %39, %arg14 : index
        %41 = arith.muli %7, %c-8 : index
        %42 = arith.addi %40, %41 : index
        %43 = arith.addi %42, %1 : index
        %44 = arith.addi %43, %c-1 : index
        %45 = arith.cmpi sge, %44, %c0 : index
        %46:2 = scf.if %45 -> (i32, f32) {
          %47 = arith.addi %30, %38 : i32
          %48 = arith.muli %47, %arg9 : i32
          %49 = arith.muli %38, %arg11 : i32
          %50 = arith.subi %49, %arg12 : i32
          %51 = arith.index_cast %50 : i32 to index
          %52 = arith.addi %35, %51 : index
          %53:3 = scf.while (%arg17 = %arg15, %arg18 = %arg16, %arg19 = %26) : (i32, f32, i32) -> (i32, f32, i32) {
            %54 = func.call @__nv_min(%27, %arg9) : (i32, i32) -> i32
            %55 = arith.cmpi slt, %arg19, %54 : i32
            scf.condition(%55) %arg17, %arg18, %arg19 : i32, f32, i32
          } do {
          ^bb0(%arg17: i32, %arg18: f32, %arg19: i32):
            %54 = arith.muli %arg19, %arg11 : i32
            %55 = arith.subi %54, %arg12 : i32
            %56 = arith.index_cast %55 : i32 to index
            %57 = arith.cmpi sge, %56, %c0 : index
            %58 = arith.subi %33, %56 : index
            %59 = arith.addi %58, %c-1 : index
            %60 = arith.cmpi sge, %59, %c0 : index
            %61 = scf.for %arg20 = %c0 to %0 step %c1 iter_args(%arg21 = %cst) -> (f32) {
              %66 = arith.muli %arg20, %32 : index
              %67 = arith.addi %66, %51 : index
              %68 = arith.cmpi sge, %67, %c0 : index
              %69 = arith.muli %66, %c-1 : index
              %70 = arith.subi %69, %51 : index
              %71 = arith.addi %70, %31 : index
              %72 = arith.addi %71, %c-1 : index
              %73 = arith.cmpi sge, %72, %c0 : index
              %74 = arith.andi %68, %73 : i1
              %75 = arith.andi %74, %57 : i1
              %76 = arith.andi %75, %60 : i1
              %77 = scf.if %76 -> (f32) {
                %78 = arith.addi %66, %52 : index
                %79 = arith.muli %78, %33 : index
                %80 = arith.addi %79, %56 : index
                %81 = memref.load %arg0[%80] : memref<?xf32>
                %82 = arith.addi %arg20, %20 : index
                %83 = memref.load %arg1[%82] : memref<?xf32>
                %84 = arith.mulf %81, %83 : f32
                %85 = arith.addf %arg21, %84 : f32
                scf.yield %85 : f32
              } else {
                scf.yield %arg21 : f32
              }
              scf.yield %77 : f32
            }
            %62 = arith.addf %61, %25 : f32
            %63 = arith.addi %48, %arg19 : i32
            %64 = arith.index_cast %63 : i32 to index
            memref.store %62, %arg3[%64] : memref<?xf32>
            %65 = arith.addi %arg19, %c32_i32 : i32
            scf.yield %63, %62, %65 : i32, f32, i32
          }
          scf.yield %53#0, %53#1 : i32, f32
        } else {
          scf.yield %arg15, %arg16 : i32, f32
        }
        scf.yield %46#0, %46#1 : i32, f32
      }
    }
    return
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): before execute: end
[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nv_min. func.getBlocks().size() == 0! this function is empty, skip it.

WrapAndReplaceBarrierPass::runOnOperation(): after execute: 
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg14) = (%c0) to (%c32) step (%c1) {
      %c-8 = arith.constant -8 : index
      %c-32 = arith.constant -32 : index
      %c1_0 = arith.constant 1 : index
      %c8 = arith.constant 8 : index
      %c8_i32 = arith.constant 8 : i32
      %c32_i32 = arith.constant 32 : i32
      %c0_1 = arith.constant 0 : index
      %c-1 = arith.constant -1 : index
      %cst = arith.constant 0.000000e+00 : f32
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg8 : i32 to index
      %2 = llvm.mlir.undef : i32
      %3 = llvm.mlir.undef : f32
      %4 = arith.index_cast %arg14 : index to i32
      %5 = arith.divui %4, %c32_i32 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.remui %4, %c32_i32 : i32
      %8 = gpu.block_id  y
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %9, %c32_i32 : i32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = gpu.block_id  z
      %15 = arith.index_cast %14 : index to i32
      %16 = arith.divsi %15, %arg5 : i32
      %17 = arith.remsi %15, %arg5 : i32
      %18 = arith.muli %17, %arg10 : i32
      %19 = arith.index_cast %18 : i32 to index
      %20 = arith.index_cast %17 : i32 to index
      %21 = arith.cmpi slt, %16, %arg4 : i32
      scf.if %21 {
        %22 = arith.muli %5, %c8_i32 : i32
        %23 = arith.addi %10, %22 : i32
        %24 = memref.load %arg2[%20] : memref<?xf32>
        %25 = arith.addi %13, %7 : i32
        %26 = arith.addi %13, %c32_i32 : i32
        %27 = arith.muli %16, %arg5 : i32
        %28 = arith.addi %27, %17 : i32
        %29 = arith.muli %28, %arg8 : i32
        %30 = arith.index_cast %arg6 : i32 to index
        %31 = arith.index_cast %arg13 : i32 to index
        %32 = arith.index_cast %arg7 : i32 to index
        %33 = arith.muli %28, %arg6 : i32
        %34 = arith.index_cast %33 : i32 to index
        %35:2 = scf.for %arg15 = %c0_1 to %c8 step %c1_0 iter_args(%arg16 = %2, %arg17 = %3) -> (i32, f32) {
          %36 = arith.index_cast %arg15 : index to i32
          %37 = arith.addi %23, %36 : i32
          %38 = arith.muli %8, %c-32 : index
          %39 = arith.subi %38, %arg15 : index
          %40 = arith.muli %6, %c-8 : index
          %41 = arith.addi %39, %40 : index
          %42 = arith.addi %41, %1 : index
          %43 = arith.addi %42, %c-1 : index
          %44 = arith.cmpi sge, %43, %c0_1 : index
          %45:2 = scf.if %44 -> (i32, f32) {
            %46 = arith.addi %29, %37 : i32
            %47 = arith.muli %46, %arg9 : i32
            %48 = arith.muli %37, %arg11 : i32
            %49 = arith.subi %48, %arg12 : i32
            %50 = arith.index_cast %49 : i32 to index
            %51 = arith.addi %34, %50 : index
            %52:3 = scf.while (%arg18 = %arg16, %arg19 = %arg17, %arg20 = %25) : (i32, f32, i32) -> (i32, f32, i32) {
              %53 = func.call @__nv_min(%26, %arg9) : (i32, i32) -> i32
              %54 = arith.cmpi slt, %arg20, %53 : i32
              scf.condition(%54) %arg18, %arg19, %arg20 : i32, f32, i32
            } do {
            ^bb0(%arg18: i32, %arg19: f32, %arg20: i32):
              %53 = arith.muli %arg20, %arg11 : i32
              %54 = arith.subi %53, %arg12 : i32
              %55 = arith.index_cast %54 : i32 to index
              %56 = arith.cmpi sge, %55, %c0_1 : index
              %57 = arith.subi %32, %55 : index
              %58 = arith.addi %57, %c-1 : index
              %59 = arith.cmpi sge, %58, %c0_1 : index
              %60 = scf.for %arg21 = %c0_1 to %0 step %c1_0 iter_args(%arg22 = %cst) -> (f32) {
                %65 = arith.muli %arg21, %31 : index
                %66 = arith.addi %65, %50 : index
                %67 = arith.cmpi sge, %66, %c0_1 : index
                %68 = arith.muli %65, %c-1 : index
                %69 = arith.subi %68, %50 : index
                %70 = arith.addi %69, %30 : index
                %71 = arith.addi %70, %c-1 : index
                %72 = arith.cmpi sge, %71, %c0_1 : index
                %73 = arith.andi %67, %72 : i1
                %74 = arith.andi %73, %56 : i1
                %75 = arith.andi %74, %59 : i1
                %76 = scf.if %75 -> (f32) {
                  %77 = arith.addi %65, %51 : index
                  %78 = arith.muli %77, %32 : index
                  %79 = arith.addi %78, %55 : index
                  %80 = memref.load %arg0[%79] : memref<?xf32>
                  %81 = arith.addi %arg21, %19 : index
                  %82 = memref.load %arg1[%81] : memref<?xf32>
                  %83 = arith.mulf %80, %82 : f32
                  %84 = arith.addf %arg22, %83 : f32
                  scf.yield %84 : f32
                } else {
                  scf.yield %arg22 : f32
                }
                scf.yield %76 : f32
              }
              %61 = arith.addf %60, %24 : f32
              %62 = arith.addi %47, %arg20 : i32
              %63 = arith.index_cast %62 : i32 to index
              memref.store %61, %arg3[%63] : memref<?xf32>
              %64 = arith.addi %arg20, %c32_i32 : i32
              scf.yield %62, %61, %64 : i32, f32, i32
            }
            scf.yield %52#0, %52#1 : i32, f32
          } else {
            scf.yield %arg16, %arg17 : i32, f32
          }
          scf.yield %45#0, %45#1 : i32, f32
        }
      }
      scf.yield
    }
    return
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
WrapAndReplaceBarrierPass::runOnOperation(): after execute: end
[ict-debug] driver.cc: After return 7, module:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    scf.parallel (%arg14) = (%c0) to (%c32) step (%c1) {
      %c-8 = arith.constant -8 : index
      %c-32 = arith.constant -32 : index
      %c1_0 = arith.constant 1 : index
      %c8 = arith.constant 8 : index
      %c8_i32 = arith.constant 8 : i32
      %c32_i32 = arith.constant 32 : i32
      %c0_1 = arith.constant 0 : index
      %c-1 = arith.constant -1 : index
      %cst = arith.constant 0.000000e+00 : f32
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg8 : i32 to index
      %2 = llvm.mlir.undef : i32
      %3 = llvm.mlir.undef : f32
      %4 = arith.index_cast %arg14 : index to i32
      %5 = arith.divui %4, %c32_i32 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.remui %4, %c32_i32 : i32
      %8 = gpu.block_id  y
      %9 = arith.index_cast %8 : index to i32
      %10 = arith.muli %9, %c32_i32 : i32
      %11 = gpu.block_id  x
      %12 = arith.index_cast %11 : index to i32
      %13 = arith.muli %12, %c32_i32 : i32
      %14 = gpu.block_id  z
      %15 = arith.index_cast %14 : index to i32
      %16 = arith.divsi %15, %arg5 : i32
      %17 = arith.remsi %15, %arg5 : i32
      %18 = arith.muli %17, %arg10 : i32
      %19 = arith.index_cast %18 : i32 to index
      %20 = arith.index_cast %17 : i32 to index
      %21 = arith.cmpi slt, %16, %arg4 : i32
      scf.if %21 {
        %22 = arith.muli %5, %c8_i32 : i32
        %23 = arith.addi %10, %22 : i32
        %24 = memref.load %arg2[%20] : memref<?xf32>
        %25 = arith.addi %13, %7 : i32
        %26 = arith.addi %13, %c32_i32 : i32
        %27 = arith.muli %16, %arg5 : i32
        %28 = arith.addi %27, %17 : i32
        %29 = arith.muli %28, %arg8 : i32
        %30 = arith.index_cast %arg6 : i32 to index
        %31 = arith.index_cast %arg13 : i32 to index
        %32 = arith.index_cast %arg7 : i32 to index
        %33 = arith.muli %28, %arg6 : i32
        %34 = arith.index_cast %33 : i32 to index
        %35:2 = scf.for %arg15 = %c0_1 to %c8 step %c1_0 iter_args(%arg16 = %2, %arg17 = %3) -> (i32, f32) {
          %36 = arith.index_cast %arg15 : index to i32
          %37 = arith.addi %23, %36 : i32
          %38 = arith.muli %8, %c-32 : index
          %39 = arith.subi %38, %arg15 : index
          %40 = arith.muli %6, %c-8 : index
          %41 = arith.addi %39, %40 : index
          %42 = arith.addi %41, %1 : index
          %43 = arith.addi %42, %c-1 : index
          %44 = arith.cmpi sge, %43, %c0_1 : index
          %45:2 = scf.if %44 -> (i32, f32) {
            %46 = arith.addi %29, %37 : i32
            %47 = arith.muli %46, %arg9 : i32
            %48 = arith.muli %37, %arg11 : i32
            %49 = arith.subi %48, %arg12 : i32
            %50 = arith.index_cast %49 : i32 to index
            %51 = arith.addi %34, %50 : index
            %52:3 = scf.while (%arg18 = %arg16, %arg19 = %arg17, %arg20 = %25) : (i32, f32, i32) -> (i32, f32, i32) {
              %53 = func.call @__nv_min(%26, %arg9) : (i32, i32) -> i32
              %54 = arith.cmpi slt, %arg20, %53 : i32
              scf.condition(%54) %arg18, %arg19, %arg20 : i32, f32, i32
            } do {
            ^bb0(%arg18: i32, %arg19: f32, %arg20: i32):
              %53 = arith.muli %arg20, %arg11 : i32
              %54 = arith.subi %53, %arg12 : i32
              %55 = arith.index_cast %54 : i32 to index
              %56 = arith.cmpi sge, %55, %c0_1 : index
              %57 = arith.subi %32, %55 : index
              %58 = arith.addi %57, %c-1 : index
              %59 = arith.cmpi sge, %58, %c0_1 : index
              %60 = scf.for %arg21 = %c0_1 to %0 step %c1_0 iter_args(%arg22 = %cst) -> (f32) {
                %65 = arith.muli %arg21, %31 : index
                %66 = arith.addi %65, %50 : index
                %67 = arith.cmpi sge, %66, %c0_1 : index
                %68 = arith.muli %65, %c-1 : index
                %69 = arith.subi %68, %50 : index
                %70 = arith.addi %69, %30 : index
                %71 = arith.addi %70, %c-1 : index
                %72 = arith.cmpi sge, %71, %c0_1 : index
                %73 = arith.andi %67, %72 : i1
                %74 = arith.andi %73, %56 : i1
                %75 = arith.andi %74, %59 : i1
                %76 = scf.if %75 -> (f32) {
                  %77 = arith.addi %65, %51 : index
                  %78 = arith.muli %77, %32 : index
                  %79 = arith.addi %78, %55 : index
                  %80 = memref.load %arg0[%79] : memref<?xf32>
                  %81 = arith.addi %arg21, %19 : index
                  %82 = memref.load %arg1[%81] : memref<?xf32>
                  %83 = arith.mulf %80, %82 : f32
                  %84 = arith.addf %arg22, %83 : f32
                  scf.yield %84 : f32
                } else {
                  scf.yield %arg22 : f32
                }
                scf.yield %76 : f32
              }
              %61 = arith.addf %60, %24 : f32
              %62 = arith.addi %47, %arg20 : i32
              %63 = arith.index_cast %62 : i32 to index
              memref.store %61, %arg3[%63] : memref<?xf32>
              %64 = arith.addi %arg20, %c32_i32 : i32
              scf.yield %62, %61, %64 : i32, f32, i32
            }
            scf.yield %52#0, %52#1 : i32, f32
          } else {
            scf.yield %arg16, %arg17 : i32, f32
          }
          scf.yield %45#0, %45#1 : i32, f32
        }
      }
      scf.yield
    }
    return
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: After return 7, module: end

[ict-debug] driver.cc: Before my pass process:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"} {
    %cst = arith.constant 0.000000e+00 : f32
    %c-1 = arith.constant -1 : index
    %c32_i32 = arith.constant 32 : i32
    %c8_i32 = arith.constant 8 : i32
    %c8 = arith.constant 8 : index
    %c-32 = arith.constant -32 : index
    %c-8 = arith.constant -8 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    %0 = arith.index_cast %arg10 : i32 to index
    %1 = arith.index_cast %arg8 : i32 to index
    %2 = llvm.mlir.undef : i32
    %3 = llvm.mlir.undef : f32
    %4 = gpu.block_id  y
    %5 = arith.index_cast %4 : index to i32
    %6 = arith.muli %5, %c32_i32 : i32
    %7 = gpu.block_id  x
    %8 = arith.index_cast %7 : index to i32
    %9 = arith.muli %8, %c32_i32 : i32
    %10 = gpu.block_id  z
    %11 = arith.index_cast %10 : index to i32
    %12 = arith.remsi %11, %arg5 : i32
    %13 = arith.muli %12, %arg10 : i32
    %14 = arith.index_cast %13 : i32 to index
    %15 = arith.index_cast %12 : i32 to index
    %16 = arith.divsi %11, %arg5 : i32
    %17 = arith.cmpi slt, %16, %arg4 : i32
    %18 = arith.addi %9, %c32_i32 : i32
    %19 = arith.muli %16, %arg5 : i32
    %20 = arith.addi %19, %12 : i32
    %21 = arith.muli %20, %arg8 : i32
    %22 = arith.index_cast %arg6 : i32 to index
    %23 = arith.index_cast %arg13 : i32 to index
    %24 = arith.index_cast %arg7 : i32 to index
    %25 = arith.muli %20, %arg6 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.muli %4, %c-32 : index
    scf.parallel (%arg14) = (%c0) to (%c32) step (%c1) {
      %28 = arith.index_cast %arg14 : index to i32
      %29 = arith.divui %28, %c32_i32 : i32
      %30 = arith.index_cast %29 : i32 to index
      %31 = arith.remui %28, %c32_i32 : i32
      scf.if %17 {
        %32 = arith.muli %29, %c8_i32 : i32
        %33 = arith.addi %6, %32 : i32
        %34 = memref.load %arg2[%15] : memref<?xf32>
        %35 = arith.addi %9, %31 : i32
        %36 = arith.muli %30, %c-8 : index
        %37:2 = scf.for %arg15 = %c0 to %c8 step %c1 iter_args(%arg16 = %2, %arg17 = %3) -> (i32, f32) {
          %38 = arith.index_cast %arg15 : index to i32
          %39 = arith.addi %33, %38 : i32
          %40 = arith.subi %27, %arg15 : index
          %41 = arith.addi %40, %36 : index
          %42 = arith.addi %41, %1 : index
          %43 = arith.addi %42, %c-1 : index
          %44 = arith.cmpi sge, %43, %c0 : index
          %45:2 = scf.if %44 -> (i32, f32) {
            %46 = arith.addi %21, %39 : i32
            %47 = arith.muli %46, %arg9 : i32
            %48 = arith.muli %39, %arg11 : i32
            %49 = arith.subi %48, %arg12 : i32
            %50 = arith.index_cast %49 : i32 to index
            %51 = arith.addi %26, %50 : index
            %52:3 = scf.while (%arg18 = %arg16, %arg19 = %arg17, %arg20 = %35) : (i32, f32, i32) -> (i32, f32, i32) {
              %53 = func.call @__nv_min(%18, %arg9) : (i32, i32) -> i32
              %54 = arith.cmpi slt, %arg20, %53 : i32
              scf.condition(%54) %arg18, %arg19, %arg20 : i32, f32, i32
            } do {
            ^bb0(%arg18: i32, %arg19: f32, %arg20: i32):
              %53 = arith.muli %arg20, %arg11 : i32
              %54 = arith.subi %53, %arg12 : i32
              %55 = arith.index_cast %54 : i32 to index
              %56 = arith.cmpi sge, %55, %c0 : index
              %57 = arith.subi %24, %55 : index
              %58 = arith.addi %57, %c-1 : index
              %59 = arith.cmpi sge, %58, %c0 : index
              %60 = scf.for %arg21 = %c0 to %0 step %c1 iter_args(%arg22 = %cst) -> (f32) {
                %65 = arith.muli %arg21, %23 : index
                %66 = arith.addi %65, %50 : index
                %67 = arith.cmpi sge, %66, %c0 : index
                %68 = arith.muli %65, %c-1 : index
                %69 = arith.subi %68, %50 : index
                %70 = arith.addi %69, %22 : index
                %71 = arith.addi %70, %c-1 : index
                %72 = arith.cmpi sge, %71, %c0 : index
                %73 = arith.andi %67, %72 : i1
                %74 = arith.andi %73, %56 : i1
                %75 = arith.andi %74, %59 : i1
                %76 = scf.if %75 -> (f32) {
                  %77 = arith.addi %65, %51 : index
                  %78 = arith.muli %77, %24 : index
                  %79 = arith.addi %78, %55 : index
                  %80 = memref.load %arg0[%79] : memref<?xf32>
                  %81 = arith.addi %arg21, %14 : index
                  %82 = memref.load %arg1[%81] : memref<?xf32>
                  %83 = arith.mulf %80, %82 : f32
                  %84 = arith.addf %arg22, %83 : f32
                  scf.yield %84 : f32
                } else {
                  scf.yield %arg22 : f32
                }
                scf.yield %76 : f32
              }
              %61 = arith.addf %60, %34 : f32
              %62 = arith.addi %47, %arg20 : i32
              %63 = arith.index_cast %62 : i32 to index
              memref.store %61, %arg3[%63] : memref<?xf32>
              %64 = arith.addi %arg20, %c32_i32 : i32
              scf.yield %62, %61, %64 : i32, f32, i32
            }
            scf.yield %52#0, %52#1 : i32, f32
          } else {
            scf.yield %arg16, %arg17 : i32, f32
          }
          scf.yield %45#0, %45#1 : i32, f32
        }
      }
      scf.yield
    }
    return
  }
  func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
}
[ict-debug] driver.cc: Before my pass process: end

[ict-debug] driver.cc: vectorizeSize = 1

[ict-debug] WrapAndReplaceBarrierPass::runOnOperation(): Function name: __nv_min. func.getBlocks().size() == 0! this function is empty, skip it.

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii_0 {
    gpu.func @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c-1 = arith.constant -1 : index
      %c32_i32 = arith.constant 32 : i32
      %c8_i32 = arith.constant 8 : i32
      %c8 = arith.constant 8 : index
      %c-32 = arith.constant -32 : index
      %c-8 = arith.constant -8 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg8 : i32 to index
      %2 = llvm.mlir.undef : i32
      %3 = llvm.mlir.undef : f32
      %4 = gpu.block_id  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %5, %c32_i32 : i32
      %7 = gpu.block_id  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %8, %c32_i32 : i32
      %10 = gpu.block_id  z
      %11 = arith.index_cast %10 : index to i32
      %12 = arith.remsi %11, %arg5 : i32
      %13 = arith.muli %12, %arg10 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.index_cast %12 : i32 to index
      %16 = arith.divsi %11, %arg5 : i32
      %17 = arith.cmpi slt, %16, %arg4 : i32
      %18 = arith.addi %9, %c32_i32 : i32
      %19 = arith.muli %16, %arg5 : i32
      %20 = arith.addi %19, %12 : i32
      %21 = arith.muli %20, %arg8 : i32
      %22 = arith.index_cast %arg6 : i32 to index
      %23 = arith.index_cast %arg13 : i32 to index
      %24 = arith.index_cast %arg7 : i32 to index
      %25 = arith.muli %20, %arg6 : i32
      %26 = arith.index_cast %25 : i32 to index
      %27 = arith.muli %4, %c-32 : index
      scf.parallel (%arg14) = (%c0) to (%c32) step (%c1) {
        scf.if %17 {
          %28 = arith.index_cast %arg14 : index to i32
          %29 = arith.divui %28, %c32_i32 : i32
          %30 = arith.index_cast %29 : i32 to index
          %31 = arith.remui %28, %c32_i32 : i32
          %32 = arith.muli %29, %c8_i32 : i32
          %33 = arith.addi %6, %32 : i32
          %34 = memref.load %arg2[%15] : memref<?xf32>
          %35 = arith.addi %9, %31 : i32
          %36 = arith.muli %30, %c-8 : index
          %37:2 = scf.for %arg15 = %c0 to %c8 step %c1 iter_args(%arg16 = %2, %arg17 = %3) -> (i32, f32) {
            %38 = arith.index_cast %arg15 : index to i32
            %39 = arith.addi %33, %38 : i32
            %40 = arith.subi %27, %arg15 : index
            %41 = arith.addi %40, %36 : index
            %42 = arith.addi %41, %1 : index
            %43 = arith.addi %42, %c-1 : index
            %44 = arith.cmpi sge, %43, %c0 : index
            %45:2 = scf.if %44 -> (i32, f32) {
              %46 = arith.addi %21, %39 : i32
              %47 = arith.muli %46, %arg9 : i32
              %48 = arith.muli %39, %arg11 : i32
              %49 = arith.subi %48, %arg12 : i32
              %50 = arith.index_cast %49 : i32 to index
              %51 = arith.addi %26, %50 : index
              %52:3 = scf.while (%arg18 = %arg16, %arg19 = %arg17, %arg20 = %35) : (i32, f32, i32) -> (i32, f32, i32) {
                %53 = func.call @__nv_min(%18, %arg9) : (i32, i32) -> i32
                %54 = arith.cmpi slt, %arg20, %53 : i32
                scf.condition(%54) %arg18, %arg19, %arg20 : i32, f32, i32
              } do {
              ^bb0(%arg18: i32, %arg19: f32, %arg20: i32):
                %53 = arith.muli %arg20, %arg11 : i32
                %54 = arith.subi %53, %arg12 : i32
                %55 = arith.index_cast %54 : i32 to index
                %56 = arith.cmpi sge, %55, %c0 : index
                %57 = arith.subi %24, %55 : index
                %58 = arith.addi %57, %c-1 : index
                %59 = arith.cmpi sge, %58, %c0 : index
                %60 = scf.for %arg21 = %c0 to %0 step %c1 iter_args(%arg22 = %cst) -> (f32) {
                  %65 = arith.muli %arg21, %23 : index
                  %66 = arith.addi %65, %50 : index
                  %67 = arith.cmpi sge, %66, %c0 : index
                  %68 = arith.muli %65, %c-1 : index
                  %69 = arith.subi %68, %50 : index
                  %70 = arith.addi %69, %22 : index
                  %71 = arith.addi %70, %c-1 : index
                  %72 = arith.cmpi sge, %71, %c0 : index
                  %73 = arith.andi %67, %72 : i1
                  %74 = arith.andi %73, %56 : i1
                  %75 = arith.andi %74, %59 : i1
                  %76 = scf.if %75 -> (f32) {
                    %77 = arith.addi %65, %51 : index
                    %78 = arith.muli %77, %24 : index
                    %79 = arith.addi %78, %55 : index
                    %80 = memref.load %arg0[%79] : memref<?xf32>
                    %81 = arith.addi %arg21, %14 : index
                    %82 = memref.load %arg1[%81] : memref<?xf32>
                    %83 = arith.mulf %80, %82 : f32
                    %84 = arith.addf %arg22, %83 : f32
                    scf.yield %84 : f32
                  } else {
                    scf.yield %arg22 : f32
                  }
                  scf.yield %76 : f32
                }
                %61 = arith.addf %60, %34 : f32
                %62 = arith.addi %47, %arg20 : i32
                %63 = arith.index_cast %62 : i32 to index
                memref.store %61, %arg3[%63] : memref<?xf32>
                %64 = arith.addi %arg20, %c32_i32 : i32
                scf.yield %62, %61, %64 : i32, f32, i32
              }
              scf.yield %52#0, %52#1 : i32, f32
            } else {
              scf.yield %arg16, %arg17 : i32, f32
            }
            scf.yield %45#0, %45#1 : i32, f32
          }
        }
        scf.yield
      }
      gpu.return
    }
    func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): Before execute: end

[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize:

module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", polygeist.gpu_module.llvm.data_layout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64", polygeist.gpu_module.llvm.target_triple = "nvptx64-nvidia-cuda", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  gpu.module @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii_0 {
    gpu.func @_Z30hybrid_depthwise_conv2d_kernelPKfS0_S0_Pfiiiiiiiiii(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: memref<?xf32>, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32) {
      %cst = arith.constant 0.000000e+00 : f32
      %c-1 = arith.constant -1 : index
      %c32_i32 = arith.constant 32 : i32
      %c8_i32 = arith.constant 8 : i32
      %c8 = arith.constant 8 : index
      %c-32 = arith.constant -32 : index
      %c-8 = arith.constant -8 : index
      %c0 = arith.constant 0 : index
      %c1 = arith.constant 1 : index
      %c32 = arith.constant 32 : index
      %0 = arith.index_cast %arg10 : i32 to index
      %1 = arith.index_cast %arg8 : i32 to index
      %2 = llvm.mlir.undef : i32
      %3 = llvm.mlir.undef : f32
      %4 = gpu.block_id  y
      %5 = arith.index_cast %4 : index to i32
      %6 = arith.muli %5, %c32_i32 : i32
      %7 = gpu.block_id  x
      %8 = arith.index_cast %7 : index to i32
      %9 = arith.muli %8, %c32_i32 : i32
      %10 = gpu.block_id  z
      %11 = arith.index_cast %10 : index to i32
      %12 = arith.remsi %11, %arg5 : i32
      %13 = arith.muli %12, %arg10 : i32
      %14 = arith.index_cast %13 : i32 to index
      %15 = arith.index_cast %12 : i32 to index
      %16 = arith.divsi %11, %arg5 : i32
      %17 = arith.cmpi slt, %16, %arg4 : i32
      %18 = arith.addi %9, %c32_i32 : i32
      %19 = arith.muli %16, %arg5 : i32
      %20 = arith.addi %19, %12 : i32
      %21 = arith.muli %20, %arg8 : i32
      %22 = arith.index_cast %arg6 : i32 to index
      %23 = arith.index_cast %arg13 : i32 to index
      %24 = arith.index_cast %arg7 : i32 to index
      %25 = arith.muli %20, %arg6 : i32
      %26 = arith.index_cast %25 : i32 to index
      %27 = arith.muli %4, %c-32 : index
      %c1_0 = arith.constant 1 : index
      scf.for %arg14 = %c0 to %c32 step %c1_0 {
        scf.if %17 {
          %28 = arith.index_cast %arg14 : index to i32
          %29 = arith.divui %28, %c32_i32 : i32
          %30 = arith.index_cast %29 : i32 to index
          %31 = arith.remui %28, %c32_i32 : i32
          %32 = arith.muli %29, %c8_i32 : i32
          %33 = arith.addi %6, %32 : i32
          %34 = memref.load %arg2[%15] : memref<?xf32>
          %35 = arith.addi %9, %31 : i32
          %36 = arith.muli %30, %c-8 : index
          %37:2 = scf.for %arg15 = %c0 to %c8 step %c1 iter_args(%arg16 = %2, %arg17 = %3) -> (i32, f32) {
            %38 = arith.index_cast %arg15 : index to i32
            %39 = arith.addi %33, %38 : i32
            %40 = arith.subi %27, %arg15 : index
            %41 = arith.addi %40, %36 : index
            %42 = arith.addi %41, %1 : index
            %43 = arith.addi %42, %c-1 : index
            %44 = arith.cmpi sge, %43, %c0 : index
            %45:2 = scf.if %44 -> (i32, f32) {
              %46 = arith.addi %21, %39 : i32
              %47 = arith.muli %46, %arg9 : i32
              %48 = arith.muli %39, %arg11 : i32
              %49 = arith.subi %48, %arg12 : i32
              %50 = arith.index_cast %49 : i32 to index
              %51 = arith.addi %26, %50 : index
              %52:3 = scf.while (%arg18 = %arg16, %arg19 = %arg17, %arg20 = %35) : (i32, f32, i32) -> (i32, f32, i32) {
                %53 = func.call @__nv_min(%18, %arg9) : (i32, i32) -> i32
                %54 = arith.cmpi slt, %arg20, %53 : i32
                scf.condition(%54) %arg18, %arg19, %arg20 : i32, f32, i32
              } do {
              ^bb0(%arg18: i32, %arg19: f32, %arg20: i32):
                %53 = arith.muli %arg20, %arg11 : i32
                %54 = arith.subi %53, %arg12 : i32
                %55 = arith.index_cast %54 : i32 to index
                %56 = arith.cmpi sge, %55, %c0 : index
                %57 = arith.subi %24, %55 : index
                %58 = arith.addi %57, %c-1 : index
                %59 = arith.cmpi sge, %58, %c0 : index
                %60 = scf.for %arg21 = %c0 to %0 step %c1 iter_args(%arg22 = %cst) -> (f32) {
                  %65 = arith.muli %arg21, %23 : index
                  %66 = arith.addi %65, %50 : index
                  %67 = arith.cmpi sge, %66, %c0 : index
                  %68 = arith.muli %65, %c-1 : index
                  %69 = arith.subi %68, %50 : index
                  %70 = arith.addi %69, %22 : index
                  %71 = arith.addi %70, %c-1 : index
                  %72 = arith.cmpi sge, %71, %c0 : index
                  %73 = arith.andi %67, %72 : i1
                  %74 = arith.andi %73, %56 : i1
                  %75 = arith.andi %74, %59 : i1
                  %76 = scf.if %75 -> (f32) {
                    %77 = arith.addi %65, %51 : index
                    %78 = arith.muli %77, %24 : index
                    %79 = arith.addi %78, %55 : index
                    %80 = memref.load %arg0[%79] : memref<?xf32>
                    %81 = arith.addi %arg21, %14 : index
                    %82 = memref.load %arg1[%81] : memref<?xf32>
                    %83 = arith.mulf %80, %82 : f32
                    %84 = arith.addf %arg22, %83 : f32
                    scf.yield %84 : f32
                  } else {
                    scf.yield %arg22 : f32
                  }
                  scf.yield %76 : f32
                }
                %61 = arith.addf %60, %34 : f32
                %62 = arith.addi %47, %arg20 : i32
                %63 = arith.index_cast %62 : i32 to index
                memref.store %61, %arg3[%63] : memref<?xf32>
                %64 = arith.addi %arg20, %c32_i32 : i32
                scf.yield %62, %61, %64 : i32, f32, i32
              }
              scf.yield %52#0, %52#1 : i32, f32
            } else {
              scf.yield %arg16, %arg17 : i32, f32
            }
            scf.yield %45#0, %45#1 : i32, f32
          }
        }
      }
      gpu.return
    }
    func.func private @__nv_min(i32, i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>, polygeist.device_only_func = "1"}
  }
}
[ict-debug] ConvertPolygeistToNPUPass::runOnOperation(): After vectorize: end

[ict-debug] CastLikeOpToNPULowering: process op: 

%0 = arith.index_cast %arg10 : i32 to index
[ict-debug] CastLikeOpToNPULowering: process op: 

%2 = arith.index_cast %arg8 : i32 to index
[ict-debug] GPUBlockIdToNPULowering: process op: 

%6 = gpu.block_id  y
[ict-error] GPUBlockIdToNPULowering: block id dimension is not x

