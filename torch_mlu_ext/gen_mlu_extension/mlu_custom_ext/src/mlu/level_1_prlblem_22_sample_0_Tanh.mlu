#include <bang.h>
__mlu_global__ void tanh_kernel(float* v1, float* v2, int32_t v3) {
  int32_t c32_4 = 32;
  size_t c0_5 = 0;
  size_t c1_6 = 1;
  size_t c32_7 = 32;
  int64_t v8 = taskId;
  int32_t v9 = (int32_t) v8;
  int32_t v10 = (v9) * (c32_4);
  for (size_t v11 = c0_5; v11 < c32_7; v11 += c1_6) {
    int64_t v12 = (int64_t)v11;
    int32_t v13 = (int32_t) v12;
    int32_t v14 = (v10) + (v13);
    size_t v15 = (size_t) v14;
    bool v16 = v14 < v3;
    if (v16) {
      float v17 = v1[v15];
      float v18 = tanhf(v17);
      v2[v15] = v18;
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for tanh_kernel
void tanh_kernel_entry(float* v1, float* v2, int32_t v3, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    tanh_kernel<<<dim, c, queue>>>(v1, v2, v3);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
