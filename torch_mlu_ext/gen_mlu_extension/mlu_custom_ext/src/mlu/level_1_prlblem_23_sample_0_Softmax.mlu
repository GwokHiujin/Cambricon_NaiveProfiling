#include <bang.h>
__mlu_global__ void softmax_kernel_batch(float* v1, float* v2, int32_t v3, int32_t v4) {
  int32_t c27_5 = 27;
  int32_t c16_6 = 16;
  float v7 = (float)-3.402823470e+38;
  float v8 = (float)0.0e+00;
  size_t c0_9 = 0;
  size_t c1_10 = 1;
  size_t c32_11 = 32;
  __nram__ int8_t v12[32];
  float* v13 = (float*)v12;
  int64_t v14 = taskId;
  int32_t v15 = (int32_t) v14;
  bool v16 = v15 < v3;
  if (v16) {
    __nram__ int8_t v17[32];
    float* v18 = (float*)v17;
    int32_t v19 = (v15) * (v4);
    size_t v20 = (size_t) v4;
    for (size_t v21 = c0_9; v21 < c32_11; v21 += c1_10) {
      float v22;
      float v23 = v7;
      for (size_t v24 = v21; v24 < v20; v24 += c32_11) {
        size_t v25 = (v24) - (v21);
        size_t v26 = (v25) / (c32_11);
        size_t v27 = (v26) * (c32_11);
        size_t v28 = (v21) + (v27);
        int64_t v29 = (int64_t)v28;
        int32_t v30 = (int32_t) v29;
        int32_t v31 = (v19) + (v30);
        size_t v32 = (size_t) v31;
        float v33 = v1[v32];
        bool v34 = v33 > v23;
        float v35 = (v34) ? (v33) : (v23);
        v23 = v35;
      }
      v22 = v23;;
      v13[v21] = v22;
    };
    size_t v36 = (size_t) c27_5;
    size_t v37 = (c32_11) - (v36);
    for (size_t v38 = c0_9; v38 < v37; v38 += c1_10) {
      int64_t v39 = (int64_t)v38;
      int32_t v40 = (int32_t) v39;
      int32_t v41 = (c16_6) >> (v40);
      for (size_t v42 = c0_9; v42 < c32_11; v42 += c1_10) {
        int64_t v43 = (int64_t)v42;
        int32_t v44 = (int32_t) v43;
        bool v45 = v44 < v41;
        if (v45) {
          float v46 = v13[v42];
          int32_t v47 = (v44) + (v41);
          size_t v48 = (size_t) v47;
          float v49 = v13[v48];
          bool v50 = v46 < v49;
          if (v50) {
            v13[v42] = v49;
          };
        };
      };
    };
    float v51 = v13[c0_9];
    for (size_t v52 = c0_9; v52 < c32_11; v52 += c1_10) {
      v18[v52] = v51;
    };
    for (size_t v53 = c0_9; v53 < c32_11; v53 += c1_10) {
      float v54 = v18[v53];
      float v55;
      float v56 = v8;
      for (size_t v57 = v53; v57 < v20; v57 += c32_11) {
        size_t v58 = (v57) - (v53);
        size_t v59 = (v58) / (c32_11);
        size_t v60 = (v59) * (c32_11);
        size_t v61 = (v53) + (v60);
        int64_t v62 = (int64_t)v61;
        int32_t v63 = (int32_t) v62;
        int32_t v64 = (v19) + (v63);
        size_t v65 = (size_t) v64;
        float v66 = v1[v65];
        float v67 = v66 - v54;
        float v68 = expf(v67);
        v2[v65] = v68;
        float v69 = v56 + v68;
        v56 = v69;
      }
      v55 = v56;;
      size_t v70 = (v53) + (c32_11);
      v13[v70] = v55;
    };
    for (size_t v71 = c0_9; v71 < v37; v71 += c1_10) {
      int64_t v72 = (int64_t)v71;
      int32_t v73 = (int32_t) v72;
      int32_t v74 = (c16_6) >> (v73);
      for (size_t v75 = c0_9; v75 < c32_11; v75 += c1_10) {
        int64_t v76 = (int64_t)v75;
        size_t v77 = (v75) + (c32_11);
        int32_t v78 = (int32_t) v76;
        bool v79 = v78 < v74;
        if (v79) {
          int32_t v80 = (v78) + (v74);
          size_t v81 = (size_t) v80;
          size_t v82 = (v81) + (c32_11);
          float v83 = v13[v82];
          float v84 = v13[v77];
          float v85 = v84 + v83;
          v13[v77] = v85;
        };
      };
    };
    float v86 = v13[c32_11];
    for (size_t v87 = c0_9; v87 < c32_11; v87 += c1_10) {
      for (size_t v88 = v87; v88 < v20; v88 += c32_11) {
        size_t v89 = (v88) - (v87);
        size_t v90 = (v89) / (c32_11);
        size_t v91 = (v90) * (c32_11);
        size_t v92 = (v87) + (v91);
        int64_t v93 = (int64_t)v92;
        int32_t v94 = (int32_t) v93;
        int32_t v95 = (v19) + (v94);
        size_t v96 = (size_t) v95;
        float v97 = v2[v96];
        float v98 = v97 / v86;
        v2[v96] = v98;
      };
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for softmax_kernel_batch
void softmax_kernel_batch_entry(float* v1, float* v2, int32_t v3, int32_t v4) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = v4 / 32;
    softmax_kernel_batch<<<dim, c, queue>>>(v1, v2, v3, v4);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
