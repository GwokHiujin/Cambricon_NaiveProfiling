#include <bang.h>
__mlu_global__ void softplus_kernel(float* v1, float* v2, int32_t v3) {
  int32_t c32_4 = 32;
  float v5 = (float)2.000000000e+01;
  float v6 = (float)1.000000000e+00;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  int64_t v10 = taskIdX;
  size_t v11 = (size_t) v10;
  int32_t v12 = (int32_t) v11;
  int32_t v13 = (v12) * (c32_4);
  for (size_t v14 = c0_7; v14 < c32_9; v14 += c1_8) {
    int32_t v15 = (int32_t) v14;
    int32_t v16 = (v13) + (v15);
    size_t v17 = (size_t) v16;
    bool v18 = v16 < v3;
    if (v18) {
      float v19 = v1[v17];
      bool v20 = v19 > v5;
      if (v20) {
        v2[v17] = v19;
      } else {
        float v21 = expf(v19);
        float v22 = v21 + v6;
        float v23 = log(v22);
        v2[v17] = v23;
      };
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for softplus_kernel
void softplus_kernel_entry(float* v1, float* v2, int32_t v3, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    softplus_kernel<<<dim, c, queue>>>(v1, v2, v3);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
