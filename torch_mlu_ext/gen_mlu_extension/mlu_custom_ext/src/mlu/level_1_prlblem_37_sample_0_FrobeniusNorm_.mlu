#include <bang.h>
__mlu_global__ void frobenius_norm_kernel(float* v1, float* v2, float v3, int32_t v4) {
  int32_t c32_5 = 32;
  size_t c0_6 = 0;
  size_t c1_7 = 1;
  size_t c32_8 = 32;
  int64_t v9 = taskId;
  int32_t v10 = (int32_t) v9;
  int32_t v11 = (v10) * (c32_5);
  for (size_t v12 = c0_6; v12 < c32_8; v12 += c1_7) {
    int64_t v13 = (int64_t)v12;
    int32_t v14 = (int32_t) v13;
    int32_t v15 = (v11) + (v14);
    size_t v16 = (size_t) v15;
    bool v17 = v15 < v4;
    if (v17) {
      float v18 = v1[v16];
      float v19 = v18 / v3;
      v2[v16] = v19;
    };
  }
  return;
}



#include <bang.h>
__mlu_global__ void square_sum_kernel(float* v1, float* v2, int32_t v3) {
  int32_t c16_4 = 16;
  int32_t c32_5 = 32;
  float v6 = (float)0.0e+00;
  int32_t c0_7 = 0;
  int32_t c1_8 = 1;
  size_t c0_9 = 0;
  size_t c1_10 = 1;
  size_t c32_11 = 32;
  __nram__ int8_t v12[32];
  float* v13 = (float*)v12;
  __nram__ int8_t v14[32];


// ********** Entry Functions **********

// Auto-generated entry function for frobenius_norm_kernel
void frobenius_norm_kernel_entry(float* v1, float* v2, float v3, int32_t v4) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = v4 / 32;
    frobenius_norm_kernel<<<dim, c, queue>>>(v1, v2, v3, v4);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}


// Auto-generated entry function for square_sum_kernel
void square_sum_kernel_entry(float* v1, float* v2, int32_t v3) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = v3 / 32;
    square_sum_kernel<<<dim, c, queue>>>(v1, v2, v3);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
