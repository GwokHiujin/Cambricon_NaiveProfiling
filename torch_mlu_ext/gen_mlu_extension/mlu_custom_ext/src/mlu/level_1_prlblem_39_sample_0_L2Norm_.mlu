#include <bang.h>
__mlu_global__ void l2_normalize_kernel(float* v1, float* v2, int32_t v3, int32_t v4) {
  size_t c31_5 = 31;
  size_t c5_6 = 5;
  int32_t c16_7 = 16;
  float v8 = (float)0.0e+00;
  float v9 = (float)9.999999930e-09;
  size_t c0_10 = 0;
  size_t c1_11 = 1;
  size_t c32_12 = 32;
  __nram__ int8_t v13[32];
  float* v14 = (float*)v13;
  int64_t v15 = taskIdX;
  size_t v16 = (size_t) v15;
  int32_t v17 = (int32_t) v16;
  int32_t v18 = (v17) * (v4);
  size_t v19 = (size_t) v18;
  size_t v20 = (size_t) v4;
  for (size_t v21 = c0_10; v21 < c32_12; v21 += c1_11) {
    size_t v22 = (v20) - (v21);
    size_t v23 = (v22) + (c31_5);
    size_t v24 = (v23) / (c32_12);
    float v25;
    float v26 = v8;
    for (size_t v27 = c0_10; v27 < v24; v27 += c1_11) {
      size_t v28 = (v27) * (c32_12);
      size_t v29 = (v28) + (v21);
      size_t v30 = (v29) + (v19);
      float v31 = v1[v30];
      float v32 = v31 * v31;
      float v33 = v26 + v32;
      v26 = v33;
    }
    v25 = v26;;
    v14[v21] = v25;
  }
  for (size_t v34 = c0_10; v34 < c5_6; v34 += c1_11) {
    int32_t v35 = (int32_t) v34;
    int32_t v36 = (c16_7) >> (v35);
    for (size_t v37 = c0_10; v37 < c32_12; v37 += c1_11) {
      int32_t v38 = (int32_t) v37;
      bool v39 = v38 < v36;
      if (v39) {
        int32_t v40 = (v38) + (v36);
        size_t v41 = (size_t) v40;
        float v42 = v14[v41];
        float v43 = v14[v37];
        float v44 = v43 + v42;
        v14[v37] = v44;
      };
    };
  }
  float v45 = v14[c0_10];
  float v46 = v45 + v9;
  float v47 = sqrtf(v46);
  for (size_t v48 = c0_10; v48 < c32_12; v48 += c1_11) {
    size_t v49 = (v20) - (v48);
    size_t v50 = (v49) + (c31_5);
    size_t v51 = (v50) / (c32_12);
    for (size_t v52 = c0_10; v52 < v51; v52 += c1_11) {
      size_t v53 = (v52) * (c32_12);
      size_t v54 = (v53) + (v48);
      size_t v55 = (v54) + (v19);
      float v56 = v1[v55];
      float v57 = v56 / v47;
      v2[v55] = v57;
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for l2_normalize_kernel
void l2_normalize_kernel_entry(float* v1, float* v2, int32_t v3, int32_t v4, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    l2_normalize_kernel<<<dim, c, queue>>>(v1, v2, v3, v4);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
