#include <bang.h>
__mlu_global__ void matvec_mul_kernel(float* v1, float* v2, float* v3, int32_t v4, int32_t v5) {
  size_t c31_6 = 31;
  int32_t c27_7 = 27;
  int32_t c16_8 = 16;
  float v9 = (float)0.0e+00;
  int32_t c0_10 = 0;
  size_t c0_11 = 0;
  size_t c1_12 = 1;
  size_t c32_13 = 32;
  __nram__ int8_t v14[32];
  float* v15 = (float*)v14;
  int64_t v16 = taskId;
  size_t v17 = (size_t)v16;
  int32_t v18 = (int32_t) v16;
  int32_t v19 = (v18) * (v5);
  size_t v20 = (size_t) v19;
  size_t v21 = (size_t) v5;
  for (size_t v22 = c0_11; v22 < c32_13; v22 += c1_12) {
    size_t v23 = (v21) - (v22);
    size_t v24 = (v23) + (c31_6);
    size_t v25 = (v24) / (c32_13);
    float v26;
    float v27 = v9;
    for (size_t v28 = c0_11; v28 < v25; v28 += c1_12) {
      size_t v29 = (v28) * (c32_13);
      size_t v30 = (v29) + (v20);
      size_t v31 = (v30) + (v22);
      float v32 = v1[v31];
      size_t v33 = (v29) + (v22);
      float v34 = v2[v33];
      float v35 = v32 * v34;
      float v36 = v27 + v35;
      v27 = v36;
    }
    v26 = v27;;
    v15[v22] = v26;
  }
  size_t v37 = (size_t) c27_7;
  size_t v38 = (c32_13) - (v37);
  for (size_t v39 = c0_11; v39 < v38; v39 += c1_12) {
    int64_t v40 = (int64_t)v39;
    int32_t v41 = (int32_t) v40;
    int32_t v42 = (c16_8) >> (v41);
    for (size_t v43 = c0_11; v43 < c32_13; v43 += c1_12) {
      int64_t v44 = (int64_t)v43;
      int32_t v45 = (int32_t) v44;
      bool v46 = v45 < v42;
      if (v46) {
        int32_t v47 = (v45) + (v42);
        size_t v48 = (size_t) v47;
        float v49 = v15[v48];
        float v50 = v15[v43];
        float v51 = v50 + v49;
        v15[v43] = v51;
      };
    };
  }
  float v52 = v15[c0_11];
  for (size_t v53 = c0_11; v53 < c32_13; v53 += c1_12) {
    int64_t v54 = (int64_t)v53;
    int32_t v55 = (int32_t) v54;
    bool v56 = v55 == c0_10;
    if (v56) {
      v3[v17] = v52;
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for matvec_mul_kernel
void matvec_mul_kernel_entry(float* v1, float* v2, float* v3, int32_t v4, int32_t v5) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = v5 / 32;
    matvec_mul_kernel<<<dim, c, queue>>>(v1, v2, v3, v4, v5);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
