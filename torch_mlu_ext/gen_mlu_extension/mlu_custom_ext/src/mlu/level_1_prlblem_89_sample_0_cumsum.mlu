#include <bang.h>
__mlu_global__ void scan_kernel(float* v1, float* v2, int32_t v3, int32_t v4) {
  int32_t c32_5 = 32;
  float v6 = (float)0.0e+00;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  int64_t v10 = taskIdX;
  size_t v11 = (size_t) v10;
  int32_t v12 = (int32_t) v11;
  int32_t v13 = (v12) * (c32_5);
  for (size_t v14 = c0_7; v14 < c32_9; v14 += c1_8) {
    int32_t v15 = (int32_t) v14;
    int32_t v16 = (v13) + (v15);
    size_t v17 = (size_t) v16;
    int32_t v18 = (v16) / (v4);
    int32_t v19 = (v18) * (v4);
    size_t v20 = (size_t) v19;
    int32_t v21 = (v16) % (v4);
    size_t v22 = (size_t) v21;
    bool v23 = v18 < v3;
    if (v23) {
      size_t v24 = (v22) + (c1_8);
      float v25;
      float v26 = v6;
      for (size_t v27 = c0_7; v27 < v24; v27 += c1_8) {
        size_t v28 = (v27) + (v20);
        float v29 = v1[v28];
        float v30 = v26 + v29;
        v26 = v30;
      }
      v25 = v26;;
      v2[v17] = v25;
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for scan_kernel
void scan_kernel_entry(float* v1, float* v2, int32_t v3, int32_t v4, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    scan_kernel<<<dim, c, queue>>>(v1, v2, v3, v4);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
