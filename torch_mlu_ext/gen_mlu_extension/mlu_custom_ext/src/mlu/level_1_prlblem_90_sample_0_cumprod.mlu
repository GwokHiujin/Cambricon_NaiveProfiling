#include <bang.h>
__mlu_global__ void cumprod_kernel(float* v1, float* v2, int64_t v3) {
  float v4 = (float)1.000000000e+00;
  size_t c0_5 = 0;
  size_t c1_6 = 1;
  int64_t v7 = taskIdX;
  size_t v8 = (size_t) v7;
  int32_t v9 = (int32_t) v8;
  int64_t v10 = (int64_t) v9;
  int64_t v11 = (v10) * (v3);
  size_t v12 = (size_t) v11;
  size_t v13 = (size_t) v3;
  float v14;
  float v15 = v4;
  for (size_t v16 = c0_5; v16 < v13; v16 += c1_6) {
    size_t v17 = (v16) + (v12);
    float v18 = v1[v17];
    float v19 = v15 * v18;
    v2[v17] = v19;
    v15 = v19;
  }
  v14 = v15;
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for cumprod_kernel
void cumprod_kernel_entry(float* v1, float* v2, int64_t v3, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    cumprod_kernel<<<dim, c, queue>>>(v1, v2, v3);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
