#include <bang.h>
__mlu_global__ void reverse_cumsum_kernel(float* v1, float* v2, int32_t v3, int32_t v4) {
  float v5 = (float)0.0e+00;
  size_t c18446744073709551615_6 = -1;
  size_t c0_7 = 0;
  size_t c1_8 = 1;
  size_t c32_9 = 32;
  size_t v10 = (size_t) v4;
  int64_t v11 = taskId;
  int32_t v12 = (int32_t) v11;
  int32_t v13 = (v12) * (v4);
  size_t v14 = (size_t) v13;
  bool v15 = v12 < v3;
  for (size_t v16 = c0_7; v16 < c32_9; v16 += c1_8) {
    if (v15) {
      float v17;
      float v18 = v5;
      for (size_t v19 = c0_7; v19 < v10; v19 += c1_8) {
        size_t v20 = (v14) - (v19);
        size_t v21 = (v20) + (v10);
        size_t v22 = (v21) + (c18446744073709551615_6);
        float v23 = v1[v22];
        float v24 = v18 + v23;
        v2[v22] = v24;
        v18 = v24;
      }
      v17 = v18;;
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for reverse_cumsum_kernel
void reverse_cumsum_kernel_entry(float* v1, float* v2, int32_t v3, int32_t v4) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = v4 / 32;
    reverse_cumsum_kernel<<<dim, c, queue>>>(v1, v2, v3, v4);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
