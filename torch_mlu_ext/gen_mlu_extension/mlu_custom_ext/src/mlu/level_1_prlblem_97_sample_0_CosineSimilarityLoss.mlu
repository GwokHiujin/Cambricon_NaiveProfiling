#include <bang.h>
__mlu_global__ void cosine_similarity_loss_kernel(float* v1, float* v2, float* v3, int32_t v4, int32_t v5) {
  size_t c5_6 = 5;
  int32_t c16_7 = 16;
  float v8 = (float)0.0e+00;
  int32_t c0_9 = 0;
  float v10 = (float)9.999999930e-09;
  float v11 = (float)1.000000000e+00;
  size_t c0_12 = 0;
  size_t c1_13 = 1;
  size_t c32_14 = 32;
  __nram__ int8_t v15[32];
  float* v16 = (float*)v15;
  int64_t v17 = taskIdX;
  size_t v18 = (size_t) v17;
  int32_t v19 = (int32_t) v18;
  bool v20 = v19 < v4;
  if (v20) {
    __nram__ int8_t v21[32];
    float* v22 = (float*)v21;
    __nram__ int8_t v23[32];
    float* v24 = (float*)v23;
    int32_t v25 = (v19) * (v5);
    size_t v26 = (size_t) v25;
    size_t v27 = (size_t) v5;
    for (size_t v28 = c0_12; v28 < c32_14; v28 += c1_13) {
      float v29;
      float v30;
      float v31;
      float v32 = v8;
      float v33 = v8;
      float v34 = v8;
      for (size_t v35 = v28; v35 < v27; v35 += c32_14) {
        size_t v36 = (v35) - (v28);
        size_t v37 = (v36) / (c32_14);
        size_t v38 = (v37) * (c32_14);
        size_t v39 = (v28) + (v38);
        size_t v40 = (v39) + (v26);
        float v41 = v1[v40];
        float v42 = v2[v40];
        float v43 = v41 * v42;
        float v44 = v34 + v43;
        float v45 = v41 * v41;
        float v46 = v33 + v45;
        float v47 = v42 * v42;
        float v48 = v32 + v47;
        v32 = v48;
        v33 = v46;
        v34 = v44;
      }
      v29 = v32;
      v30 = v33;
      v31 = v34;;
      v16[v28] = v31;
    };
    for (size_t v49 = c0_12; v49 < c5_6; v49 += c1_13) {
      int32_t v50 = (int32_t) v49;
      int32_t v51 = (c16_7) >> (v50);
      for (size_t v52 = c0_12; v52 < c32_14; v52 += c1_13) {
        int32_t v53 = (int32_t) v52;
        bool v54 = v53 < v51;
        if (v54) {
          int32_t v55 = (v53) + (v51);
          size_t v56 = (size_t) v55;
          float v57 = v16[v56];
          float v58 = v16[v52];
          float v59 = v58 + v57;
          v16[v52] = v59;
        };
      };
    };
    float v60 = v16[c0_12];
    for (size_t v61 = c0_12; v61 < c32_14; v61 += c1_13) {
      float v62;
      float v63;
      float v64;
      float v65 = v8;
      float v66 = v8;
      float v67 = v8;
      for (size_t v68 = v61; v68 < v27; v68 += c32_14) {
        size_t v69 = (v68) - (v61);
        size_t v70 = (v69) / (c32_14);
        size_t v71 = (v70) * (c32_14);
        size_t v72 = (v61) + (v71);
        size_t v73 = (v72) + (v26);
        float v74 = v1[v73];
        float v75 = v2[v73];
        float v76 = v74 * v75;
        float v77 = v67 + v76;
        float v78 = v74 * v74;
        float v79 = v66 + v78;
        float v80 = v75 * v75;
        float v81 = v65 + v80;
        v65 = v81;
        v66 = v79;
        v67 = v77;
      }
      v62 = v65;
      v63 = v66;
      v64 = v67;;
      v22[v61] = v60;
      v16[v61] = v63;
    };
    for (size_t v82 = c0_12; v82 < c5_6; v82 += c1_13) {
      int32_t v83 = (int32_t) v82;
      int32_t v84 = (c16_7) >> (v83);
      for (size_t v85 = c0_12; v85 < c32_14; v85 += c1_13) {
        int32_t v86 = (int32_t) v85;
        bool v87 = v86 < v84;
        if (v87) {
          int32_t v88 = (v86) + (v84);
          size_t v89 = (size_t) v88;
          float v90 = v16[v89];
          float v91 = v16[v85];
          float v92 = v91 + v90;
          v16[v85] = v92;
        };
      };
    };
    float v93 = v16[c0_12];
    for (size_t v94 = c0_12; v94 < c32_14; v94 += c1_13) {
      float v95;
      float v96;
      float v97;
      float v98 = v8;
      float v99 = v8;
      float v100 = v8;
      for (size_t v101 = v94; v101 < v27; v101 += c32_14) {
        size_t v102 = (v101) - (v94);
        size_t v103 = (v102) / (c32_14);
        size_t v104 = (v103) * (c32_14);
        size_t v105 = (v94) + (v104);
        size_t v106 = (v105) + (v26);
        float v107 = v1[v106];
        float v108 = v2[v106];
        float v109 = v107 * v108;
        float v110 = v100 + v109;
        float v111 = v107 * v107;
        float v112 = v99 + v111;
        float v113 = v108 * v108;
        float v114 = v98 + v113;
        v98 = v114;
        v99 = v112;
        v100 = v110;
      }
      v95 = v98;
      v96 = v99;
      v97 = v100;;
      v24[v94] = v93;
      v16[v94] = v95;
    };
    for (size_t v115 = c0_12; v115 < c5_6; v115 += c1_13) {
      int32_t v116 = (int32_t) v115;
      int32_t v117 = (c16_7) >> (v116);
      for (size_t v118 = c0_12; v118 < c32_14; v118 += c1_13) {
        int32_t v119 = (int32_t) v118;
        bool v120 = v119 < v117;
        if (v120) {
          int32_t v121 = (v119) + (v117);
          size_t v122 = (size_t) v121;
          float v123 = v16[v122];
          float v124 = v16[v118];
          float v125 = v124 + v123;
          v16[v118] = v125;
        };
      };
    };
    float v126 = v16[c0_12];
    float v127 = v126 + v10;
    float v128 = sqrtf(v127);
    for (size_t v129 = c0_12; v129 < c32_14; v129 += c1_13) {
      float v130 = v24[v129];
      float v131 = v22[v129];
      float v132 = v130 + v10;
      float v133 = sqrtf(v132);
      int32_t v134 = (int32_t) v129;
      bool v135 = v134 == c0_9;
      if (v135) {
        float v136 = v133 * v128;
        float v137 = v136 + v10;
        float v138 = v131 / v137;
        float v139 = v11 - v138;
        v3[v18] = v139;
      };
    };
  }
  return;
}






// ********** Entry Functions **********

// Auto-generated entry function for cosine_similarity_loss_kernel
void cosine_similarity_loss_kernel_entry(float* v1, float* v2, float* v3, int32_t v4, int32_t v5, int elem_num) {
    cnrtQueue_t queue;
    cnrtQueueCreate(&queue);
    cnrtDim3_t dim = {1, 1, 1};
    cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
    dim.x = elem_num / 32;
    cosine_similarity_loss_kernel<<<dim, c, queue>>>(v1, v2, v3, v4, v5);
    cnrtQueueSync(queue);
    cnrtQueueDestroy(queue);
}
