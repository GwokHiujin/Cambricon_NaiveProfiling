#include <bang.h>
__mlu_global__ void hinge_loss_kernel(float* v1, float* v2, float* v3, int32_t v4) {
  int32_t c32_5 = 32;
  float v6 = (float)0.0e+00;
  float v7 = (float)1.000000000e+00;
  size_t c0_8 = 0;
  size_t c1_9 = 1;
  size_t c32_10 = 32;
  int64_t v11 = taskId;
  int32_t v12 = (int32_t) v11;
  int32_t v13 = (v12) * (c32_5);
  for (size_t v14 = c0_8; v14 < c32_10; v14 += c1_9) {
    int64_t v15 = (int64_t)v14;
    int32_t v16 = (int32_t) v15;
    int32_t v17 = (v13) + (v16);
    size_t v18 = (size_t) v17;
    bool v19 = v17 < v4;
    if (v19) {
      float v20 = v1[v18];
      float v21 = v2[v18];
      float v22 = v20 * v21;
      float v23 = v7 - v22;
      float v24 = __cn_scalar_max_f32(v23, v6);
      v3[v18] = v24;
    };
  }
  return;
}

void bang_100_HingeLoss_entry(float *predictions, float *targets,
                              float *output, int n)
{
  cnrtQueue_t queue;
  cnrtQueueCreate(&queue);
  cnrtDim3_t dim = {1, 1, 1};
  cnrtFunctionType_t c = CNRT_FUNC_TYPE_BLOCK;
  dim.x = n / 32;
  hinge_loss_kernel<<<dim, c, queue>>>(predictions, targets, output, n);
  cnrtQueueSync(queue);
  cnrtQueueDestroy(queue);
}
